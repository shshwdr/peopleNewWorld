%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1509.i120.004.P.m007.c20.ships.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kot
%%CreationDate: 9/9/2015
%%BoundingBox: 0 0 417 429
%%HiResBoundingBox: 0 0 416.0757 428.0352
%%CropBox: 0 0 416.0757 428.0352
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 124 128 8%%BeginData: 16844 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD4FFFC3FD7BFFCAA1FD41FFAF2E84597E845984FD32FFCAA1FD34
%FFA8A87E8484FD07FFA82F59592E842E7EFD32FFCA9A9AFD32FF84592E2F
%2E2F2E597DAFFD04FF7D7E8459847D59FFAF8B858B85AFFD2CFF9AC3C3CA
%C3CACAFD2CFFA82F0C352E2F2E2F2E2E2E59A8FFFFAF59A87DA8847EA8A9
%3536353635595984FD28FFCABC99CACACAA8CAFD2BFFA960598459605A5A
%5A60598435608460608459A959FD058459845984845959FF84A884A8AFFD
%23FF9ABCA1FD2FFF852F355A592F602E5A35355A352F602E84593584592F
%842E7E592F7E592F842E59A9842F592EAFFD22FFA8BC9AC2FD2FFF846035
%8435605A595A60358459848459848459A9595A84597E843584597E845959
%AF84AFFD24FFCACABCC29ACACFFFCAFFCAFFCAFFCAFFCAFFCAFFCAFD1EFF
%848535595A5935602F605959845959842F8459598459598435847E598459
%5984357EA9845959A8FD1AFFA858AEFFFFA1BCA1A19AA19AA19AA19AA19A
%A19AA19AA19AA19AA19AA19AC3CAFD1AFFAF8B855A2F84355A5A597E842F
%A9595A845984842FA9595984597E842E845959845959FF59592F59A8FD19
%FFA88383FFCABCBBA8A1C3FD05A1C3A1C37DC3A1C3A1C3A1C3A1C3A8C299
%C2CAFD19FFA9608535355A5959842E845959845959842E84595984595984
%2F847E35595A59842F7EAF842E592E59A8FD17FFCFFFCBA8FFCAC3765176
%5276A076A1A14B7676CAA176527651765276517676C3A1CAFD19FF848B85
%5A35AF59608459848435AF59848459848435AF595A845A84842F85595A84
%5A5AFF7E5959592F84FD0AFFAFFD0FFFA8FFFF85FD040C358435FF0D0C0C
%85FF60FD0A0C35AFFD17FFCAFF848484AFA09FA0A09FA79FA6A09FA0A09F
%A79FC8A09FA0A69FA79FC8A09FA0A69FA79FC2A8AF84AF84856085848560
%61366036856085A8FD0DFFA7A6C9CE57582D582DA757A783572D7CA7A72D
%5851582D5851582D5851572DA7CAFD14FF595953595959537D527C527C52
%7C527C527C527C527C527D527C527C527C527D527C527C527C5259363C36
%3C1436FD05143C6085608BAFFD0DFFC9C7C7C7A4FD0DC7A5FD0DC7A4C7C8
%FD12FFA83613141336131436611461363660363661146036366036366114
%6036366036366114603614603614611414131414141336368460856085AF
%FD0DFFA6C79EC7A5C7A5C7C7C7A4C7A5FD07C7A5C7A5C7C7C7A4FD0AC7CE
%CAFD0FFF851436143C143614616036606136851461603660613685146160
%3660611485363D60363C611461363D603C143C143C3685848B848B84AFFD
%0EFFCFC8A6CEC8C8C1C89FA67BC8A6C8A6A69FA69FA69FC8C1C8C7A67BFD
%05A67CA67BA67CA6A5FD10FFFD2D146160856085608560AFFD13FFC7C0C1
%750C06358484FF59050C0C0C0658C0C1C058060C8484355A060C0C0C060C
%35FD05FFCFFFCFCFCACFC9CECAFFFFFFFD053635363636355A3636353636
%363536363635363636355A3636353636363536363635FD043660608584A9
%8485848584FD0FFFCFCFC9CECEC8C0C6C6572D58A7A7A8A82D582D582E58
%9EC6C6A42D5858CF58A82E582D582D582DC8C7C8FD04C7C0C7C6C6C0C6C0
%CEFFFFFFA1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1C3
%A1C3A1C3A1C3A1C3A1C3A1C3A1C3A1CAA8CAA8CAA1CAA8CAA8FD0FFF7D57
%51575057505751575157517B5157507B5157517B51575157515751575157
%51575157515751575057505750575157505751572CA6FD05FFA8FFCBFFA8
%FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCB
%FFA8FFFFFFCBFFFFFFCBFFFFFFA8FD0FFFC9C69EC79EC79EC79EC79EC79E
%A5579F9E9F7BC79E7B9EC79EC79EC79EC79EC69EC79EC79EC79EC79EC79E
%C79EC7C0C69EC79EC79EC9FD46FFC79EC6C0C6C0C6C0C6C0C6C0C6510D2D
%C00B0C9E570657C09E7AC69E7B9EC67A9EC0C6C0C6C0C6C0C6C0C6C0C656
%57519EC0C6C0C8FD47FFC6C6C0C6C0C6C0C6C0C6C0C6C67B0C589E2E0CC7
%570D51C67B579EA5579F9E7B7BC6C0C6C0C6C0C6C0C6C0C6C07B2D589EC6
%C0C8FD47FFCAC79EC09EC69EC09EC69EC09EC6C09E9EC69E9EC0C67AC09E
%C6C0C09EC6C0C0C0C69EC09EC69EC09EC69EC09EC6C0C6C0C69EC7FD15FF
%FD05CAFD2FFFCFCEC9CFC9CEC9CFC9CEC9CFC9CEC9CEC9CEC9CFC9CEC9CF
%C9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEFD17FFBC
%BCBCA1A8FD76FFCAC3C3C3A1FD78FFCAFFFFA7A8FD7AFFA1FD2BFFA8FFA8
%FFA8FD4AFFAFA8A8FD28FFA8FD057DA8A8FD48FF843B3B6084FD26FFA87D
%7DA8FD4DFFAF12603B84FD25FFA87D7DA8FFFFAFA8FD07FFA8FFFFFFA8FF
%FFFFA8FFA8FFA8FFA8FFA8FD32FFAE3C606084FD25FF7D7DA8FFA9AF5A61
%AFFD05FFA8FD0BFFA8FFA8FFA8FD33FFAF35603B84FD04FFA8AF83AEA8FD
%1AFFA87D7DA8AF848B6037366185FFA8FFFD06A87DA87DA87DFD08A8FD32
%FFAF605F608AFD04FF8B133C3BAFFD1AFF7D7D7DAF848560605A84595A7D
%7D7DA87D7D7DA87D7D527D7D7D527D7D7D527D52A8FD31FF84606059598A
%A8FFFFFF84193B605FFD15FFA8A8FD067D597D527D527D52765252527D52
%52277D525227522752275227522727F87DFD0AFF3B6084FD25FFAF133B19
%663B8BFFFFFFAF3B666084A1FD13FF7D7D527D527DFD0652275227522752
%2752527D5252527D5252275227522752272727A8FD0BFF8B60AFFD1FFFA8
%FD05FF841913605F6084FFFFFF843C3B6083A77CCAFD0FFFA852FD1927F8
%FD0727F82727A8FD0EFFA8FD1DFFAF3B6060AFFFFFFFAF133C60603B8AFF
%FFFFAF5F605F84A1CAA1A8FD0BFFA87D52FD152752272727522752275227
%522752275252FD10FFA8A8FD1CFFA819356060FFFFFFA83B35603B605FFF
%FFFFA8A17DA8A1A7A7CFA1A7A8FD09FF522727522752275227FD0C527D52
%52527D527D527D527D527D5252527DA8FD10FFC298C19EC1C0C1C0C0A0FD
%16FF3B66608AFFFFFFAF3B6660605F8AFD04FFA1A7848460A8A7FFA7A7A8
%FD09FFA8FF7DFD195227522752527D7DFD13FFA79F75A0FD0575CFFD15FF
%AE3C3B6060FFFFFF843B5F605F6060FF843B353B13603B6083A7A7FFA8A1
%A1FD0AFF7D27525252275227522752275227522752275227525252275252
%FD047DFFA8FD14FF84275252522752277DFD05A8FD12FF3B603B8AFFFFFF
%AF3B603B603B8BFFAF133B133C60603B84A8A8A1FFCAA7A1FD3DFF7D5227
%7D52522752A87DA8FFA8FF7DFD10FFA8847D8484FFFFFF848483847D8484
%FFAF3B131935603B6059A8A7A8A1FFA8A7A1CAFD3AFFA8FD057D527D7DFF
%7DFD04FFA8FD10FF8A355F5F8AFFFFFF843B605F845FAEFFFF6019196660
%605F66A8CAA8CFA7FFFFCAA1CAFD3AFF7DA8A8A87DFD04A87DA8FFFFFFA1
%FD07FFA9FD08FF5F193B603BFFFFFF7D19133B3B6084FFFF84133B5F605F
%603BAFCAA8A7CAA7FFFFCAA1A7A8FD1FFFA8FD17FFA87DA8A8A77D7DA87D
%A8597D7DA8847D7D847D7D52595253A8FD07FF8413606060A8FFCAAE133B
%5F603B8AFFFF7D3C3B605F606060A8FFA8A8A7FFA7FFFFFFA7CAA8FD1FFF
%A8FD09FFA8FD0CFFA959847D7D537D5959525952532E53282E2752272E28
%5253FD08FF593B3B603BAFCACAA81913603B605FFFCA8313605F603B603B
%AFFFFFA8A8A1CFA1FFFFFF7D7D84FD1DFFA8FD0BFFA8FD09FFA859275227
%2E272E2852285228522852285227282752275227A8FD08FF833B666060A8
%FFCAA819FD0560FFFF833B60605F666060A8FFFFFFA8CAA8FFA8FF597DA8
%FD1EFFA8A8FD09FFA8FD0BFF53272752272E27532E532E532E532E532E52
%2E532E532E59FD08FFCA59605F6060A8A7CF833B5F605F6059FFA8A83560
%3B603B603BAFFD04FFA8CAA1592784FD20FF7DFD0AFFA8A8FFA8FD08FFA8
%4BFD15767DFD08FFA1A8AFA8A7AEA7CAA8AF3B605F666084A7CAA8665F84
%8AA8A8AFFD04FF847E522E52FD1FFFA8FD067DFD07FF7D7D7DA8A8FFA8FD
%05FFCAC9FD15C3FD06FF7EA8A87DA8FFA1A7A1A7A1CA84603B5F356084A1
%A1A883AF7DFFA87D7D7D2E2E0528052859FD20FFA87D7D277D7DA8FD08FF
%7D7DA8FFA8A8FD06FFAFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD06FFA82E282E2852527D76A176A0768383A776A17DA776A17CA17D7C76
%52052E282E2852282853FD23FF7D7DA8FD0BFF7D7DA8FFA8FD22FF522828
%28052E285228FD04527D7D76527D52522E52282E272E0628272E28282752
%28FD24FF7D52A8FD0CFF52527DA8FD22FFA827524B522752275227522752
%2752282E272E282E2752285227524C524B524B5227A8FD24FF527D7DFD08
%FF7D27527D7D525252FD23FF5227522752275227522752275227524B5227
%524B5227522752275227522752272EA8FD23FF7D7D527DFD06FFA87D2752
%272727522752FD23FF7D2E282E285A595A2F5A595A535A595A595A595A59
%5A5959595A595A592F282853FD24FF7D7DA87DFD04FFA852527D52275227
%FD0452FD24FF284C27524CFD0B52285252522E5252522E525252275227A8
%FD24FFA8FFFFA8A8FFFFA8275227FFA85227522752275259FD24FF76754B
%754B754B754B754B754B754B754B754B754B754B754B754B754B76A8FD1D
%FFA8FD05FFA852527D52FFFFFFA8272752A8FFFD075260FD25FF7DA1767D
%767D767D767D767D767D767D767D767D767D767D767D767C7DFD1DFFA8A8
%FD05FFA82727F852A8FFA8A8FD0A52275235FD60FFA8FD05FFA827275252
%A8A2A87DFD0C525384A8FD06FFA87E7DFD4EFFA8FFA8CFA8FFA85952AEA8
%AEA8A8272D2752A8A87DA8FD0C522E5227A8FFA87DA87DA8A8FD4EFFA858
%52585258525852585258525852585258527C525852585258525852585258
%527D5853525252A8A8FD24FFA8A8A8FD22FF7D537D53597DFD05FF2DFD0A
%272D272D2752272D275227512752275127522751275252582E52287DFD04
%FFA8A87D532E5352532E5352532E532E7EFD12FFA8A8A8FD22FF2E2E282E
%272E7EA884A9845952585258525852585258525252585252525852525258
%52525258525252585259525352527DA97D592E53282E282E282E282E282E
%282E057DFD13FFA8A8A8FD22FF52052E2828052E0528052E282E282E282E
%282E282E282E282E282E282E282E282E282E282E282E282E282E282E282E
%282E05280528052E2828052E2828052E272E0559FD14FFA8A8A8FD22FF52
%5228524C5228524C5228524C5228524C5228524C5228524C5228524C5228
%524C5228524C5228524C5228524C5228524C5228524C5228524C5228524C
%522852287DFD15FF7DA87DA8A8FD20FFCABCC39AC3BCC39AC3BCC39AC3BC
%C39AC3BCC39AC3BCC39AC3BCC39AC3BCC39AC3BCC39AC3BCC39AC3BCC39A
%C3BCC39AC3BCC39AC3BCC39AC3BCC39AC3BCC39AC3FD15FFA852275227FD
%77FFA8FD0427A8FD76FFA8FD04527DA1AF848A7D7D7DA7C8C8A0A17D7D59
%595F8B8484608A7DA17DC9C8C9CFFD5AFF527D52A87DA17D3B133420274A
%C09E994B5105050535353B353513524B7598C199FD43FFA8FD17FF7D527D
%FD04A83B3C34522875C0C67576752E050C356035603560527675C2C1C2CF
%FD41FFA8FFFFAFFD15FF27527D7D525252603535272E51C09E9F4B76270C
%05353560353B35764B769FC19FFD43FFA8FF84FD0BFFA87EA884A87DAFFF
%FFA85252A87D52277D9AC3760C0552BCC276532E7B9E9FA0A19A522E5252
%53525F355FFD04FFA8A884A8A8A884FD37FFA8FFFF8584FD0AFF532E2852
%282E2EFFFFFF527D527D527DA1BC9376050B27BC9477282F75C09EC1949A
%4B272752282F353535FFFFA82E52282E282E28A8FD08FFCAFD2FFFA8FF60
%85A8FD09FFA8285352532E527DFFFFFD06A8CA9ABC760C0552BCBC762F2E
%9FC0C6BBBC9A5227522E532E3C3560FFFF2E5252532E532EAFFD08FFCAC3
%CAFD08FFAF84AFFD22FF84AFAF8B84AFFD09FF845228522E522852A1A87D
%A17DA17DA1A19A9A762E52529B9A775277769F99A09A9A76765277527D59
%5959CA532E2E522E522784FD0AFFA1BCCAFD05FFA86160853661A8CAA8CA
%A1C3A1C3A0C39AC29AC3A0C3A1CACAFD0EFF3C84AF848584FD0AFF2E522E
%53525252FD0C76A17676767D769A76777677767D767676A1769A769A769A
%76FD045253287DFD0CFFA1BCCAFFFFFF613D3CAF606077A09ABC99BC9AC2
%9AC3C3CAC3FD04CAFFCACAC3C9C3CAFD0AFF14AF858B8485A9FD09FF5928
%5228522E52272E282E272E282E272E282E272E282E272E282E272E282E27
%2E282E272E282E272E282E28522E522752FD0EFF9ABCA1A8537D7DA17DA1
%A0C3A1CAC9CACAFFFD04CAC9CAA1C39A9A769A76766F9A76FD09FF841484
%8560858485A8FD08FFA85228522E5228522E5228522E5228522E5228522E
%5228522E5228522E5228522E5228522E5228522E5228522E522752A8FD0C
%FFCFCACAC3C3C3FD04CAFFCACFFD04CAA1C39A9A767652524B524C524C76
%769A9ABCA1FD0AFF6114AF858B858B84AFFD09FF7D76527C5276527C5276
%527C5276527C5276527C5276527C5276527C5276527C5276527C5276527C
%5276527C52767DFD0BFFA8FFCACACAFFFFFFA8C3A0A0769A76764B522728
%052E272827525276769A9ABC9ABC939AA1FD0AFFAF143684858485848584
%FD0BFFCFC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CFC9CAC9CF
%C9CAC9CFC9CAC9CFC9CAC9CAC9CAC9CACAFD0BFFC3C39AC39AA1A87D7DFF
%4C52282E282E282E28525276769A9ABC9ABC9ABC949A949A93C3CAFD0BFF
%84361485858B848B848BAFFD0CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8CFA8CAA8CFA8CAA8FD09FFA8A1
%70764B524B5252FF7DA8A8764B76769A6F9A9A9A939A939A939A93946F9A
%939A93BC9ACAFD0CFFA86014146085608584AFA8AFFD3EFFCA9AA19A9A9A
%BC9A9A9AC39A9A93BC939A939A939A939A939A939A939A99BC9AC2A0CACA
%FD0EFFAF3636148585AF85AFAFAFA9FD40FFCFFFCACAA8CAA1CAA1CAA1CA
%A1CAA1C9A1C3A1C3A1C9A1C3A1C9A1CAA8FFCFFD11FF603C143684AFA9AF
%A8AF848584FD6EFFAF61363636AFA9AFAFAF848B848BAFFD6DFF85363613
%60A9AF8485848584AFA8AFFD6DFF6061143660AF84AFA9AFA9FFAFAF84FD
%08FFA1A1CAFD19FFCBFD47FF843C36361385A9AFA8AFA9AF84AF848584FD
%06FFCAC36FC3C3A7A6A8A8FFCAFD06FFA8A8FD05FFA8CAA1C9A09F75FD15
%FFA7FD30FF853661141484FFAFAFA9AF858B848B8485AFFD04FFCAC3C376
%75C3A09F749F7B9F75A0A0A6A0A175A07CA69FA0759F9F9F759F74A1FD16
%FFA0FD2EFFAF3660361414AFA8AF848560858485608560AFFD04FFCAC3FF
%A1759AC376A09FA07BA09FA09FA076A09F9F9FA09FA075A07BA07576FD08
%FFA7C9A8FD0DFFA1FD11FFA8A7A0FD19FF853D3C3D143C85AF858B848B85
%8B858B858B84FD04FFC3CAFFFF4AA1C275757C757C75A0757676A075A075
%A0757675A0FD0475A1FD08FF9F98C199A0A1CAA8FFAFFD07FFA1FD0BFFA8
%A8A1A098C098C1FD10FFAFFFA9AFAFFFFFFFAF613660363C368484AFA8AF
%8485848484AF8484A8FFFFFFCAC3FFFFA1C3C275A075A075A075A076A075
%A075A075A075A075A0757575FD09FFA098FD04C098C19FA0A0A7A1A7A1CA
%A7A7A0CAA7A8A1A7A1A79F9F9FC198FD05C0C2FD0FFF843535602F59A9FF
%FFFF85FF85616061605A355A355A2F5A35597EA87DFD05FFCABCC3C39A6F
%FD0475A0757675A0757C757C7575757CFD04754AA1FD09FFCF989898C098
%C0BAC0BAC098C098C098C098C099C098C098C0BAC0BAC0C0C098C0989898
%CFFD0FFF600C35352E06353C603C603560353C353C13350C35353512352E
%35343584FD06FFCAFFA7756F7575A075A076A075A075A075A075A0757675
%A06E7CFD0CFFC9C9A0C89FC1C1C1C0C1C0C1C0C1C0C0C0C19FC1C0C1C0C1
%C0C1C0C19EC1C1C19FCFFD0EFF595935352E352E352E352E3512352E352E
%352E352E352E2E34353535123B35FD0AFFA8A77676757675754A754B754A
%756F754AFD0475A1FD16FFCAFFCFFFCACFC9CFC9CFA0CFFFFFCFFFCAFFFF
%FFCFFD12FF350C350C35123B131913191319131913131319131913191319
%13191919138AFD0DFFA87C7CCAA7A7A1A8A1A7A1A7A1A7A7CAA8FD23FFA1
%FD1BFF605F355F595F595F5F5F355F5F5F355F5F8359835F5F5983598359
%83595FAEFD0CFFA77575A8FD31FFCFA0CAA8FD0EFFCAA1FD0AFFCFA8CAA7
%C9A1C9A1C9C3C9C3C9A1C9C3C9C3C9C3C9C3C9A1C9A1CACAFD0DFF7676A1
%FD33FFCA9FC9FD0DFFCA9AC2C3FD13FFCFFFCAFFAEFFCAFD18FFA1A1A8FD
%33FFCFA1A0A7FD0CFFA19A9AC3CAFD69FFCAA7CAFD0BFFCA84AFA1FD6AFF
%A8A075CFFD0AFFFD04A1CAFD4EFFCFFD1BFFCACFFD0BFFCAA0C3C3FD4EFF
%CAA7FD28FFAFFFA8FD50FFA0FD29FFA8CACAFD4EFF527C7DFD13FFA8A8A8
%FD11FFA19A9AC3CAFD0FFFA8A8A8FD05FFA8CAA7CFFD1AFFA1FD16FF7D52
%A152A8FD26FFC399C3BCFD0EFFCAA7CFA8CFA7CAC3C9A7CAA8FFA8A8CFFD
%17FFA820CAFD15FF7D52FF52A8FD12FFA8A8A8FD11FFA1C39AC3CAFD0CFF
%A8A1FFFFFFCAC3BCC2BCC3C3FFFFFFA8A1CAFD17FF76AFFD16FF52277DFD
%14FFA8FD13FFAFFFA8FD0DFFA7FFFFFFA8FFFD05C3CAA8FFFFFFA8CAFD10
%FFA17DFFFFFFA7C99FC2A7FFFFFF7DA1FD0DFFA8A8FFA852A8FFA8A8FD0E
%FFFD07A8FD0FFFA8CAA8CAA8FD0BFFA8A8FFFFA8FFA8CAC3CAC3C3A8FFA8
%FFFFFFA1FD10FF7D4BA8CFC2C89FA098C0C0CFA84B7DFD0DFF2752527D52
%7D525252FD0DFFA8CAA8AFAEFFA8A8A8FD0DFFCAC29AC3BCC9FD0CFFA8FF
%AFFD0BFFA8FFFFCAFD11FFA1A0C19F4B514B4B4A98BA99A8FD0EFF52277D
%52527DA8527DFD0CFFA1FF846035838AAFA8A8A8FD0CFFC393BCBCC2BCFD
%0CFFA8A8CAA8FD09FFA8FFA8FFA7FD12FFC1A04BA8FF7DA8A82775C0FD13
%FF52FD0FFFA8FF60603C6059AF8A8BA8A8A8FD0BFFC3C3A0C3C3C3FD0CFF
%A8C9C2CACAFD09FFC3C3A1FD12FFC29F4B767DFF4BCA7D512798C1FD0DFF
%A8FFFFFFA852A8FFFFFFA8FD09FFA8A8843C7D8435598A8B848BA8A8A8FD
%0BFFA8FFA8FFA8FD0CFFCA9AC3C3FD09FFCAC3BCA0A8FD11FFC875A1FF76
%4B754B76FFA16EC0FD0CFF52A8FD04FF52FD04FF7D7DFD08FFCAA8663C66
%A17D59AF8BAF8AAFA8FD0BFFCACFA8FFCACACAFD0BFFCAC3C3CAFD0AFFC3
%C3BCFD0FFF7D7DCAC15176A85198C09F51A8764B98A77DA1FD08FFA82727
%FFFFFFA852A8FFFFA85252A8FD07FFA8AF356035839A525FFD0484A8A8FD
%09FFA8C29ABCBCC3BCCAFD0BFFCA9AC3C3FD09FFCAC3C2C2A8FD0EFF5176
%A0C84B76767598C19F767C7C4BC0A0764BFD08FF7D27527DFFFFFF52FFFF
%FF5252527DFD07FFA8845935592E522859598459AFA8FD0AFFCA99BC9AC3
%BCC3C3FD0BFFA8C3BCCACAFD08FFCAC3C3A1FD12FF9F757DFF524A746F51
%FF7D4A98FD0BFFA87D52FFA8FFA852A8FFA8FF527DA8FD07FFA8A83B603C
%60352F2F8B848B84A8A8FD09FFA8C29AC3BCC3BCC3FD0BFFA8A8C3A8FD09
%FFA8CAA1CAA7FD11FFC999767D7C7D527D7D7D7674C7FD0CFF7D52FD04FF
%52FD04FF52A8FD08FFA8A8663C603C607D605AAF8BAFA8FD0BFFA8FFA8FF
%A8FFA8FD0BFFA8FFA8FD0BFFA8FFFFCAFD11FFC9C85127A7FF76FFA84B4A
%C0C9FD0DFF277DFFFFA852A8FFFF7D52FD09FFA8A8843C3C6035848B6060
%AFA8A8FD0AFF5252527DFD04527DFD09FFA8CAFFFFA8FFA8CACACFCACAA8
%FFA8A8FFFFA1FD12FF9FC87552527676524AC098FD0EFFA8277DFFFF52FF
%FF7D52FD0BFFA8CA84603C6059AF8AAFA8A8FD0BFFA8527D527D527D52FD
%0BFFA7FFFFFFA8FFC9C3C3C9C3CAA8FFFFFFCACAFD10FFA84BA1C8C19975
%6E7474BAC1A14BA8FD0DFFA827FD0652A8FD0CFFA8A88484598484AFA8A8
%A8FD0BFF7D7D527D527D527DA8FD0AFFA7A8FFFFFFA8C3BCC3BCC3C3FD04
%FFA7A8FD10FF7676FFFFCAC9C2C8C0C8C9FFFF7676FD0FFF7D52527DA8FD
%0FFFA8CAA8AFA8FFA8A8A8FD0CFFA8527D527D527D7DFD0BFFCAA8CFFFFF
%FFA7C3BCC3A0CACAFFFFA8A8FD18FF76FD17FF7D27A8FD11FFA8FFA8A8A8
%FD0EFFA8FD08277DFD0BFFA8A8A7A8A1CAAFFFCAFFA8A8A1A8A8FD18FFA8
%4BA8FD17FF7DFD26FFFD087DA8FD33FF4BCAFD6BFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2015-09-08T16:45:19+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-09-08T16:45:19+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-09-08T16:45:18+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAbgBuAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAbgAAAAEA&#xA;AQBuAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FVk88FvE008ixRJ&#xA;u0jsFUfMnbFBNIKHzH5encRwapaSyHoiTxMfuDYeE9zEZInqEwwM0t8yavLo2hXuqx2xvDZRmZrd&#xA;W4FkXdzyo32Vq3TtkoizTDJPhiT3MLh/OOGSXRQ2kvHBrCsRMZgRGyGrrTh8VEZW+mmWeDz35OMN&#xA;Xy25p15I8+p5mnv7aSwbT7rT5GikieQSVZDxfcKtOJIGRnj4W3Dn47FVTLMrb3Yq7FXYq7FXYq7F&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:5b43086a-8950-49a1-be3a-145637bd1549</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:5b43086a-8950-49a1-be3a-145637bd1549</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:29e41d4f-d23e-814e-8f5f-d012afaf9e2d</stRef:instanceID>
            <stRef:documentID>xmp.did:1702f678-fd26-46dc-bcb6-30552fd3fe77</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1702f678-fd26-46dc-bcb6-30552fd3fe77</stEvt:instanceID>
                  <stEvt:when>2015-09-07T16:44:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5b43086a-8950-49a1-be3a-145637bd1549</stEvt:instanceID>
                  <stEvt:when>2015-09-08T16:45:19+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -428.035 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 428.035 li
416.076 428.035 li
416.076 0 li
cp
clp
373.957 317.899 mo
373.952 317.899 li
373.359 317.896 372.882 317.414 372.884 316.823 cv
373.228 238.864 li
373.23 238.275 373.71 237.799 374.299 237.799 cv
374.303 237.799 li
374.896 237.801 375.372 238.282 375.369 238.875 cv
375.026 316.831 li
375.023 317.423 374.544 317.899 373.957 317.899 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.698039 .698039 .698039 rgb
f
403.983 318.26 mo
403.846 314.88 li
403.809 313.973 403.043 313.268 402.136 313.304 cv
359.38 315.04 li
359.073 315.053 358.835 315.311 358.848 315.616 cv
358.938 317.848 li
358.722 317.729 358.475 317.664 358.213 317.674 cv
339.687 318.435 li
337.16 316.07 334.01 314.063 331.699 313.697 cv
319.353 314.158 li
318.141 314.158 316.885 315.559 316.885 316.403 cv
317.15 321.495 li
341.499 321.495 li
341.499 320.604 li
359.021 319.885 li
359.029 320.086 li
403.983 318.26 li
cp
.301961 .74902 .85098 rgb
f
374.052 259.135 mo
374.045 253.381 li
372.597 257.022 li
370.197 263.048 li
349.42 315.245 li
366.129 313.42 li
374.127 312.547 li
374.052 259.135 li
f
374.052 259.135 mo
374.045 253.381 li
372.597 257.022 li
370.197 263.048 li
361.206 313.959 li
374.127 312.547 li
374.052 259.135 li
.0823529 .627451 .788235 rgb
f
370.025 311.548 mo
381.955 240.377 li
416.073 312.346 li
370.025 311.548 li
.584314 .847059 .913725 rgb
f
370.025 311.548 mo
372.099 299.165 li
372.101 299.165 li
370.025 311.548 li
.541176 .815686 .894118 rgb
f
370.025 311.548 mo
370.025 311.548 li
372.101 299.165 li
405.327 289.68 li
407.828 294.955 li
370.025 311.548 li
.792157 .92549 .956863 rgb
f
372.377 297.507 mo
374.031 287.646 li
372.379 297.506 li
372.377 297.507 li
.541176 .815686 .894118 rgb
f
372.379 297.506 mo
374.031 287.646 li
374.127 287.073 li
399.013 276.362 li
402.477 283.668 li
372.379 297.506 li
.792157 .92549 .956863 rgb
f
322.241 320.602 mo
319.239 320.694 li
319.077 316.061 li
322.08 315.969 li
322.241 320.602 li
cp
.203922 .286275 .368627 rgb
f
339.542 320.071 mo
330.124 320.36 li
329.962 315.726 li
332.965 315.635 li
332.965 315.635 335.02 316.685 336.264 317.467 cv
337.508 318.247 339.542 320.071 339.542 320.071 cv
cp
f
326.279 320.479 mo
324.21 320.541 li
324.049 315.907 li
326.118 315.844 li
326.279 320.479 li
cp
f
310.23 321.771 mo
309.534 328.188 li
311.277 333.454 360.505 335.319 372.706 334.717 cv
393.873 333.671 407.726 334.462 411.153 330.061 cv
411.899 329.102 416.076 317.526 416.076 317.526 cv
310.23 321.771 li
cp
.105882 .737255 .607843 rgb
f
313.514 330.413 mo
324.834 334.059 363.348 335.18 372.706 334.717 cv
393.873 333.671 407.726 334.462 411.153 330.061 cv
313.514 330.413 li
cp
.976471 .701961 .603922 rgb
f
412.059 315.272 mo
411.557 315.289 li
411.641 317.734 li
412.142 317.719 li
412.059 315.272 li
cp
.203922 .286275 .368627 rgb
f
393.964 315.975 mo
393.461 315.992 li
393.546 318.438 li
394.047 318.421 li
393.964 315.975 li
cp
f
403.448 315.596 mo
402.947 315.613 li
403.031 318.06 li
403.532 318.043 li
403.448 315.596 li
cp
f
384.65 316.403 mo
384.148 316.422 li
384.232 318.866 li
384.734 318.849 li
384.65 316.403 li
cp
f
376.089 316.728 mo
375.588 316.744 li
375.671 319.191 li
376.173 319.174 li
376.089 316.728 li
cp
f
414.868 314.158 mo
374.763 315.807 li
374.805 316.827 li
414.91 315.178 li
414.868 314.158 li
cp
f
414.735 321.187 mo
309.885 324.944 li
310.046 323.452 li
415.292 319.673 li
414.735 321.187 li
cp
f
314.322 326.768 mo
312.527 326.84 li
312.249 326.851 312.012 326.632 312 326.354 cv
311.992 326.106 li
311.981 325.828 312.199 325.592 312.477 325.58 cv
314.271 325.509 li
314.549 325.497 314.785 325.716 314.796 325.994 cv
314.806 326.242 li
314.818 326.521 314.598 326.756 314.322 326.768 cv
cp
f
319.21 326.601 mo
317.417 326.671 li
317.139 326.683 316.901 326.465 316.892 326.187 cv
316.881 325.938 li
316.87 325.66 317.089 325.423 317.367 325.412 cv
319.16 325.341 li
319.438 325.329 319.675 325.549 319.686 325.827 cv
319.697 326.074 li
319.707 326.353 319.489 326.589 319.21 326.601 cv
cp
f
324.679 326.439 mo
322.885 326.51 li
322.608 326.521 322.371 326.303 322.361 326.025 cv
322.35 325.777 li
322.338 325.499 322.558 325.262 322.835 325.25 cv
324.628 325.18 li
324.907 325.168 325.143 325.387 325.155 325.666 cv
325.166 325.913 li
325.176 326.191 324.958 326.428 324.679 326.439 cv
cp
f
363.292 325.042 mo
361.5 325.113 li
361.221 325.124 360.984 324.905 360.972 324.626 cv
360.963 324.381 li
360.953 324.103 361.171 323.865 361.45 323.854 cv
363.243 323.782 li
363.521 323.771 363.756 323.99 363.768 324.27 cv
363.779 324.517 li
363.789 324.793 363.57 325.031 363.292 325.042 cv
cp
f
368.182 324.875 mo
366.389 324.945 li
366.111 324.957 365.875 324.739 365.864 324.461 cv
365.853 324.212 li
365.841 323.934 366.061 323.698 366.338 323.687 cv
368.131 323.615 li
368.41 323.604 368.646 323.822 368.658 324.101 cv
368.668 324.348 li
368.679 324.626 368.46 324.863 368.182 324.875 cv
cp
f
373.651 324.712 mo
371.857 324.784 li
371.579 324.795 371.343 324.576 371.332 324.298 cv
371.322 324.051 li
371.311 323.772 371.53 323.535 371.808 323.525 cv
373.6 323.452 li
373.878 323.442 374.115 323.661 374.126 323.939 cv
374.137 324.186 li
374.148 324.464 373.928 324.702 373.651 324.712 cv
cp
f
379.389 324.545 mo
377.597 324.617 li
377.319 324.629 377.083 324.409 377.071 324.131 cv
377.06 323.884 li
377.048 323.605 377.268 323.369 377.546 323.357 cv
379.34 323.287 li
379.619 323.275 379.854 323.493 379.866 323.771 cv
379.875 324.02 li
379.886 324.298 379.667 324.533 379.389 324.545 cv
cp
f
384.28 324.378 mo
382.486 324.449 li
382.208 324.461 381.972 324.241 381.96 323.964 cv
381.95 323.716 li
381.94 323.438 382.159 323.201 382.436 323.189 cv
384.229 323.118 li
384.507 323.107 384.744 323.326 384.755 323.604 cv
384.766 323.852 li
384.776 324.13 384.557 324.366 384.28 324.378 cv
cp
f
389.748 324.217 mo
387.955 324.288 li
387.676 324.299 387.441 324.08 387.429 323.802 cv
387.418 323.555 li
387.409 323.276 387.627 323.04 387.904 323.028 cv
389.698 322.957 li
389.976 322.945 390.212 323.164 390.224 323.442 cv
390.234 323.69 li
390.245 323.969 390.026 324.205 389.748 324.217 cv
cp
f
368.32 134.178 mo
368.578 133.564 368.274 133.062 367.646 133.062 cv
338.72 133.062 li
338.093 133.062 337.58 133.612 337.58 134.285 cv
337.58 156.912 li
337.58 157.585 338.091 158.089 338.716 158.034 cv
378.583 154.466 li
379.209 154.41 379.72 153.813 379.72 153.141 cv
379.72 151.839 li
379.72 151.167 379.23 150.453 378.63 150.253 cv
372.683 148.271 li
372.084 148.071 371.105 147.736 370.508 147.526 cv
364.808 145.523 li
364.211 145.313 363.934 144.64 364.192 144.026 cv
368.32 134.178 li
.737255 .737255 .737255 rgb
f
344.706 144.335 mo
344.39 144.335 li
341.953 144.335 339.96 142.342 339.96 139.905 cv
339.96 139.588 li
339.96 137.152 341.953 135.159 344.39 135.159 cv
344.706 135.159 li
347.142 135.159 349.136 137.152 349.136 139.588 cv
349.136 139.905 li
349.136 142.342 347.142 144.335 344.706 144.335 cv
.258824 .258824 .258824 rgb
f
362.221 143.277 mo
361.986 143.859 361.279 144.335 360.651 144.335 cv
352.072 144.335 li
351.445 144.335 350.931 143.821 350.931 143.193 cv
350.931 136.3 li
350.931 135.672 351.445 135.159 352.072 135.159 cv
364.375 135.159 li
365.002 135.159 365.324 135.635 365.087 136.217 cv
362.221 143.277 li
f
359.19 135.159 mo
356.854 135.159 li
356.861 135.141 li
359.197 135.141 li
359.19 135.159 li
.788235 .788235 .788235 rgb
f
355.517 144.335 mo
353.181 144.335 li
356.854 135.159 li
359.19 135.159 li
355.517 144.335 li
.407843 .407843 .407843 rgb
f
343.9 144.308 mo
343.9 144.308 343.877 144.306 343.838 144.3 cv
343.859 144.303 343.879 144.305 343.9 144.308 cv
343.9 144.308 li
347.242 135.962 mo
347.112 135.871 346.977 135.786 346.838 135.709 cv
347.1 135.853 347.242 135.961 347.242 135.961 cv
347.242 135.961 li
346.657 135.614 mo
346.486 135.53 346.31 135.456 346.128 135.394 cv
346.169 135.407 346.368 135.471 346.657 135.614 cv
.788235 .788235 .788235 rgb
f
343.9 144.308 mo
343.879 144.305 343.859 144.303 343.838 144.3 cv
343.732 144.286 343.503 144.252 343.265 144.189 cv
342.939 144.104 342.678 143.989 342.678 143.989 cv
346.12 135.392 li
346.12 135.392 346.122 135.392 346.128 135.394 cv
346.31 135.456 346.486 135.53 346.657 135.614 cv
346.671 135.621 346.686 135.629 346.701 135.636 cv
346.75 135.661 346.796 135.686 346.838 135.709 cv
346.977 135.786 347.112 135.871 347.242 135.962 cv
343.9 144.308 li
.407843 .407843 .407843 rgb
f
368.447 131.418 mo
337.58 131.418 li
337.58 134.785 li
368.447 134.785 li
368.447 131.418 li
cp
.913725 .498039 .00784314 rgb
f
368.447 130.477 mo
337.58 130.477 li
337.58 131.451 li
368.447 131.451 li
368.447 130.477 li
cp
1 .580392 .160784 rgb
f
386.226 139.747 mo
336.037 139.747 li
335.778 139.747 335.566 139.958 335.566 140.217 cv
335.566 140.475 335.778 140.687 336.037 140.687 cv
336.87 140.687 li
336.87 156.828 li
338.139 156.828 li
338.139 140.687 li
352.771 140.687 li
352.771 155.397 li
354.041 155.397 li
354.041 140.687 li
368.673 140.687 li
368.673 153.966 li
369.944 153.966 li
369.944 140.687 li
384.576 140.687 li
384.576 152.535 li
385.845 152.535 li
385.845 140.687 li
386.226 140.687 li
386.484 140.687 386.696 140.475 386.696 140.217 cv
386.696 139.958 386.484 139.747 386.226 139.747 cv
cp
.4 .4 .4 rgb
f
330.101 158.444 mo
330.046 158.726 330.05 159.029 330.129 159.344 cv
332.074 167.104 li
332.378 168.322 333.656 169.319 334.912 169.319 cv
405.554 169.319 li
406.81 169.319 408.23 168.37 408.709 167.209 cv
414.982 152.033 li
415.102 151.743 415.152 151.473 415.141 151.23 cv
330.101 158.444 li
cp
.333333 .384314 .439216 rgb
f
413.58 150.113 mo
331.849 156.939 li
330.921 157.017 330.257 157.634 330.101 158.444 cv
415.141 151.23 li
415.108 150.502 414.518 150.035 413.58 150.113 cv
cp
.380392 .47451 .556863 rgb
f
345.587 127.317 mo
342.643 127.317 li
342.643 117.153 li
343.105 117.153 li
343.105 115.114 li
341.718 115.114 li
341.718 117.153 li
342.18 117.153 li
342.18 117.555 li
340.843 117.555 li
340.843 117.696 li
342.18 117.696 li
342.18 122.649 li
340.843 122.649 li
340.843 122.791 li
342.18 122.791 li
342.18 127.317 li
340.766 127.317 li
339.497 130.477 li
347.287 130.477 li
345.587 127.317 li
cp
.737255 .737255 .737255 rgb
f
341.215 122.791 mo
333.036 122.791 li
333.036 117.555 li
341.215 117.555 li
341.215 117.555 339.96 118.36 339.96 120.173 cv
339.96 121.985 341.215 122.791 341.215 122.791 cv
cp
.305882 .803922 .768627 rgb
f
331.799 166.009 mo
332.214 167.664 li
332.214 167.664 333.202 169.319 334.912 169.319 cv
405.554 169.319 li
407.342 169.319 408.521 167.664 408.521 167.664 cv
409.205 166.009 li
331.799 166.009 li
cp
1 .517647 .486275 rgb
f
335.566 163.089 mo
334.523 163.089 333.675 162.243 333.675 161.198 cv
333.675 160.154 334.523 159.307 335.566 159.307 cv
336.611 159.307 337.458 160.154 337.458 161.198 cv
337.458 162.243 336.611 163.089 335.566 163.089 cv
cp
335.566 158.038 mo
333.822 158.038 332.406 159.453 332.406 161.198 cv
332.406 162.944 333.822 164.359 335.566 164.359 cv
337.312 164.359 338.727 162.944 338.727 161.198 cv
338.727 159.453 337.312 158.038 335.566 158.038 cv
cp
.258824 .258824 .258824 rgb
f
342.658 162.544 mo
341.613 162.544 340.766 161.697 340.766 160.653 cv
340.766 159.609 341.613 158.762 342.658 158.762 cv
343.702 158.762 344.548 159.609 344.548 160.653 cv
344.548 161.697 343.702 162.544 342.658 162.544 cv
cp
342.658 157.493 mo
340.912 157.493 339.497 158.908 339.497 160.653 cv
339.497 162.398 340.912 163.813 342.658 163.813 cv
344.403 163.813 345.818 162.398 345.818 160.653 cv
345.818 158.908 344.403 157.493 342.658 157.493 cv
cp
f
349.652 162.178 mo
348.608 162.178 347.761 161.332 347.761 160.287 cv
347.761 159.243 348.608 158.396 349.652 158.396 cv
350.697 158.396 351.543 159.243 351.543 160.287 cv
351.543 161.332 350.697 162.178 349.652 162.178 cv
cp
349.652 157.127 mo
347.907 157.127 346.492 158.542 346.492 160.287 cv
346.492 162.033 347.907 163.448 349.652 163.448 cv
351.398 163.448 352.813 162.033 352.813 160.287 cv
352.813 158.542 351.398 157.127 349.652 157.127 cv
cp
f
387.737 159.384 mo
386.692 159.384 385.845 158.537 385.845 157.493 cv
385.845 156.448 386.692 155.602 387.737 155.602 cv
388.781 155.602 389.627 156.448 389.627 157.493 cv
389.627 158.537 388.781 159.384 387.737 159.384 cv
cp
387.737 154.332 mo
385.991 154.332 384.576 155.747 384.576 157.493 cv
384.576 159.238 385.991 160.653 387.737 160.653 cv
389.482 160.653 390.897 159.238 390.897 157.493 cv
390.897 155.747 389.482 154.332 387.737 154.332 cv
cp
f
394.645 159.018 mo
393.6 159.018 392.753 158.171 392.753 157.127 cv
392.753 156.083 393.6 155.236 394.645 155.236 cv
395.689 155.236 396.536 156.083 396.536 157.127 cv
396.536 158.171 395.689 159.018 394.645 159.018 cv
cp
394.645 153.966 mo
392.899 153.966 391.484 155.381 391.484 157.127 cv
391.484 158.872 392.899 160.287 394.645 160.287 cv
396.39 160.287 397.805 158.872 397.805 157.127 cv
397.805 155.381 396.39 153.966 394.645 153.966 cv
cp
f
401.585 158.352 mo
400.541 158.352 399.694 157.505 399.694 156.46 cv
399.694 155.416 400.541 154.569 401.585 154.569 cv
402.629 154.569 403.476 155.416 403.476 156.46 cv
403.476 157.505 402.629 158.352 401.585 158.352 cv
cp
401.585 153.3 mo
399.839 153.3 398.424 154.715 398.424 156.46 cv
398.424 158.206 399.839 159.621 401.585 159.621 cv
403.331 159.621 404.746 158.206 404.746 156.46 cv
404.746 154.715 403.331 153.3 401.585 153.3 cv
cp
f
141.8 309.112 mo
140.729 311.415 140.579 316.747 143.177 319.646 cv
144.442 321.058 146.822 322.001 149.799 322.271 cv
158.477 323.06 186.345 324.446 201.849 324.446 cv
217.87 324.446 243.622 323.893 254.434 323.173 cv
256.461 323.039 259.271 322.639 261.01 320.798 cv
263.545 318.115 264.242 311.297 263.259 309.112 cv
263.259 309.112 240.338 317.465 202.379 317.465 cv
158.628 317.465 141.8 309.112 141.8 309.112 cv
cp
1 .6 0 rgb
f
141.8 309.112 mo
140.729 311.415 140.579 316.747 143.177 319.646 cv
144.442 321.058 146.822 322.001 149.799 322.271 cv
158.477 323.06 186.345 324.446 201.849 324.446 cv
201.849 324.446 165.171 323.194 153.053 319.271 cv
143.038 316.03 141.8 309.112 141.8 309.112 cv
cp
.819608 .466667 0 rgb
f
201.849 324.446 mo
217.87 324.446 243.622 323.893 254.434 323.173 cv
256.461 323.039 259.271 322.639 261.01 320.798 cv
263.545 318.115 264.242 311.297 263.259 309.112 cv
263.259 309.112 260.586 315.814 249.164 319.405 cv
237.744 322.999 201.849 324.446 201.849 324.446 cv
cp
.886275 .505882 0 rgb
f
202.379 318.035 mo
161.341 318.035 141.669 309.96 141.475 309.881 cv
141.917 308.827 li
142.109 308.908 161.604 316.895 202.379 316.895 cv
213.324 316.895 229.97 316.152 247.135 312.62 cv
257.385 310.513 263.007 308.384 263.063 308.361 cv
263.471 309.429 li
263.247 309.516 240.516 318.035 202.379 318.035 cv
cp
.576471 .376471 .215686 rgb
f
232.779 349.338 mo
235.546 346.57 li
236.082 346.034 236.082 345.167 235.546 344.632 cv
225.598 334.684 li
225.456 334.542 225.285 334.435 225.098 334.365 cv
220.747 332.781 li
220.534 332.704 220.322 332.683 220.124 332.704 cv
188.612 301.191 li
188.276 300.857 187.734 300.857 187.4 301.191 cv
187.065 301.526 187.065 302.067 187.4 302.403 cv
218.915 333.916 li
218.89 334.114 218.913 334.325 218.991 334.538 cv
220.574 338.889 li
220.643 339.077 220.75 339.248 220.893 339.39 cv
230.84 349.338 li
231.376 349.873 232.243 349.873 232.779 349.338 cv
.792157 .619608 .403922 rgb
f
gsave
235.213 344.299 mo
231.281 340.366 li
231.289 340.366 li
235.222 344.299 li
235.213 344.299 li
clp
231.281 340.366 mo
235.222 340.366 li
235.222 344.299 li
231.281 344.299 li
cp
1 1 1 rgb
f
grestore
225.924 344.421 mo
221.993 340.489 li
231.281 340.366 li
235.213 344.299 li
225.924 344.421 li
.898039 .811765 .701961 rgb
f
130.718 364.732 mo
130.718 362.942 132.173 361.488 133.962 361.488 cv
135.75 361.488 137.206 362.942 137.206 364.732 cv
137.206 366.521 135.75 367.977 133.962 367.977 cv
132.173 367.977 130.718 366.521 130.718 364.732 cv
154.464 396.715 mo
159.557 398.535 li
152.838 386.897 li
146.119 398.535 li
151.182 396.726 li
150.837 405.362 144.112 412.382 135.601 413.188 cv
135.601 379.147 li
141.913 379.147 li
142.524 380.42 143.82 381.299 145.324 381.299 cv
147.416 381.299 149.112 379.603 149.112 377.511 cv
149.112 375.419 147.416 373.724 145.324 373.724 cv
143.819 373.724 142.524 374.603 141.913 375.874 cv
135.601 375.874 li
135.601 371.043 li
138.404 370.314 140.482 367.762 140.482 364.732 cv
140.482 361.138 137.557 358.213 133.962 358.213 cv
130.367 358.213 127.442 361.138 127.442 364.732 cv
127.442 367.762 129.519 370.314 132.324 371.044 cv
132.324 375.874 li
126.01 375.874 li
125.399 374.603 124.102 373.724 122.598 373.724 cv
120.507 373.724 118.813 375.419 118.813 377.511 cv
118.813 379.603 120.507 381.299 122.598 381.299 cv
124.102 381.299 125.398 380.42 126.01 379.147 cv
132.324 379.147 li
132.324 413.188 li
123.811 412.382 117.085 405.362 116.741 396.726 cv
121.804 398.535 li
115.085 386.897 li
108.366 398.535 li
113.46 396.715 li
113.77 406.135 120.462 413.968 129.341 416.018 cv
133.962 424.022 li
138.583 416.018 li
147.461 413.968 154.153 406.135 154.464 396.715 cv
.258824 .258824 .258824 rgb
f
152.838 386.897 mo
146.119 398.535 li
151.182 396.726 li
150.837 405.362 144.112 412.382 135.601 413.188 cv
135.601 379.147 li
141.913 379.147 li
142.524 380.42 143.82 381.299 145.324 381.299 cv
147.416 381.299 149.112 379.603 149.112 377.511 cv
149.112 375.419 147.416 373.724 145.324 373.724 cv
143.82 373.724 142.524 374.603 141.913 375.874 cv
135.601 375.874 li
135.601 371.043 li
138.404 370.314 140.482 367.762 140.482 364.732 cv
140.482 361.167 137.604 358.265 134.051 358.216 cv
134.051 361.499 li
135.797 361.546 137.206 362.974 137.206 364.732 cv
137.206 366.489 135.797 367.917 134.051 367.966 cv
134.051 423.868 li
138.583 416.018 li
147.461 413.968 154.153 406.135 154.464 396.714 cv
159.557 398.535 li
152.838 386.897 li
.427451 .427451 .427451 rgb
f
132.791 358.661 mo
135.131 359.563 li
135.131 358.924 li
132.791 358.022 li
132.791 358.661 li
.792157 .619608 .403922 rgb
f
132.791 357.436 mo
135.131 358.337 li
135.131 357.698 li
132.791 356.796 li
132.791 357.436 li
f
132.791 359.888 mo
135.131 360.789 li
135.131 360.149 li
132.791 359.249 li
132.791 359.888 li
f
132.791 354.982 mo
135.131 355.885 li
135.131 355.245 li
132.791 354.346 li
132.791 354.982 li
f
132.791 363.357 mo
132.814 363.589 li
134.653 364.297 li
134.826 364.17 134.963 363.997 135.044 363.795 cv
132.791 362.927 li
132.791 363.357 li
f
132.791 362.341 mo
135.131 363.241 li
135.131 362.603 li
132.791 361.701 li
132.791 362.341 li
f
132.791 361.114 mo
135.131 362.016 li
135.131 361.376 li
132.791 360.475 li
132.791 361.114 li
f
132.791 356.21 mo
135.131 357.11 li
135.131 356.473 li
132.791 355.57 li
132.791 356.21 li
f
132.972 351.37 mo
135.131 352.201 li
135.131 351.987 li
135.131 351.822 135.097 351.668 135.035 351.524 cv
133.477 350.925 li
133.268 351.022 133.092 351.176 132.972 351.37 cv
f
132.791 351.987 mo
132.791 352.53 li
135.131 353.432 li
135.131 352.787 li
132.801 351.892 li
132.791 351.987 li
f
132.791 353.757 mo
135.131 354.659 li
135.131 354.019 li
132.791 353.119 li
132.791 353.757 li
f
132.791 353.119 mo
135.131 354.019 li
135.131 353.432 li
132.791 352.53 li
132.791 353.119 li
.678431 .45098 .203922 rgb
f
132.791 354.346 mo
135.131 355.245 li
135.131 354.659 li
132.791 353.757 li
132.791 354.346 li
f
133.961 350.818 mo
133.788 350.818 133.625 350.858 133.477 350.925 cv
135.035 351.524 li
134.856 351.108 134.442 350.818 133.961 350.818 cv
f
132.801 351.892 mo
135.131 352.787 li
135.131 352.201 li
132.972 351.37 li
132.876 351.522 132.817 351.7 132.801 351.892 cv
f
132.791 355.57 mo
135.131 356.473 li
135.131 355.885 li
132.791 354.982 li
132.791 355.57 li
f
132.791 356.796 mo
135.131 357.698 li
135.131 357.11 li
132.791 356.21 li
132.791 356.796 li
f
132.791 358.022 mo
135.131 358.924 li
135.131 358.337 li
132.791 357.436 li
132.791 358.022 li
f
132.791 359.249 mo
135.131 360.149 li
135.131 359.563 li
132.791 358.661 li
132.791 359.249 li
f
132.791 360.475 mo
135.131 361.376 li
135.131 360.789 li
132.791 359.888 li
132.791 360.475 li
f
132.791 361.701 mo
135.131 362.603 li
135.131 362.016 li
132.791 361.114 li
132.791 361.701 li
f
132.791 362.927 mo
135.044 363.795 li
135.1 363.661 135.131 363.514 135.131 363.357 cv
135.131 363.241 li
132.791 362.341 li
132.791 362.927 li
f
133.961 364.527 mo
134.221 364.527 134.458 364.44 134.653 364.297 cv
132.814 363.589 li
132.922 364.125 133.394 364.527 133.961 364.527 cv
f
135.131 359.563 mo
134.051 359.147 li
133.961 359.112 li
133.961 358.473 li
135.131 358.924 li
135.131 359.563 li
.854902 .733333 .584314 rgb
f
135.131 358.337 mo
135.052 358.307 li
133.961 357.886 li
133.961 357.247 li
135.131 357.698 li
135.131 358.32 li
135.131 358.337 li
f
135.131 360.789 mo
134.051 360.373 li
133.961 360.338 li
133.961 359.699 li
135.131 360.149 li
135.131 360.789 li
f
135.131 355.885 mo
133.961 355.434 li
133.961 354.795 li
135.131 355.245 li
135.131 355.885 li
f
134.653 364.297 mo
133.961 364.03 li
133.961 363.378 li
135.044 363.795 li
134.963 363.997 134.826 364.17 134.653 364.297 cv
f
135.131 363.241 mo
133.961 362.791 li
133.961 362.152 li
135.131 362.603 li
135.131 363.241 li
f
135.131 362.016 mo
133.961 361.565 li
133.961 360.925 li
135.131 361.376 li
135.131 361.715 li
135.131 362.016 li
f
135.131 357.11 mo
133.961 356.66 li
133.961 356.021 li
135.131 356.473 li
135.131 357.11 li
f
135.131 352.201 mo
133.961 351.751 li
133.961 351.111 li
135.035 351.524 li
135.035 351.524 li
135.097 351.668 135.131 351.822 135.131 351.987 cv
135.131 352.201 li
f
135.131 353.432 mo
133.961 352.981 li
133.961 352.337 li
135.131 352.787 li
135.131 353.432 li
f
135.131 354.659 mo
133.961 354.208 li
133.961 353.569 li
135.131 354.019 li
135.131 354.659 li
f
135.131 354.019 mo
135.131 354.019 li
133.961 353.569 li
133.961 352.981 li
135.131 353.432 li
135.131 354.019 li
.776471 .615686 .443137 rgb
f
135.131 355.245 mo
135.131 355.245 li
133.961 354.795 li
133.961 354.208 li
135.131 354.659 li
135.131 355.245 li
f
135.035 351.524 mo
133.961 351.111 li
133.961 350.818 li
134.442 350.818 134.856 351.108 135.035 351.524 cv
f
135.131 352.787 mo
135.131 352.787 li
133.961 352.337 li
133.961 351.751 li
135.131 352.201 li
135.131 352.787 li
f
135.131 356.473 mo
135.131 356.473 li
133.961 356.021 li
133.961 355.434 li
135.131 355.885 li
135.131 356.473 li
f
135.131 357.698 mo
135.131 357.698 li
133.961 357.247 li
133.961 356.66 li
135.131 357.11 li
135.131 357.698 li
f
135.131 358.924 mo
135.131 358.924 li
133.961 358.473 li
133.961 357.886 li
135.052 358.307 li
135.131 358.337 li
135.131 358.924 li
f
135.131 360.149 mo
135.131 360.149 li
133.961 359.699 li
133.961 359.112 li
134.051 359.147 li
135.131 359.563 li
135.131 360.149 li
f
135.131 361.376 mo
135.131 361.376 li
133.961 360.925 li
133.961 360.338 li
134.051 360.373 li
135.131 360.789 li
135.131 361.376 li
f
135.131 362.603 mo
135.131 362.603 li
133.961 362.152 li
133.961 361.565 li
135.131 362.016 li
135.131 362.603 li
f
135.044 363.795 mo
135.044 363.795 li
133.961 363.378 li
133.961 362.791 li
135.131 363.241 li
135.131 363.357 li
135.131 363.514 135.1 363.661 135.044 363.795 cv
f
133.961 364.527 mo
133.961 364.03 li
134.653 364.297 li
134.458 364.44 134.221 364.527 133.961 364.527 cv
f
49.3135 362.284 mo
47.8457 362.284 46.8013 363.189 46.9922 364.295 cv
47.1993 365.722 47.4067 367.147 47.6143 368.574 cv
47.7183 369.177 47.9926 369.717 48.3408 370.087 cv
48.3408 374.775 li
48.3408 375.253 48.7309 375.643 49.208 375.643 cv
49.419 375.643 li
49.896 375.643 50.2862 375.253 50.2862 374.775 cv
50.2862 370.087 li
50.6343 369.717 50.9087 369.177 51.0127 368.574 cv
51.2197 367.147 51.4272 365.722 51.6348 364.295 cv
51.8256 363.189 50.7812 362.284 49.3135 362.284 cv
.4 .247059 .188235 rgb
f
73.3008 372.653 mo
72.2632 371.615 70.8848 371.517 70.2378 372.434 cv
69.376 373.589 68.5137 374.744 67.6514 375.899 cv
67.2993 376.398 67.1113 376.975 67.0962 377.482 cv
63.7803 380.798 li
63.4434 381.135 63.4434 381.688 63.7803 382.024 cv
63.9297 382.174 li
64.2671 382.511 64.8188 382.511 65.1558 382.174 cv
68.4717 378.857 li
68.979 378.843 69.5557 378.654 70.0547 378.303 cv
71.21 377.44 72.3652 376.578 73.5205 375.716 cv
74.4375 375.069 74.3389 373.691 73.3008 372.653 cv
cp
f
25.2695 372.653 mo
24.2314 373.69 24.1328 375.069 25.0493 375.716 cv
26.2051 376.578 27.3603 377.44 28.5156 378.303 cv
29.0147 378.654 29.5913 378.843 30.0986 378.857 cv
33.4141 382.174 li
33.7515 382.511 34.3033 382.511 34.6406 382.174 cv
34.7901 382.024 li
35.1269 381.688 35.1269 381.135 34.7901 380.798 cv
31.4742 377.482 li
31.459 376.975 31.271 376.398 30.9189 375.899 cv
30.0566 374.744 29.1944 373.589 28.332 372.434 cv
27.6855 371.517 26.3071 371.615 25.2695 372.653 cv
f
49.3418 428.035 mo
47.874 428.035 46.8296 427.131 47.0205 426.025 cv
47.2281 424.599 47.4351 423.172 47.6426 421.745 cv
47.7466 421.143 48.021 420.602 48.3692 420.233 cv
48.3692 415.544 li
48.3692 415.067 48.7593 414.677 49.2364 414.677 cv
49.4472 414.677 li
49.9243 414.677 50.3144 415.067 50.3144 415.544 cv
50.3144 420.233 li
50.6626 420.602 50.937 421.143 51.041 421.745 cv
51.2485 423.172 51.4555 424.599 51.6631 426.025 cv
51.854 427.131 50.8096 428.035 49.3418 428.035 cv
f
16.4521 395.174 mo
16.4521 396.642 17.3569 397.686 18.4624 397.495 cv
19.8892 397.288 21.3154 397.08 22.7422 396.873 cv
23.3443 396.769 23.8848 396.495 24.2544 396.146 cv
28.9434 396.146 li
29.4205 396.146 29.8105 395.757 29.8105 395.279 cv
29.8105 395.068 li
29.8105 394.592 29.4205 394.201 28.9434 394.201 cv
24.2544 394.201 li
23.8848 393.853 23.3443 393.579 22.7422 393.475 cv
21.3154 393.268 19.8892 393.061 18.4624 392.853 cv
17.3569 392.662 16.4521 393.706 16.4521 395.174 cv
f
82.2031 395.146 mo
82.2031 396.613 81.2983 397.658 80.1929 397.467 cv
78.7661 397.26 77.3394 397.053 75.9131 396.845 cv
75.311 396.741 74.77 396.467 74.4009 396.118 cv
69.7119 396.118 li
69.2349 396.118 68.8447 395.729 68.8447 395.251 cv
68.8447 395.04 li
68.8447 394.563 69.2349 394.173 69.7119 394.173 cv
74.4009 394.173 li
74.77 393.825 75.311 393.551 75.9131 393.446 cv
77.3394 393.239 78.7661 393.032 80.1929 392.824 cv
81.2983 392.634 82.2031 393.678 82.2031 395.146 cv
cp
f
73.3291 417.666 mo
72.2915 418.704 70.9131 418.804 70.2666 417.887 cv
69.4043 416.73 68.542 415.575 67.6797 414.42 cv
67.3276 413.921 67.1396 413.345 67.1245 412.837 cv
63.8086 409.521 li
63.4717 409.185 63.4717 408.633 63.8086 408.295 cv
63.958 408.146 li
64.2949 407.809 64.8472 407.809 65.1841 408.146 cv
68.5 411.462 li
69.0073 411.477 69.584 411.665 70.083 412.017 cv
71.2383 412.879 72.3936 413.741 73.5488 414.604 cv
74.4658 415.25 74.3672 416.629 73.3291 417.666 cv
cp
f
25.2978 417.666 mo
24.2598 416.629 24.1611 415.25 25.0776 414.603 cv
26.2334 413.741 27.3887 412.879 28.5439 412.018 cv
29.0429 411.665 29.6197 411.477 30.1269 411.462 cv
33.4424 408.146 li
33.7798 407.809 34.3315 407.809 34.669 408.146 cv
34.8183 408.295 li
35.1552 408.633 35.1552 409.185 34.8183 409.521 cv
31.5025 412.838 li
31.4874 413.345 31.2989 413.921 30.9473 414.42 cv
30.0849 415.575 29.2226 416.73 28.3604 417.887 cv
27.7139 418.804 26.3355 418.704 25.2978 417.666 cv
f
49.3277 413.338 mo
39.2886 413.338 31.1499 405.199 31.1499 395.16 cv
31.1499 385.12 39.2886 376.982 49.3277 376.982 cv
59.3667 376.982 67.5054 385.12 67.5054 395.16 cv
67.5054 405.199 59.3667 413.338 49.3277 413.338 cv
49.3277 372.489 mo
36.8071 372.489 26.6567 382.639 26.6567 395.16 cv
26.6567 407.681 36.8071 417.83 49.3277 417.83 cv
61.8482 417.83 71.998 407.681 71.998 395.16 cv
71.998 382.639 61.8482 372.489 49.3277 372.489 cv
.913725 .498039 .00784314 rgb
f
60.4077 404.623 mo
55.9615 400.177 li
56.75 399.137 57.2989 397.905 57.5273 396.564 cv
63.8345 396.564 li
63.541 399.626 62.2993 402.41 60.4077 404.623 cv
50.5982 409.677 mo
50.5982 403.382 li
51.9253 403.178 53.1479 402.659 54.1904 401.906 cv
58.6479 406.364 li
56.4267 408.214 53.6465 409.413 50.5982 409.677 cv
50.5982 380.644 mo
53.7294 380.914 56.5762 382.174 58.8267 384.11 cv
54.3818 388.555 li
53.2988 387.725 52.0074 387.154 50.5982 386.939 cv
50.5982 380.644 li
63.8603 394.089 mo
57.5762 394.089 li
57.397 392.701 56.877 391.422 56.1015 390.336 cv
60.5624 385.875 li
62.4355 388.139 63.6342 390.979 63.8603 394.089 cv
48.123 386.93 mo
46.7046 387.136 45.4024 387.698 44.3106 388.525 cv
39.8642 384.079 li
42.1245 382.146 44.9819 380.895 48.123 380.638 cv
48.123 386.93 li
48.123 409.682 mo
45.0654 409.431 42.2739 408.241 40.0424 406.395 cv
44.5034 401.934 li
45.5547 402.685 46.7866 403.196 48.123 403.39 cv
48.123 409.682 li
34.8212 396.564 mo
41.1298 396.564 li
41.3603 397.921 41.9194 399.166 42.7227 400.214 cv
38.2778 404.659 li
36.3692 402.44 35.1157 399.643 34.8212 396.564 cv
38.1235 385.84 mo
42.581 390.297 li
41.7905 391.392 41.2608 392.685 41.0805 394.089 cv
34.7959 394.089 li
35.0229 390.962 36.2334 388.109 38.1235 385.84 cv
49.3277 376.982 mo
39.2886 376.982 31.1499 385.12 31.1499 395.16 cv
31.1499 405.199 39.2886 413.338 49.3277 413.338 cv
59.3667 413.338 67.5054 405.199 67.5054 395.16 cv
67.5054 385.12 59.3667 376.982 49.3277 376.982 cv
.4 .247059 .188235 rgb
f
54.1264 395.174 mo
54.1264 397.816 51.9843 399.959 49.3418 399.959 cv
46.6992 399.959 44.5572 397.816 44.5572 395.174 cv
44.5572 392.531 46.6992 390.39 49.3418 390.39 cv
51.9843 390.39 54.1264 392.531 54.1264 395.174 cv
.913725 .498039 .00784314 rgb
f
49.3418 399.959 mo
49.3418 390.39 li
51.9843 390.39 54.1264 392.531 54.1264 395.174 cv
54.1264 397.816 51.9843 399.959 49.3418 399.959 cv
.941176 .65098 .305882 rgb
f
49.3418 372.489 mo
49.3372 372.489 49.3322 372.489 49.3277 372.489 cv
49.3418 372.489 li
.580392 .47451 .435294 rgb
f
49.3418 417.83 mo
49.3277 417.83 li
49.0067 417.83 48.6869 417.823 48.3692 417.81 cv
48.3692 417.81 li
48.6869 417.823 49.0067 417.83 49.3277 417.83 cv
49.3322 417.83 49.3372 417.83 49.3418 417.83 cv
49.3418 417.83 li
f
49.3277 417.83 mo
49.0067 417.83 48.6869 417.823 48.3692 417.81 cv
42.4529 417.564 37.1225 415.051 33.2235 411.117 cv
32.7664 410.655 32.3294 410.175 31.913 409.676 cv
28.6316 405.744 26.6567 400.682 26.6567 395.16 cv
26.6567 382.639 36.8071 372.489 49.3277 372.489 cv
49.3277 372.489 li
49.3322 372.489 49.3372 372.489 49.3418 372.489 cv
49.3418 376.982 li
49.3277 376.982 li
49.3277 376.982 li
39.2886 376.982 31.1499 385.12 31.1499 395.16 cv
31.1499 395.16 li
31.1499 395.16 li
31.1499 395.16 li
31.1499 395.16 li
31.1499 405.199 39.2886 413.338 49.3277 413.338 cv
49.3277 413.338 li
49.3326 413.338 49.3369 413.338 49.3418 413.338 cv
49.3418 417.83 li
49.3372 417.83 49.3322 417.83 49.3277 417.83 cv
.941176 .65098 .305882 rgb
f
49.3277 413.338 mo
49.3418 413.337 li
49.3418 413.338 li
49.3369 413.338 49.3326 413.338 49.3277 413.338 cv
31.1499 395.16 mo
31.1499 395.16 li
31.1499 395.16 li
31.1499 385.12 39.2886 376.982 49.3277 376.982 cv
49.3277 376.982 li
39.2886 376.982 31.1499 385.12 31.1499 395.16 cv
.580392 .47451 .435294 rgb
f
208.002 375.581 mo
196.905 375.581 187.908 384.577 187.908 395.675 cv
187.908 406.773 196.905 415.77 208.002 415.77 cv
219.1 415.77 228.096 406.773 228.096 395.675 cv
228.096 384.577 219.1 375.581 208.002 375.581 cv
cp
.305882 .803922 .768627 rgb
f
208.002 375.581 mo
208.002 415.77 li
219.1 415.77 228.096 406.773 228.096 395.675 cv
228.096 384.577 219.1 375.581 208.002 375.581 cv
cp
.635294 .94902 .905882 rgb
f
208.002 415.77 mo
196.905 415.77 187.908 406.773 187.908 395.675 cv
187.908 384.577 196.905 375.581 208.002 375.581 cv
219.1 375.581 228.096 384.577 228.096 395.675 cv
228.096 406.773 219.1 415.77 208.002 415.77 cv
cp
208.002 370.542 mo
194.122 370.542 182.869 381.795 182.869 395.675 cv
182.869 409.556 194.122 420.809 208.002 420.809 cv
221.883 420.809 233.135 409.556 233.135 395.675 cv
233.135 381.795 221.883 370.542 208.002 370.542 cv
cp
.737255 .737255 .737255 rgb
f
208.002 376.629 mo
197.5 376.629 188.956 385.173 188.956 395.675 cv
188.956 406.178 197.5 414.722 208.002 414.722 cv
218.504 414.722 227.049 406.178 227.049 395.675 cv
227.049 385.173 218.504 376.629 208.002 376.629 cv
cp
208.002 416.817 mo
196.345 416.817 186.86 407.333 186.86 395.675 cv
186.86 384.018 196.345 374.533 208.002 374.533 cv
219.661 374.533 229.145 384.018 229.145 395.675 cv
229.145 407.333 219.661 416.817 208.002 416.817 cv
cp
208.002 371.59 mo
194.721 371.59 183.917 382.395 183.917 395.675 cv
183.917 408.956 194.721 419.761 208.002 419.761 cv
221.284 419.761 232.088 408.956 232.088 395.675 cv
232.088 382.395 221.284 371.59 208.002 371.59 cv
cp
208.002 421.856 mo
193.566 421.856 181.821 410.111 181.821 395.675 cv
181.821 381.239 193.566 369.494 208.002 369.494 cv
222.438 369.494 234.184 381.239 234.184 395.675 cv
234.184 410.111 222.438 421.856 208.002 421.856 cv
cp
.913725 .913725 .913725 rgb
f
209.475 397.384 mo
208.002 406.321 li
208.002 395.675 li
206.45 397.228 li
206.293 397.147 li
197.357 395.675 li
208.002 395.675 li
206.45 394.123 li
206.53 393.967 li
208.002 385.029 li
208.002 395.675 li
209.555 394.123 li
209.711 394.202 li
218.649 395.675 li
208.002 395.675 li
209.555 397.228 li
209.475 397.384 li
cp
220.456 395.392 mo
210.006 393.671 li
208.285 383.221 li
208.262 383.083 208.143 382.981 208.002 382.981 cv
207.862 382.981 207.743 383.083 207.719 383.221 cv
205.999 393.671 li
195.548 395.392 li
195.41 395.416 195.308 395.534 195.308 395.675 cv
195.308 395.815 195.41 395.935 195.548 395.958 cv
205.999 397.68 li
207.719 408.129 li
207.743 408.268 207.862 408.369 208.002 408.369 cv
208.143 408.369 208.262 408.268 208.285 408.129 cv
210.006 397.68 li
220.456 395.958 li
220.595 395.935 220.696 395.815 220.696 395.675 cv
220.696 395.534 220.595 395.416 220.456 395.392 cv
cp
.341176 .341176 .337255 rgb
f
206.862 382.154 mo
206.862 379.095 li
207.469 379.095 li
208.895 381.388 li
208.895 379.095 li
209.393 379.095 li
209.393 382.154 li
208.807 382.154 li
207.36 379.809 li
207.36 382.154 li
206.862 382.154 li
cp
.258824 .258824 .258824 rgb
f
206.897 409.929 mo
206.897 409.776 206.932 409.648 207.002 409.544 cv
207.073 409.44 207.164 409.355 207.276 409.289 cv
207.387 409.223 207.51 409.175 207.648 409.146 cv
207.784 409.116 207.918 409.103 208.049 409.103 cv
208.144 409.103 208.239 409.111 208.334 409.13 cv
208.43 409.149 208.523 409.177 208.614 409.215 cv
208.869 409.351 li
209.081 409.538 li
208.741 409.841 li
208.638 409.739 208.527 409.668 208.405 409.627 cv
208.282 409.588 208.149 409.568 208.001 409.568 cv
207.797 409.586 li
207.606 409.643 li
207.462 409.749 li
207.408 409.911 li
207.436 410.093 li
207.52 410.208 li
207.65 410.286 li
207.817 410.348 li
207.958 410.395 208.1 410.434 208.244 410.464 cv
208.388 410.495 208.529 410.544 208.666 410.611 cv
208.819 410.685 208.942 410.781 209.034 410.901 cv
209.125 411.022 209.172 411.18 209.172 411.373 cv
209.172 411.54 209.137 411.681 209.067 411.795 cv
208.997 411.909 208.905 412.003 208.793 412.073 cv
208.682 412.144 208.557 412.192 208.417 412.222 cv
208.278 412.252 208.137 412.267 207.997 412.267 cv
207.875 412.267 207.752 412.252 207.631 412.225 cv
207.512 412.197 207.397 412.155 207.291 412.1 cv
207.184 412.044 207.086 411.975 206.999 411.892 cv
206.91 411.81 206.836 411.713 206.778 411.602 cv
207.188 411.386 li
207.272 411.519 207.383 411.621 207.52 411.694 cv
207.657 411.768 207.817 411.805 208.001 411.805 cv
208.246 411.782 li
208.461 411.712 li
208.616 411.581 li
208.674 411.386 li
208.643 411.217 li
208.556 411.104 li
208.424 411.029 li
208.266 410.972 li
208.122 410.923 207.977 410.882 207.833 410.849 cv
207.687 410.816 207.545 410.767 207.408 410.7 cv
207.198 410.578 li
207.038 410.425 li
206.934 410.216 li
206.91 410.136 206.897 410.04 206.897 409.929 cv
cp
f
223.899 397.254 mo
221.663 397.254 li
221.663 394.195 li
223.911 394.195 li
223.766 394.657 li
222.155 394.657 li
222.155 395.401 li
223.622 395.401 li
223.622 395.867 li
222.155 395.867 li
222.155 396.792 li
223.899 396.792 li
223.899 397.254 li
cp
f
193.233 394.552 mo
193.823 396.453 li
194.439 394.143 li
194.918 394.273 li
194.126 397.254 li
193.55 397.254 li
192.982 395.432 li
192.912 394.992 li
192.841 395.432 li
192.273 397.254 li
191.697 397.254 li
190.905 394.273 li
191.385 394.143 li
192.001 396.457 li
192.59 394.552 li
193.233 394.552 li
cp
f
206.058 396.177 mo
197.319 382.991 li
208.788 393.888 li
206.058 396.177 li
cp
1 .517647 .486275 rgb
f
207.194 397.487 mo
218.663 408.384 li
209.922 395.197 li
207.194 397.487 li
cp
.105882 .368627 .607843 rgb
f
209.649 394.288 mo
210.415 395.201 210.295 396.561 209.383 397.326 cv
208.471 398.092 207.111 397.973 206.346 397.061 cv
205.581 396.148 205.7 394.788 206.612 394.022 cv
207.524 393.258 208.883 393.377 209.649 394.288 cv
cp
.164706 .211765 .231373 rgb
f
208.002 366.96 mo
205.877 366.96 204.155 365.237 204.155 363.112 cv
204.155 360.987 205.877 359.265 208.002 359.265 cv
210.127 359.265 211.85 360.987 211.85 363.112 cv
211.85 365.237 210.127 366.96 208.002 366.96 cv
cp
212.666 363.112 mo
212.666 360.537 210.578 358.45 208.002 358.45 cv
205.428 358.45 203.339 360.537 203.339 363.112 cv
203.339 365.048 204.52 366.708 206.2 367.413 cv
206.2 369.654 li
209.75 369.654 li
209.75 367.434 li
211.459 366.742 212.666 365.068 212.666 363.112 cv
cp
.737255 .737255 .737255 rgb
f
343.424 361.488 mo
339.833 361.488 336.65 362.777 334.379 365.174 cv
332.01 367.674 330.89 371.114 331.308 374.612 cv
331.632 377.334 331.984 378.891 332.293 380.264 cv
332.811 382.561 333.22 384.375 333.22 390.153 cv
333.22 394.83 332.708 396.578 332.212 398.268 cv
331.727 399.927 331.267 401.494 331.311 405.854 cv
331.364 411.121 332.421 414.53 334.641 416.581 cv
336.734 418.518 339.932 419.313 344.422 419.001 cv
349.319 418.667 350.513 418.189 351.567 417.768 cv
352.816 417.268 353.894 416.836 360.104 416.836 cv
367.613 416.836 369.34 417.381 371.342 418.012 cv
372.413 418.35 373.52 418.698 375.672 419.005 cv
378.019 419.338 380.81 418.276 383.331 416.089 cv
386.575 413.274 388.753 409.163 388.753 405.858 cv
388.753 403.038 388.422 401.814 388.003 400.264 cv
387.502 398.412 386.879 396.106 386.655 390.17 cv
386.415 383.849 387.178 381.688 387.852 379.78 cv
388.334 378.41 388.753 377.227 388.753 374.664 cv
388.753 371.522 387.075 367.932 384.375 365.295 cv
381.81 362.789 378.699 361.452 375.622 361.522 cv
372.331 361.6 370.792 361.994 369.164 362.41 cv
367.195 362.913 365.159 363.434 359.982 363.434 cv
354.807 363.434 353.272 363.036 351.495 362.574 cv
350.065 362.203 348.444 361.784 344.424 361.521 cv
344.087 361.5 343.753 361.488 343.424 361.488 cv
376.573 419.931 mo
376.227 419.931 375.886 419.907 375.551 419.859 cv
373.328 419.543 372.134 419.167 371.082 418.835 cv
369.149 418.226 367.479 417.699 360.104 417.699 cv
354.06 417.699 353.054 418.102 351.887 418.569 cv
350.775 419.015 349.513 419.519 344.481 419.863 cv
339.737 420.184 336.331 419.32 334.054 417.215 cv
331.649 414.991 330.502 411.384 330.448 405.863 cv
330.403 401.374 330.903 399.672 331.384 398.025 cv
331.863 396.394 332.357 394.706 332.357 390.153 cv
332.357 384.472 331.958 382.698 331.452 380.453 cv
331.137 379.06 330.781 377.48 330.452 374.715 cv
330.003 370.961 331.207 367.267 333.753 364.58 cv
336.412 361.774 340.221 360.386 344.48 360.66 cv
348.582 360.927 350.245 361.358 351.711 361.739 cv
353.431 362.186 354.917 362.57 359.982 362.57 cv
365.05 362.57 367.033 362.063 368.95 361.573 cv
370.627 361.144 372.212 360.739 375.601 360.659 cv
378.916 360.595 382.245 362.008 384.978 364.677 cv
387.839 367.472 389.617 371.298 389.617 374.664 cv
389.617 377.375 389.155 378.684 388.666 380.067 cv
388.018 381.901 387.285 383.979 387.518 390.138 cv
387.739 395.976 388.347 398.228 388.836 400.038 cv
389.255 401.587 389.617 402.923 389.617 405.858 cv
389.617 409.454 387.372 413.726 383.896 416.74 cv
381.498 418.822 378.935 419.931 376.573 419.931 cv
.576471 .376471 .215686 rgb
f
359.908 407.076 mo
350.562 407.076 342.985 399.5 342.985 390.153 cv
342.985 380.807 350.562 373.23 359.908 373.23 cv
369.254 373.23 376.831 380.807 376.831 390.153 cv
376.831 399.5 369.254 407.076 359.908 407.076 cv
359.908 364.067 mo
345.501 364.067 333.822 375.746 333.822 390.153 cv
333.822 404.561 345.501 416.24 359.908 416.24 cv
374.315 416.24 385.995 404.561 385.995 390.153 cv
385.995 375.746 374.315 364.067 359.908 364.067 cv
.878431 .878431 .878431 rgb
f
359.908 373.23 mo
362.222 373.23 364.427 373.695 366.437 374.536 cv
369.972 366.08 li
366.875 364.784 363.475 364.067 359.908 364.067 cv
356.34 364.067 352.941 364.784 349.844 366.08 cv
353.379 374.536 li
355.388 373.695 357.593 373.23 359.908 373.23 cv
1 .517647 .486275 rgb
f
359.908 407.076 mo
357.588 407.076 355.378 406.609 353.366 405.766 cv
349.824 414.219 li
352.926 415.52 356.333 416.24 359.908 416.24 cv
363.483 416.24 366.889 415.52 369.992 414.219 cv
366.45 405.766 li
364.437 406.609 362.227 407.076 359.908 407.076 cv
f
342.985 390.153 mo
342.985 387.839 343.45 385.634 344.291 383.625 cv
335.834 380.09 li
334.539 383.187 333.822 386.586 333.822 390.153 cv
333.822 393.721 334.539 397.12 335.834 400.218 cv
344.291 396.682 li
343.45 394.673 342.985 392.468 342.985 390.153 cv
f
376.831 390.153 mo
376.831 392.473 376.364 394.683 375.52 396.695 cv
383.973 400.237 li
385.274 397.135 385.995 393.729 385.995 390.153 cv
385.995 386.578 385.274 383.172 383.973 380.069 cv
375.52 383.611 li
376.364 385.624 376.831 387.834 376.831 390.153 cv
f
gsave
351.523 410.163 mo
346.281 407.964 342.086 403.765 339.891 398.521 cv
344.29 396.682 li
346.191 401.225 350.017 404.763 354.749 406.275 cv
354.278 406.125 353.817 405.955 353.366 405.766 cv
351.523 410.163 li
368.292 410.163 mo
366.45 405.766 li
366.275 405.839 366.099 405.909 365.922 405.976 cv
370.479 404.244 374.093 400.599 375.785 396.023 cv
375.701 396.249 375.613 396.473 375.52 396.695 cv
379.917 398.538 li
377.72 403.774 373.528 407.966 368.292 410.163 cv
359.908 407.076 mo
359.899 407.076 359.889 407.076 359.88 407.076 cv
359.889 407.076 359.899 407.076 359.908 407.076 cv
359.908 407.076 mo
359.917 407.076 359.926 407.076 359.935 407.076 cv
359.926 407.076 359.917 407.076 359.908 407.076 cv
359.876 407.076 mo
359.869 407.076 359.861 407.076 359.853 407.076 cv
359.861 407.076 359.868 407.076 359.876 407.076 cv
359.94 407.076 mo
359.947 407.076 359.955 407.076 359.962 407.076 cv
359.955 407.076 359.947 407.076 359.94 407.076 cv
359.846 407.076 mo
359.83 407.076 359.815 407.076 359.799 407.076 cv
359.815 407.076 359.83 407.076 359.846 407.076 cv
359.97 407.076 mo
359.986 407.076 360.001 407.076 360.017 407.076 cv
360.001 407.076 359.985 407.076 359.97 407.076 cv
359.789 407.076 mo
359.783 407.076 359.777 407.076 359.771 407.076 cv
359.777 407.076 359.783 407.076 359.789 407.076 cv
360.027 407.076 mo
360.033 407.076 360.039 407.076 360.044 407.076 cv
360.039 407.076 360.033 407.076 360.027 407.076 cv
359.761 407.076 mo
359.756 407.076 359.75 407.076 359.745 407.075 cv
359.75 407.075 359.756 407.076 359.761 407.076 cv
360.059 407.076 mo
360.063 407.076 360.067 407.075 360.071 407.075 cv
360.067 407.075 360.063 407.076 360.059 407.076 cv
359.722 407.075 mo
359.72 407.075 359.719 407.075 359.717 407.075 cv
359.719 407.075 359.721 407.075 359.722 407.075 cv
360.097 407.075 mo
360.098 407.075 li
360.097 407.075 360.097 407.075 360.097 407.075 cv
359.695 407.075 mo
359.693 407.075 359.692 407.075 359.69 407.075 cv
359.691 407.075 359.694 407.075 359.695 407.075 cv
360.124 407.075 mo
360.125 407.075 li
360.125 407.075 360.124 407.075 360.124 407.075 cv
359.664 407.074 mo
359.664 407.074 359.664 407.074 359.663 407.074 cv
359.664 407.074 359.664 407.074 359.664 407.074 cv
359.638 407.074 mo
359.637 407.074 359.637 407.074 359.636 407.074 cv
359.637 407.074 359.637 407.074 359.638 407.074 cv
359.612 407.074 mo
359.611 407.074 359.61 407.074 359.609 407.074 cv
359.61 407.074 359.611 407.074 359.612 407.074 cv
359.582 407.073 mo
359.582 407.073 li
359.582 407.073 li
359.556 407.073 mo
359.556 407.073 359.555 407.073 359.555 407.073 cv
359.556 407.073 359.556 407.073 359.556 407.073 cv
359.53 407.072 mo
359.529 407.072 359.529 407.072 359.528 407.072 cv
359.529 407.072 359.529 407.072 359.53 407.072 cv
359.501 407.071 mo
359.501 407.071 359.501 407.071 359.501 407.071 cv
359.501 407.071 li
354.813 406.296 mo
354.812 406.296 354.812 406.296 354.812 406.296 cv
354.813 406.296 li
354.791 406.289 mo
354.788 406.288 354.787 406.287 354.784 406.287 cv
354.786 406.287 354.789 406.288 354.791 406.289 cv
354.77 406.282 mo
354.765 406.281 354.76 406.279 354.755 406.277 cv
354.76 406.279 354.765 406.28 354.77 406.282 cv
365.901 405.984 mo
365.904 405.983 365.907 405.982 365.911 405.981 cv
365.908 405.982 365.904 405.983 365.901 405.984 cv
342.99 390.559 mo
342.99 390.559 342.99 390.559 342.99 390.558 cv
342.99 390.559 342.99 390.559 342.99 390.559 cv
342.989 390.532 mo
342.989 390.532 342.989 390.532 342.989 390.532 cv
342.989 390.532 li
342.988 390.505 mo
342.988 390.504 342.988 390.503 342.988 390.502 cv
342.988 390.503 342.988 390.504 342.988 390.505 cv
342.988 390.478 mo
342.988 390.477 342.988 390.476 342.988 390.475 cv
342.988 390.476 342.988 390.477 342.988 390.478 cv
342.987 390.452 mo
342.987 390.449 342.987 390.447 342.987 390.445 cv
342.987 390.447 342.987 390.45 342.987 390.452 cv
342.987 390.425 mo
342.987 390.423 342.987 390.421 342.987 390.419 cv
342.987 390.421 342.987 390.423 342.987 390.425 cv
342.987 390.398 mo
342.987 390.395 342.987 390.393 342.986 390.39 cv
342.987 390.393 342.987 390.395 342.987 390.398 cv
342.986 390.371 mo
342.986 390.368 342.986 390.365 342.986 390.362 cv
342.986 390.365 342.986 390.368 342.986 390.371 cv
342.986 390.344 mo
342.986 390.341 342.986 390.338 342.986 390.335 cv
342.986 390.338 342.986 390.341 342.986 390.344 cv
342.986 390.316 mo
342.986 390.315 342.986 390.314 342.986 390.313 cv
342.986 390.314 342.986 390.315 342.986 390.316 cv
342.985 390.289 mo
342.985 390.287 342.985 390.284 342.985 390.282 cv
342.985 390.284 342.985 390.287 342.985 390.289 cv
342.985 390.262 mo
342.985 390.258 342.985 390.254 342.985 390.249 cv
342.985 390.254 342.985 390.258 342.985 390.262 cv
342.985 390.235 mo
342.985 390.229 342.985 390.223 342.985 390.217 cv
342.985 390.224 342.985 390.229 342.985 390.235 cv
342.985 390.208 mo
342.985 390.19 342.985 390.172 342.985 390.153 cv
342.985 390.172 342.985 390.19 342.985 390.208 cv
clp
339.891 390.153 mo
379.917 390.153 li
379.917 410.163 li
339.891 410.163 li
cp
.913725 .913725 .913725 rgb
f
grestore
342.985 390.153 mo
342.985 390.135 342.985 390.117 342.985 390.099 cv
342.985 390.117 342.985 390.135 342.985 390.153 cv
.913725 .913725 .913725 rgb
f
342.985 390.09 mo
342.985 390.084 342.985 390.078 342.985 390.072 cv
342.985 390.078 342.985 390.083 342.985 390.09 cv
f
342.985 390.058 mo
342.985 390.053 342.985 390.049 342.985 390.045 cv
342.985 390.049 342.985 390.053 342.985 390.058 cv
f
342.985 390.025 mo
342.985 390.023 342.985 390.02 342.985 390.018 cv
342.985 390.02 342.985 390.023 342.985 390.025 cv
f
342.986 389.995 mo
342.986 389.993 342.986 389.992 342.986 389.991 cv
342.986 389.992 342.986 389.994 342.986 389.995 cv
f
342.986 389.972 mo
342.986 389.969 342.986 389.966 342.986 389.963 cv
342.986 389.966 342.986 389.969 342.986 389.972 cv
f
342.986 389.945 mo
342.986 389.942 342.986 389.939 342.986 389.936 cv
342.986 389.939 342.986 389.942 342.986 389.945 cv
f
342.986 389.917 mo
342.987 389.914 342.987 389.912 342.987 389.909 cv
342.987 389.912 342.987 389.914 342.986 389.917 cv
f
342.987 389.888 mo
342.987 389.886 342.987 389.884 342.987 389.882 cv
342.987 389.884 342.987 389.886 342.987 389.888 cv
f
342.987 389.863 mo
342.987 389.86 342.987 389.857 342.987 389.855 cv
342.987 389.858 342.987 389.86 342.987 389.863 cv
f
342.988 389.833 mo
342.988 389.832 342.988 389.83 342.988 389.828 cv
342.988 389.83 342.988 389.832 342.988 389.833 cv
f
342.988 389.806 mo
342.988 389.804 342.988 389.803 342.988 389.801 cv
342.988 389.803 342.988 389.804 342.988 389.806 cv
f
342.989 389.777 mo
342.989 389.776 342.989 389.775 342.989 389.774 cv
342.989 389.775 342.989 389.776 342.989 389.777 cv
f
342.99 389.75 mo
342.99 389.749 342.99 389.748 342.99 389.747 cv
342.99 389.748 342.99 389.749 342.99 389.75 cv
f
342.99 389.721 mo
342.99 389.721 342.99 389.721 342.99 389.721 cv
342.99 389.721 342.99 389.72 342.99 389.721 cv
f
342.991 389.695 mo
342.991 389.694 342.991 389.694 342.991 389.694 cv
342.991 389.694 342.991 389.694 342.991 389.695 cv
f
375.812 384.358 mo
374.195 379.921 370.774 376.351 366.437 374.536 cv
368.276 370.137 li
373.519 372.332 377.718 376.528 379.917 381.769 cv
375.52 383.611 li
375.623 383.857 375.721 384.106 375.812 384.358 cv
344.29 383.625 mo
339.891 381.786 li
342.088 376.537 346.291 372.334 351.54 370.137 cv
353.379 374.536 li
349.283 376.25 346.004 379.529 344.29 383.625 cv
359.421 373.237 mo
359.421 373.237 359.422 373.237 359.422 373.237 cv
359.421 373.237 li
359.448 373.237 mo
359.448 373.237 359.449 373.237 359.449 373.237 cv
359.449 373.237 359.448 373.237 359.448 373.237 cv
359.502 373.235 mo
359.502 373.235 359.503 373.235 359.503 373.235 cv
359.503 373.235 359.502 373.235 359.502 373.235 cv
359.529 373.235 mo
359.529 373.235 359.529 373.235 359.529 373.235 cv
359.529 373.235 li
359.556 373.234 mo
359.557 373.234 359.557 373.234 359.558 373.234 cv
359.558 373.234 359.556 373.234 359.556 373.234 cv
359.583 373.234 mo
359.584 373.234 359.584 373.234 359.585 373.234 cv
359.585 373.234 359.583 373.234 359.583 373.234 cv
359.609 373.233 mo
359.612 373.233 359.614 373.233 359.617 373.233 cv
359.614 373.233 359.612 373.233 359.609 373.233 cv
360.206 373.233 mo
360.204 373.233 360.203 373.233 360.202 373.233 cv
360.203 373.233 360.204 373.233 360.206 373.233 cv
359.637 373.233 mo
359.638 373.233 359.64 373.233 359.642 373.233 cv
359.64 373.233 359.638 373.233 359.637 373.233 cv
360.179 373.233 mo
360.177 373.233 360.178 373.233 360.177 373.233 cv
360.177 373.233 360.178 373.233 360.179 373.233 cv
359.664 373.232 mo
359.666 373.232 359.668 373.232 359.67 373.232 cv
359.668 373.232 359.666 373.232 359.664 373.232 cv
360.152 373.232 mo
360.151 373.232 360.149 373.232 360.148 373.232 cv
360.149 373.232 360.15 373.232 360.152 373.232 cv
359.691 373.232 mo
359.693 373.232 359.696 373.232 359.698 373.232 cv
359.696 373.232 359.693 373.232 359.691 373.232 cv
360.125 373.232 mo
360.123 373.232 360.121 373.232 360.12 373.232 cv
360.121 373.232 360.123 373.232 360.125 373.232 cv
359.717 373.232 mo
359.721 373.232 359.724 373.231 359.728 373.231 cv
359.724 373.231 359.721 373.232 359.717 373.232 cv
360.098 373.232 mo
360.095 373.232 360.092 373.231 360.089 373.231 cv
360.092 373.231 360.095 373.232 360.098 373.232 cv
359.745 373.231 mo
359.747 373.231 359.749 373.231 359.75 373.231 cv
359.749 373.231 359.747 373.231 359.745 373.231 cv
360.07 373.231 mo
360.069 373.231 360.068 373.231 360.067 373.231 cv
360.068 373.231 360.069 373.231 360.07 373.231 cv
359.772 373.231 mo
359.775 373.231 359.778 373.231 359.781 373.231 cv
359.778 373.231 359.775 373.231 359.772 373.231 cv
360.043 373.231 mo
360.041 373.231 360.039 373.231 360.036 373.231 cv
360.039 373.231 360.041 373.231 360.043 373.231 cv
359.799 373.231 mo
359.804 373.231 359.808 373.231 359.813 373.231 cv
359.808 373.231 359.804 373.231 359.799 373.231 cv
360.016 373.231 mo
360.012 373.231 360.008 373.231 360.004 373.231 cv
360.008 373.231 360.012 373.231 360.016 373.231 cv
359.826 373.231 mo
359.832 373.231 359.838 373.231 359.844 373.231 cv
359.838 373.231 359.832 373.231 359.826 373.231 cv
359.989 373.231 mo
359.983 373.231 359.978 373.231 359.972 373.231 cv
359.978 373.231 359.984 373.231 359.989 373.231 cv
359.853 373.231 mo
359.871 373.231 359.889 373.23 359.908 373.23 cv
359.889 373.23 359.871 373.231 359.853 373.231 cv
359.962 373.231 mo
359.944 373.231 359.926 373.23 359.908 373.23 cv
359.926 373.23 359.944 373.231 359.962 373.231 cv
f
366.437 374.536 mo
364.515 373.731 362.411 373.271 360.206 373.233 cv
360.206 373.233 li
360.204 373.233 360.203 373.233 360.202 373.233 cv
360.202 373.233 li
360.194 373.233 360.186 373.233 360.179 373.233 cv
360.179 373.233 li
360.178 373.233 360.177 373.233 360.177 373.233 cv
360.177 373.233 li
360.169 373.232 360.16 373.232 360.152 373.232 cv
360.152 373.232 li
360.15 373.232 360.149 373.232 360.148 373.232 cv
360.148 373.232 li
360.14 373.232 360.133 373.232 360.125 373.232 cv
360.125 373.232 li
360.123 373.232 360.121 373.232 360.12 373.232 cv
360.12 373.232 li
360.112 373.232 360.105 373.232 360.098 373.232 cv
360.098 373.232 li
360.095 373.232 360.092 373.231 360.089 373.231 cv
360.089 373.231 li
360.083 373.231 360.077 373.231 360.07 373.231 cv
360.07 373.231 li
360.069 373.231 360.068 373.231 360.067 373.231 cv
360.067 373.231 li
360.059 373.231 360.051 373.231 360.043 373.231 cv
360.043 373.231 li
360.041 373.231 360.039 373.231 360.036 373.231 cv
360.036 373.231 li
360.03 373.231 360.023 373.231 360.016 373.231 cv
360.016 373.231 li
360.012 373.231 360.008 373.231 360.004 373.231 cv
360.004 373.231 li
359.999 373.231 359.994 373.231 359.989 373.231 cv
359.989 373.231 li
359.984 373.231 359.978 373.231 359.972 373.231 cv
359.972 373.231 li
359.969 373.231 359.965 373.231 359.962 373.231 cv
359.962 373.231 li
359.944 373.231 359.926 373.23 359.908 373.23 cv
359.908 373.23 li
359.908 373.23 li
359.889 373.23 359.871 373.231 359.853 373.231 cv
359.853 373.231 li
359.85 373.231 359.847 373.231 359.844 373.231 cv
359.844 373.231 li
359.838 373.231 359.832 373.231 359.826 373.231 cv
359.826 373.231 li
359.822 373.231 359.817 373.231 359.813 373.231 cv
359.813 373.231 li
359.808 373.231 359.804 373.231 359.799 373.231 cv
359.799 373.231 li
359.793 373.231 359.786 373.231 359.781 373.231 cv
359.781 373.231 li
359.778 373.231 359.775 373.231 359.772 373.231 cv
359.772 373.231 li
359.764 373.231 359.758 373.231 359.75 373.231 cv
359.75 373.231 li
359.749 373.231 359.747 373.231 359.745 373.231 cv
359.745 373.231 li
359.739 373.231 359.733 373.231 359.728 373.231 cv
359.728 373.231 li
359.724 373.231 359.721 373.232 359.717 373.232 cv
359.717 373.232 li
359.711 373.232 359.705 373.232 359.698 373.232 cv
359.698 373.232 li
359.696 373.232 359.693 373.232 359.691 373.232 cv
359.691 373.232 li
359.684 373.232 359.677 373.232 359.67 373.232 cv
359.67 373.232 li
359.668 373.232 359.666 373.232 359.664 373.232 cv
359.664 373.232 li
359.656 373.232 359.649 373.232 359.642 373.233 cv
359.642 373.233 li
359.64 373.233 359.638 373.233 359.637 373.233 cv
359.637 373.233 li
359.63 373.233 359.623 373.233 359.617 373.233 cv
359.617 373.233 li
359.614 373.233 359.612 373.233 359.609 373.233 cv
359.609 373.233 li
359.601 373.233 359.593 373.233 359.585 373.234 cv
359.585 373.234 li
359.584 373.234 359.584 373.234 359.583 373.234 cv
359.583 373.234 li
359.574 373.234 359.567 373.234 359.558 373.234 cv
359.558 373.234 li
359.557 373.234 359.557 373.234 359.556 373.234 cv
359.556 373.234 li
359.547 373.234 359.539 373.234 359.529 373.235 cv
359.529 373.235 li
359.529 373.235 359.529 373.235 359.529 373.235 cv
359.529 373.235 li
359.52 373.235 359.512 373.235 359.503 373.235 cv
359.503 373.235 li
359.503 373.235 359.502 373.235 359.502 373.235 cv
359.502 373.235 li
359.484 373.236 359.467 373.236 359.449 373.237 cv
359.449 373.237 li
359.449 373.237 359.448 373.237 359.448 373.237 cv
359.448 373.237 li
359.439 373.237 359.43 373.237 359.422 373.237 cv
359.422 373.237 li
359.422 373.237 359.421 373.237 359.421 373.237 cv
359.421 373.237 li
357.284 373.298 355.247 373.754 353.379 374.536 cv
353.379 374.536 li
351.54 370.137 li
354.115 369.059 356.942 368.464 359.908 368.464 cv
362.874 368.464 365.701 369.059 368.276 370.137 cv
366.437 374.536 li
1 .662745 .643137 rgb
f
359.908 411.843 mo
356.936 411.843 354.102 411.245 351.523 410.163 cv
353.366 405.766 li
353.817 405.955 354.278 406.125 354.749 406.275 cv
354.751 406.276 354.753 406.277 354.755 406.277 cv
354.76 406.279 354.765 406.281 354.77 406.282 cv
354.774 406.284 354.78 406.285 354.784 406.287 cv
354.787 406.287 354.788 406.288 354.791 406.289 cv
354.798 406.291 354.805 406.293 354.812 406.296 cv
354.812 406.296 354.812 406.296 354.813 406.296 cv
356.298 406.764 357.87 407.033 359.501 407.071 cv
359.501 407.071 359.501 407.071 359.501 407.071 cv
359.51 407.072 359.519 407.072 359.528 407.072 cv
359.529 407.072 359.529 407.072 359.53 407.072 cv
359.538 407.072 359.547 407.072 359.555 407.073 cv
359.555 407.073 359.556 407.073 359.556 407.073 cv
359.565 407.073 359.574 407.073 359.582 407.073 cv
359.582 407.073 li
359.591 407.073 359.6 407.073 359.609 407.074 cv
359.61 407.074 359.611 407.074 359.612 407.074 cv
359.62 407.074 359.628 407.074 359.636 407.074 cv
359.637 407.074 359.637 407.074 359.638 407.074 cv
359.646 407.074 359.655 407.074 359.663 407.074 cv
359.664 407.074 359.664 407.074 359.664 407.074 cv
359.673 407.075 359.682 407.075 359.69 407.075 cv
359.692 407.075 359.693 407.075 359.695 407.075 cv
359.703 407.075 359.71 407.075 359.717 407.075 cv
359.719 407.075 359.72 407.075 359.722 407.075 cv
359.73 407.075 359.737 407.075 359.745 407.075 cv
359.75 407.076 359.756 407.076 359.761 407.076 cv
359.765 407.076 359.768 407.076 359.771 407.076 cv
359.777 407.076 359.783 407.076 359.789 407.076 cv
359.792 407.076 359.796 407.076 359.799 407.076 cv
359.815 407.076 359.83 407.076 359.846 407.076 cv
359.849 407.076 359.851 407.076 359.853 407.076 cv
359.861 407.076 359.869 407.076 359.876 407.076 cv
359.878 407.076 359.879 407.076 359.88 407.076 cv
359.889 407.076 359.899 407.076 359.908 407.076 cv
359.908 407.076 li
359.908 407.076 li
359.917 407.076 359.926 407.076 359.935 407.076 cv
359.937 407.076 359.938 407.076 359.94 407.076 cv
359.947 407.076 359.955 407.076 359.962 407.076 cv
359.965 407.076 359.967 407.076 359.97 407.076 cv
359.985 407.076 360.001 407.076 360.017 407.076 cv
360.02 407.076 360.024 407.076 360.027 407.076 cv
360.033 407.076 360.039 407.076 360.044 407.076 cv
360.049 407.076 360.054 407.076 360.059 407.076 cv
360.063 407.076 360.067 407.075 360.071 407.075 cv
360.08 407.075 360.088 407.075 360.097 407.075 cv
360.097 407.075 360.097 407.075 360.098 407.075 cv
360.107 407.075 360.115 407.075 360.124 407.075 cv
360.124 407.075 360.125 407.075 360.125 407.075 cv
362.157 407.049 364.102 406.666 365.901 405.984 cv
365.904 405.983 365.908 405.982 365.911 405.981 cv
365.914 405.979 365.919 405.978 365.922 405.976 cv
366.099 405.909 366.275 405.839 366.45 405.766 cv
368.292 410.163 li
365.713 411.245 362.88 411.843 359.908 411.843 cv
f
339.891 398.521 mo
338.814 395.946 338.218 393.119 338.218 390.153 cv
338.218 387.187 338.813 384.361 339.891 381.786 cv
344.29 383.625 li
343.505 385.5 343.048 387.548 342.991 389.694 cv
342.991 389.694 li
342.991 389.694 342.991 389.694 342.991 389.695 cv
342.991 389.695 li
342.991 389.703 342.99 389.712 342.99 389.721 cv
342.99 389.721 li
342.99 389.721 342.99 389.721 342.99 389.721 cv
342.99 389.721 li
342.99 389.729 342.99 389.739 342.99 389.747 cv
342.99 389.747 li
342.99 389.748 342.99 389.749 342.99 389.75 cv
342.99 389.75 li
342.989 389.758 342.989 389.766 342.989 389.774 cv
342.989 389.774 li
342.989 389.775 342.989 389.776 342.989 389.777 cv
342.989 389.777 li
342.989 389.785 342.989 389.793 342.988 389.801 cv
342.988 389.801 li
342.988 389.803 342.988 389.804 342.988 389.806 cv
342.988 389.806 li
342.988 389.813 342.988 389.821 342.988 389.828 cv
342.988 389.828 li
342.988 389.83 342.988 389.832 342.988 389.833 cv
342.988 389.833 li
342.988 389.84 342.988 389.848 342.987 389.855 cv
342.987 389.855 li
342.987 389.857 342.987 389.86 342.987 389.863 cv
342.987 389.863 li
342.987 389.869 342.987 389.876 342.987 389.882 cv
342.987 389.882 li
342.987 389.884 342.987 389.886 342.987 389.888 cv
342.987 389.888 li
342.987 389.895 342.987 389.902 342.987 389.909 cv
342.987 389.909 li
342.987 389.912 342.987 389.914 342.986 389.917 cv
342.986 389.917 li
342.986 389.923 342.986 389.93 342.986 389.936 cv
342.986 389.936 li
342.986 389.939 342.986 389.942 342.986 389.945 cv
342.986 389.945 li
342.986 389.951 342.986 389.957 342.986 389.963 cv
342.986 389.963 li
342.986 389.966 342.986 389.969 342.986 389.972 cv
342.986 389.972 li
342.986 389.978 342.986 389.984 342.986 389.991 cv
342.986 389.991 li
342.986 389.992 342.986 389.993 342.986 389.995 cv
342.986 389.995 li
342.986 390.003 342.985 390.01 342.985 390.018 cv
342.985 390.018 li
342.985 390.02 342.985 390.023 342.985 390.025 cv
342.985 390.025 li
342.985 390.032 342.985 390.038 342.985 390.045 cv
342.985 390.045 li
342.985 390.049 342.985 390.053 342.985 390.058 cv
342.985 390.058 li
342.985 390.063 342.985 390.067 342.985 390.072 cv
342.985 390.072 li
342.985 390.078 342.985 390.084 342.985 390.09 cv
342.985 390.09 li
342.985 390.092 342.985 390.096 342.985 390.099 cv
342.985 390.099 li
342.985 390.117 342.985 390.135 342.985 390.153 cv
342.985 390.153 li
342.985 390.153 li
342.985 390.153 li
342.985 390.153 li
342.985 390.172 342.985 390.19 342.985 390.208 cv
342.985 390.211 342.985 390.214 342.985 390.217 cv
342.985 390.223 342.985 390.229 342.985 390.235 cv
342.985 390.24 342.985 390.245 342.985 390.249 cv
342.985 390.254 342.985 390.258 342.985 390.262 cv
342.985 390.268 342.985 390.276 342.985 390.282 cv
342.985 390.284 342.985 390.287 342.985 390.289 cv
342.985 390.297 342.986 390.305 342.986 390.313 cv
342.986 390.314 342.986 390.315 342.986 390.316 cv
342.986 390.322 342.986 390.329 342.986 390.335 cv
342.986 390.338 342.986 390.341 342.986 390.344 cv
342.986 390.35 342.986 390.356 342.986 390.362 cv
342.986 390.365 342.986 390.368 342.986 390.371 cv
342.986 390.377 342.986 390.384 342.986 390.39 cv
342.987 390.393 342.987 390.395 342.987 390.398 cv
342.987 390.405 342.987 390.412 342.987 390.419 cv
342.987 390.421 342.987 390.423 342.987 390.425 cv
342.987 390.431 342.987 390.438 342.987 390.445 cv
342.987 390.447 342.987 390.449 342.987 390.452 cv
342.988 390.459 342.988 390.467 342.988 390.475 cv
342.988 390.476 342.988 390.477 342.988 390.478 cv
342.988 390.486 342.988 390.494 342.988 390.502 cv
342.988 390.503 342.988 390.504 342.988 390.505 cv
342.989 390.515 342.989 390.522 342.989 390.532 cv
342.989 390.532 342.989 390.532 342.989 390.532 cv
342.989 390.541 342.989 390.55 342.99 390.558 cv
342.99 390.559 342.99 390.559 342.99 390.559 cv
343.041 392.725 343.499 394.791 344.29 396.682 cv
339.891 398.521 li
f
375.789 396.014 mo
375.79 396.009 375.792 396.005 375.793 396.001 cv
375.792 396.005 375.79 396.009 375.789 396.014 cv
375.801 395.98 mo
375.801 395.98 li
375.801 395.98 li
376.826 390.533 mo
376.826 390.533 376.826 390.531 376.826 390.531 cv
376.826 390.531 376.826 390.532 376.826 390.533 cv
376.827 390.506 mo
376.827 390.505 376.827 390.504 376.827 390.503 cv
376.827 390.504 376.827 390.505 376.827 390.506 cv
376.827 390.479 mo
376.828 390.478 376.828 390.477 376.828 390.475 cv
376.828 390.477 376.828 390.478 376.827 390.479 cv
376.828 390.452 mo
376.828 390.45 376.828 390.45 376.828 390.448 cv
376.828 390.449 376.828 390.451 376.828 390.452 cv
376.828 390.425 mo
376.828 390.424 376.828 390.422 376.828 390.421 cv
376.828 390.422 376.828 390.423 376.828 390.425 cv
376.829 390.398 mo
376.829 390.396 376.829 390.395 376.829 390.393 cv
376.829 390.395 376.829 390.396 376.829 390.398 cv
376.829 390.371 mo
376.829 390.369 376.829 390.367 376.829 390.366 cv
376.829 390.367 376.829 390.369 376.829 390.371 cv
376.829 390.344 mo
376.83 390.341 376.83 390.339 376.83 390.337 cv
376.83 390.339 376.83 390.341 376.829 390.344 cv
376.83 390.317 mo
376.83 390.311 376.83 390.306 376.83 390.3 cv
376.83 390.306 376.83 390.311 376.83 390.317 cv
376.83 390.29 mo
376.83 390.284 376.83 390.279 376.83 390.273 cv
376.83 390.279 376.83 390.284 376.83 390.29 cv
376.83 390.262 mo
376.83 390.253 376.83 390.245 376.83 390.236 cv
376.83 390.245 376.83 390.254 376.83 390.262 cv
376.83 390.235 mo
376.83 390.229 376.83 390.222 376.83 390.215 cv
376.83 390.222 376.83 390.229 376.83 390.235 cv
376.83 390.208 mo
376.831 390.2 376.831 390.193 376.831 390.185 cv
376.831 390.193 376.831 390.201 376.83 390.208 cv
376.831 390.181 mo
376.831 390.172 376.831 390.162 376.831 390.153 cv
376.831 390.162 376.831 390.172 376.831 390.181 cv
.913725 .913725 .913725 rgb
f
376.831 390.153 mo
376.831 390.144 376.831 390.135 376.831 390.126 cv
376.831 390.135 376.831 390.144 376.831 390.153 cv
f
376.831 390.121 mo
376.831 390.114 376.831 390.106 376.83 390.099 cv
376.831 390.106 376.831 390.114 376.831 390.121 cv
f
376.83 390.091 mo
376.83 390.085 376.83 390.078 376.83 390.071 cv
376.83 390.078 376.83 390.085 376.83 390.091 cv
f
376.83 390.071 mo
376.83 390.062 376.83 390.053 376.83 390.044 cv
376.83 390.053 376.83 390.062 376.83 390.071 cv
f
376.83 390.034 mo
376.83 390.028 376.83 390.023 376.83 390.017 cv
376.83 390.022 376.83 390.028 376.83 390.034 cv
f
376.83 390.008 mo
376.83 390.001 376.83 389.996 376.83 389.99 cv
376.83 389.996 376.83 390.002 376.83 390.008 cv
f
376.83 389.971 mo
376.83 389.969 376.83 389.965 376.829 389.963 cv
376.83 389.966 376.83 389.968 376.83 389.971 cv
f
376.829 389.942 mo
376.829 389.94 376.829 389.938 376.829 389.936 cv
376.829 389.938 376.829 389.94 376.829 389.942 cv
f
376.829 389.915 mo
376.829 389.913 376.829 389.91 376.829 389.909 cv
376.829 389.911 376.829 389.913 376.829 389.915 cv
f
376.828 389.887 mo
376.828 389.885 376.828 389.883 376.828 389.882 cv
376.828 389.884 376.828 389.885 376.828 389.887 cv
f
376.828 389.86 mo
376.828 389.858 376.828 389.856 376.828 389.855 cv
376.828 389.856 376.828 389.858 376.828 389.86 cv
f
376.828 389.833 mo
376.828 389.831 376.828 389.829 376.827 389.828 cv
376.828 389.829 376.828 389.831 376.828 389.833 cv
f
376.827 389.805 mo
376.827 389.803 376.827 389.802 376.827 389.8 cv
376.827 389.802 376.827 389.804 376.827 389.805 cv
f
376.826 389.778 mo
376.826 389.776 376.826 389.775 376.826 389.773 cv
376.826 389.775 376.826 389.776 376.826 389.778 cv
f
376.824 389.693 mo
376.824 389.693 li
376.824 389.693 376.824 389.693 376.824 389.693 cv
f
375.828 384.401 mo
375.827 384.399 375.826 384.396 375.825 384.394 cv
375.826 384.396 375.827 384.399 375.828 384.401 cv
f
375.82 384.38 mo
375.818 384.374 375.816 384.367 375.813 384.361 cv
375.816 384.367 375.818 384.374 375.82 384.38 cv
f
379.917 398.538 mo
375.52 396.695 li
375.613 396.473 375.701 396.249 375.785 396.023 cv
375.786 396.02 375.787 396.017 375.789 396.014 cv
375.79 396.009 375.792 396.005 375.793 396.001 cv
375.796 395.994 375.798 395.987 375.801 395.98 cv
375.801 395.98 li
376.426 394.276 376.784 392.444 376.826 390.533 cv
376.826 390.532 376.826 390.531 376.826 390.531 cv
376.827 390.523 376.827 390.514 376.827 390.506 cv
376.827 390.505 376.827 390.504 376.827 390.503 cv
376.827 390.495 376.827 390.487 376.827 390.479 cv
376.828 390.478 376.828 390.477 376.828 390.475 cv
376.828 390.467 376.828 390.46 376.828 390.452 cv
376.828 390.451 376.828 390.449 376.828 390.448 cv
376.828 390.44 376.828 390.432 376.828 390.425 cv
376.828 390.423 376.828 390.422 376.828 390.421 cv
376.829 390.413 376.829 390.406 376.829 390.398 cv
376.829 390.396 376.829 390.395 376.829 390.393 cv
376.829 390.386 376.829 390.378 376.829 390.371 cv
376.829 390.369 376.829 390.367 376.829 390.366 cv
376.829 390.358 376.829 390.351 376.829 390.344 cv
376.83 390.341 376.83 390.339 376.83 390.337 cv
376.83 390.331 376.83 390.323 376.83 390.317 cv
376.83 390.311 376.83 390.306 376.83 390.3 cv
376.83 390.297 376.83 390.293 376.83 390.29 cv
376.83 390.284 376.83 390.279 376.83 390.273 cv
376.83 390.27 376.83 390.266 376.83 390.262 cv
376.83 390.254 376.83 390.245 376.83 390.236 cv
376.83 390.235 li
376.83 390.229 376.83 390.222 376.83 390.215 cv
376.83 390.213 376.83 390.21 376.83 390.208 cv
376.831 390.201 376.831 390.193 376.831 390.185 cv
376.831 390.184 376.831 390.182 376.831 390.181 cv
376.831 390.172 376.831 390.162 376.831 390.153 cv
376.831 390.153 li
376.831 390.153 li
376.831 390.153 li
376.831 390.153 li
376.831 390.144 376.831 390.135 376.831 390.126 cv
376.831 390.126 li
376.831 390.124 376.831 390.123 376.831 390.121 cv
376.831 390.121 li
376.831 390.114 376.831 390.106 376.83 390.099 cv
376.83 390.099 li
376.83 390.097 376.83 390.094 376.83 390.091 cv
376.83 390.091 li
376.83 390.085 376.83 390.078 376.83 390.071 cv
376.83 390.071 li
376.83 390.071 li
376.83 390.071 li
376.83 390.062 376.83 390.053 376.83 390.044 cv
376.83 390.044 li
376.83 390.041 376.83 390.037 376.83 390.034 cv
376.83 390.034 li
376.83 390.028 376.83 390.022 376.83 390.017 cv
376.83 390.017 li
376.83 390.014 376.83 390.01 376.83 390.008 cv
376.83 390.008 li
376.83 390.002 376.83 389.996 376.83 389.99 cv
376.83 389.99 li
376.83 389.984 376.83 389.977 376.83 389.971 cv
376.83 389.971 li
376.83 389.968 376.83 389.966 376.829 389.963 cv
376.829 389.963 li
376.829 389.956 376.829 389.949 376.829 389.942 cv
376.829 389.942 li
376.829 389.94 376.829 389.938 376.829 389.936 cv
376.829 389.936 li
376.829 389.929 376.829 389.922 376.829 389.915 cv
376.829 389.915 li
376.829 389.913 376.829 389.911 376.829 389.909 cv
376.829 389.909 li
376.829 389.901 376.829 389.894 376.828 389.887 cv
376.828 389.887 li
376.828 389.885 376.828 389.884 376.828 389.882 cv
376.828 389.882 li
376.828 389.874 376.828 389.867 376.828 389.86 cv
376.828 389.86 li
376.828 389.858 376.828 389.856 376.828 389.855 cv
376.828 389.855 li
376.828 389.847 376.828 389.84 376.828 389.833 cv
376.828 389.833 li
376.828 389.831 376.828 389.829 376.827 389.828 cv
376.827 389.828 li
376.827 389.82 376.827 389.813 376.827 389.805 cv
376.827 389.805 li
376.827 389.804 376.827 389.802 376.827 389.8 cv
376.827 389.8 li
376.827 389.793 376.827 389.785 376.826 389.778 cv
376.826 389.778 li
376.826 389.776 376.826 389.775 376.826 389.773 cv
376.826 389.773 li
376.826 389.765 376.826 389.756 376.826 389.748 cv
376.826 389.748 li
376.826 389.748 376.826 389.747 376.826 389.747 cv
376.826 389.747 li
376.825 389.728 376.825 389.711 376.824 389.693 cv
376.824 389.693 li
376.824 389.693 376.824 389.693 376.824 389.693 cv
376.824 389.693 li
376.775 387.839 376.427 386.06 375.828 384.401 cv
375.828 384.401 li
375.827 384.399 375.826 384.396 375.825 384.394 cv
375.825 384.394 li
375.824 384.389 375.822 384.384 375.82 384.38 cv
375.82 384.38 li
375.818 384.374 375.816 384.367 375.813 384.361 cv
375.813 384.361 li
375.813 384.36 375.813 384.359 375.812 384.358 cv
375.812 384.358 li
375.721 384.106 375.623 383.857 375.52 383.611 cv
379.917 381.769 li
380.999 384.348 381.597 387.181 381.597 390.153 cv
381.597 393.126 380.999 395.958 379.917 398.538 cv
1 .662745 .643137 rgb
f
361.871 363.908 mo
361.871 364.114 361.702 364.283 361.495 364.283 cv
358.469 364.283 li
358.262 364.283 358.093 364.114 358.093 363.908 cv
358.093 362.097 li
358.093 361.891 358.262 361.722 358.469 361.722 cv
361.495 361.722 li
361.702 361.722 361.871 361.891 361.871 362.097 cv
361.871 363.908 li
cp
1 .517647 .486275 rgb
f
361.993 418.174 mo
361.993 418.38 361.824 418.549 361.617 418.549 cv
358.591 418.549 li
358.385 418.549 358.215 418.38 358.215 418.174 cv
358.215 416.362 li
358.215 416.156 358.385 415.987 358.591 415.987 cv
361.617 415.987 li
361.824 415.987 361.993 416.156 361.993 416.362 cv
361.993 418.174 li
cp
f
386.18 392.042 mo
385.974 392.042 385.805 391.873 385.805 391.666 cv
385.805 388.641 li
385.805 388.434 385.974 388.265 386.18 388.265 cv
387.991 388.265 li
388.198 388.265 388.367 388.434 388.367 388.641 cv
388.367 391.666 li
388.367 391.873 388.198 392.042 387.991 392.042 cv
386.18 392.042 li
cp
f
331.883 392.042 mo
331.677 392.042 331.508 391.873 331.508 391.666 cv
331.508 388.641 li
331.508 388.434 331.677 388.265 331.883 388.265 cv
333.694 388.265 li
333.901 388.265 334.07 388.434 334.07 388.641 cv
334.07 391.666 li
334.07 391.873 333.901 392.042 333.694 392.042 cv
331.883 392.042 li
cp
f
98.1914 174.028 mo
94.5063 174.028 li
93.0352 174.028 li
91.1425 174.028 li
89.6714 174.028 li
87.7788 174.028 li
86.3076 174.028 li
84.4151 174.028 li
82.9438 174.028 li
81.0513 174.028 li
79.5801 174.028 li
77.6875 174.028 li
76.2163 174.028 li
74.3247 174.028 li
72.8525 174.028 li
70.9609 174.028 li
69.4888 174.028 li
67.5971 174.028 li
66.126 174.028 li
64.2334 174.028 li
62.7612 174.028 li
60.8697 174.028 li
59.3975 174.028 li
57.5059 174.028 li
56.0346 174.028 li
54.1421 174.028 li
52.6709 174.028 li
50.7783 174.028 li
49.3071 174.028 li
47.4145 174.028 li
45.9434 174.028 li
44.0507 174.028 li
42.5796 174.028 li
40.6875 174.028 li
39.2158 174.028 li
37.3237 174.028 li
35.8521 174.028 li
33.9599 174.028 li
32.4883 174.028 li
30.5961 174.028 li
29.1245 174.028 li
27.2325 174.028 li
25.7607 174.028 li
24.0073 174.028 li
24.0073 174.939 li
25.7607 174.939 li
25.7607 180.569 li
27.2325 180.569 li
27.2325 174.939 li
29.1245 174.939 li
29.1245 180.569 li
30.5961 180.569 li
30.5961 174.939 li
32.4883 174.939 li
32.4883 180.569 li
33.9599 180.569 li
33.9599 174.939 li
35.8521 174.939 li
35.8521 180.569 li
37.3237 180.569 li
37.3237 174.939 li
39.2158 174.939 li
39.2158 180.569 li
40.6875 180.569 li
40.6875 174.939 li
42.5796 174.939 li
42.5796 180.569 li
44.0507 180.569 li
44.0507 174.939 li
45.9434 174.939 li
45.9434 180.569 li
47.4145 180.569 li
47.4145 174.939 li
49.3071 174.939 li
49.3071 180.569 li
50.7783 180.569 li
50.7783 174.939 li
52.6709 174.939 li
52.6709 180.569 li
54.1421 180.569 li
54.1421 174.939 li
56.0346 174.939 li
56.0346 180.569 li
57.5059 180.569 li
57.5059 174.939 li
59.3975 174.939 li
59.3975 180.569 li
60.8697 180.569 li
60.8697 174.939 li
62.7612 174.939 li
62.7612 180.569 li
64.2334 180.569 li
64.2334 174.939 li
66.126 174.939 li
66.126 180.569 li
67.5971 180.569 li
67.5971 174.939 li
69.4888 174.939 li
69.4888 180.569 li
70.9609 180.569 li
70.9609 174.939 li
72.8525 174.939 li
72.8525 180.569 li
74.3247 180.569 li
74.3247 174.939 li
76.2163 174.939 li
76.2163 180.569 li
77.6875 180.569 li
77.6875 174.939 li
79.5801 174.939 li
79.5801 180.569 li
81.0513 180.569 li
81.0513 174.939 li
82.9438 174.939 li
82.9438 180.569 li
84.4151 180.569 li
84.4151 174.939 li
86.3076 174.939 li
86.3076 180.569 li
87.7788 180.569 li
87.7788 174.939 li
89.6714 174.939 li
89.6714 180.569 li
91.1425 180.569 li
91.1425 174.939 li
93.0352 174.939 li
93.0352 180.569 li
94.5063 180.569 li
94.5063 174.939 li
98.1914 174.939 li
98.1914 174.028 li
.47451 .333333 .278431 rgb
f
149.085 158.485 mo
148.893 158.42 li
90.5537 114.543 li
90.4122 114.437 90.3843 114.235 90.4903 114.094 cv
90.5961 113.952 90.7993 113.924 90.9395 114.031 cv
149.279 157.909 li
149.42 158.015 149.448 158.216 149.343 158.357 cv
149.279 158.441 149.184 158.485 149.085 158.485 cv
.576471 .376471 .215686 rgb
f
145.68 160.245 mo
145.484 160.178 li
90.2412 117.103 li
90.1021 116.994 90.0772 116.792 90.1861 116.653 cv
90.294 116.513 90.4947 116.488 90.6358 116.597 cv
145.876 159.672 li
146.016 159.781 146.042 159.982 145.932 160.121 cv
145.868 160.203 145.774 160.245 145.68 160.245 cv
f
90.4389 178.723 mo
90.1225 178.723 89.8657 178.456 89.8657 178.128 cv
89.8657 111.448 li
89.8657 111.121 90.1225 110.854 90.4389 110.854 cv
90.7558 110.854 91.0117 111.121 91.0117 111.448 cv
91.0117 178.128 li
91.0117 178.456 90.7558 178.723 90.4389 178.723 cv
.47451 .333333 .278431 rgb
f
99.2114 173.832 mo
99.0694 173.832 98.9389 173.736 98.9013 173.592 cv
90.1284 139.566 li
90.0849 139.395 90.1875 139.219 90.3589 139.175 cv
90.5293 139.133 90.7051 139.234 90.7495 139.406 cv
99.5224 173.432 li
99.5659 173.604 99.4634 173.778 99.292 173.822 cv
99.2114 173.832 li
.576471 .376471 .215686 rgb
f
72.5253 180.18 mo
72.4394 180.168 li
72.2685 180.121 72.169 179.944 72.2167 179.774 cv
90.4385 114.201 li
90.4853 114.03 90.6582 113.928 90.8325 113.978 cv
91.0034 114.025 91.103 114.203 91.0552 114.373 cv
72.8335 179.945 li
72.7944 180.087 72.6655 180.18 72.5253 180.18 cv
f
77.08 179.043 mo
77.0069 179.035 li
76.8344 178.994 76.728 178.821 76.7691 178.649 cv
90.1269 122.292 li
90.168 122.12 90.3394 122.011 90.5122 122.055 cv
90.6845 122.095 90.7905 122.268 90.75 122.44 cv
77.3916 178.796 li
77.3569 178.944 77.2251 179.043 77.08 179.043 cv
f
81.0522 179.043 mo
80.9732 179.033 li
80.8017 178.989 80.6978 178.815 80.7421 178.644 cv
90.4365 140.6 li
90.4795 140.429 90.6504 140.32 90.8257 140.368 cv
90.9971 140.413 91.1006 140.586 91.0566 140.757 cv
81.3624 178.801 li
81.3252 178.946 81.1953 179.043 81.0522 179.043 cv
f
131.76 167.197 mo
131.525 167.094 li
90.2046 122.584 li
90.0835 122.455 90.0904 122.252 90.2207 122.132 cv
90.3496 122.011 90.5522 122.019 90.6733 122.149 cv
131.995 166.658 li
132.116 166.788 132.108 166.99 131.978 167.111 cv
131.76 167.197 li
f
127.877 168.591 mo
127.642 168.488 li
90.2031 127.832 li
90.0835 127.702 90.0913 127.499 90.2216 127.378 cv
90.353 127.26 90.5542 127.269 90.6748 127.397 cv
128.113 168.053 li
128.232 168.184 128.224 168.386 128.093 168.506 cv
127.877 168.591 li
f
136.697 164.803 mo
136.476 164.712 li
90.523 120.062 li
90.3965 119.939 90.3935 119.737 90.5166 119.609 cv
90.6411 119.483 90.8432 119.481 90.9697 119.604 cv
136.921 164.253 li
137.047 164.376 137.05 164.579 136.928 164.706 cv
136.697 164.803 li
f
96.0971 130.425 mo
92.9527 129.81 li
91.3745 129.501 89.7334 129.472 88.1406 129.724 cv
83.7066 130.425 li
84.4991 123.216 li
84.6172 122.143 84.6172 121.063 84.4991 119.989 cv
83.7066 112.781 li
87.273 113.29 li
89.0118 113.538 90.7915 113.538 92.5308 113.29 cv
96.0971 112.781 li
96.9345 118.41 li
97.2505 120.531 97.2505 122.674 96.9345 124.795 cv
96.0971 130.425 li
.101961 .737255 .611765 rgb
f
96.0971 130.425 mo
92.9527 129.81 li
92.9298 129.805 92.9071 129.801 92.8843 129.796 cv
92.5489 129.733 92.2106 129.682 91.8708 129.643 cv
91.5854 129.611 91.2988 129.587 91.0117 129.572 cv
90.7754 129.56 90.5388 129.554 90.3021 129.554 cv
90.1567 129.554 90.0111 129.557 89.8657 129.561 cv
89.5934 129.57 89.3216 129.586 89.0504 129.611 cv
88.8242 129.631 88.5986 129.657 88.3738 129.689 cv
88.296 129.7 88.2182 129.711 88.1406 129.724 cv
86.7272 129.947 li
86.0323 130.057 li
83.7066 130.425 li
83.7066 130.425 90.7915 113.538 92.5308 113.29 cv
96.0971 112.781 li
96.9345 118.41 li
97.0925 119.47 97.1715 120.536 97.1715 121.603 cv
97.1715 121.633 97.1715 121.663 97.1713 121.693 cv
97.1702 121.96 97.1642 122.226 97.1532 122.493 cv
97.1214 123.262 97.0485 124.03 96.9345 124.795 cv
96.856 125.323 li
96.74 126.103 li
96.4092 128.327 li
96.2886 129.138 li
96.0971 130.425 li
.372549 .815686 .729412 rgb
f
106.204 168.45 mo
99.8657 168.189 li
96.6866 168.058 93.4658 168.492 90.4233 169.463 cv
81.9556 172.164 li
81.3477 157.818 li
81.2564 155.683 80.9327 153.569 80.3804 151.504 cv
76.6679 137.634 li
83.8008 137.561 li
87.2788 137.526 90.7607 136.993 94.0903 135.986 cv
100.917 133.921 li
104.244 144.687 li
105.497 148.742 106.139 152.937 106.157 157.183 cv
106.204 168.45 li
.101961 .737255 .611765 rgb
f
81.9556 172.164 mo
81.9556 172.164 90.7607 136.993 94.0903 135.986 cv
100.917 133.921 li
104.244 144.687 li
105.497 148.742 106.139 152.937 106.157 157.183 cv
106.204 168.45 li
99.8657 168.189 li
99.4947 168.174 99.1229 168.166 98.7511 168.166 cv
98.5562 168.166 98.3613 168.169 98.1664 168.173 cv
97.9476 168.177 97.7285 168.185 97.5097 168.195 cv
95.3135 168.295 93.124 168.661 91.0117 169.282 cv
90.8149 169.34 90.6187 169.401 90.4233 169.463 cv
89.8657 169.641 li
83.1509 171.782 li
82.4322 172.012 li
81.9556 172.164 li
.372549 .815686 .729412 rgb
f
60.1396 180.569 mo
59.8232 180.569 59.5669 180.251 59.5669 179.858 cv
59.5669 82.8672 li
59.5669 82.4741 59.8232 82.1563 60.1396 82.1563 cv
60.456 82.1563 60.7129 82.4741 60.7129 82.8672 cv
60.7129 179.858 li
60.7129 180.251 60.456 180.569 60.1396 180.569 cv
.47451 .333333 .278431 rgb
f
73.4326 179.009 mo
59.7666 100.662 li
60.397 100.552 li
74.0634 178.899 li
73.4326 179.009 li
.576471 .376471 .215686 rgb
f
67.6513 181.521 mo
59.8208 114.324 li
60.4585 114.25 li
68.288 181.447 li
67.6513 181.521 li
f
38.2031 179.067 mo
37.604 178.84 li
59.2666 121.49 li
59.8662 121.716 li
38.2031 179.067 li
f
42.1567 180.69 mo
41.5639 180.449 li
59.8428 135.402 li
60.4365 135.644 li
42.1567 180.69 li
f
45.9199 89.7476 mo
59.5669 89.7476 li
59.5669 89.7476 57.4946 88.5586 57.4946 86.2207 cv
57.4946 83.8828 59.5669 82.6934 59.5669 82.6934 cv
45.9199 82.6934 li
48.042 86.1001 li
45.9199 89.7476 li
cp
1 .517647 .486275 rgb
f
65.7979 117.565 mo
62.6533 116.95 li
61.0757 116.642 59.4345 116.613 57.8408 116.864 cv
53.4072 117.565 li
54.1997 110.356 li
54.3178 109.283 54.3178 108.204 54.1997 107.13 cv
53.4072 99.9213 li
56.9736 100.431 li
58.7124 100.678 60.4917 100.678 62.2315 100.431 cv
65.7979 99.9213 li
66.6357 105.55 li
66.9512 107.671 66.9512 109.815 66.6357 111.937 cv
65.7979 117.565 li
.101961 .737255 .611765 rgb
f
65.7979 117.565 mo
63.2788 117.073 li
62.6533 116.95 li
62.6376 116.947 62.6218 116.944 62.6061 116.941 cv
61.9932 116.824 61.3709 116.748 60.7457 116.715 cv
60.5298 116.703 60.3134 116.697 60.0971 116.695 cv
60.0656 116.695 60.0342 116.695 60.0027 116.695 cv
59.8574 116.695 59.7121 116.697 59.5669 116.702 cv
58.9888 116.72 58.4118 116.774 57.8408 116.864 cv
53.4072 117.565 li
53.4072 117.565 60.4917 100.678 62.2315 100.431 cv
65.7979 99.9213 li
66.6357 105.55 li
66.7935 106.611 66.8723 107.677 66.8723 108.743 cv
66.8723 109.81 66.7935 110.876 66.6357 111.937 cv
65.7979 117.565 li
.372549 .815686 .729412 rgb
f
69.0034 146.041 mo
64.0776 145.077 li
61.6059 144.594 59.0346 144.547 56.539 144.942 cv
49.5923 146.041 li
50.8345 134.747 li
51.0195 133.065 51.0195 131.374 50.8345 129.692 cv
49.5923 118.399 li
55.1792 119.196 li
57.9043 119.585 60.6919 119.585 63.4165 119.196 cv
69.0034 118.399 li
70.3164 127.218 li
70.8106 130.541 70.8106 133.899 70.3164 137.222 cv
69.0034 146.041 li
.101961 .737255 .611765 rgb
f
69.0034 146.041 mo
68.3082 145.905 li
67.6353 145.773 li
64.0776 145.077 li
64.0683 145.075 64.059 145.073 64.0497 145.071 cv
63.8305 145.029 63.6107 144.99 63.3901 144.954 cv
62.5058 144.811 61.6104 144.723 60.7129 144.691 cv
60.4511 144.682 60.1892 144.677 59.9272 144.677 cv
59.8071 144.677 59.6869 144.678 59.5669 144.68 cv
58.5975 144.696 57.6293 144.776 56.6714 144.922 cv
56.6272 144.929 56.5832 144.935 56.539 144.942 cv
55.9326 145.038 li
50.747 145.858 li
50.0185 145.974 li
49.5923 146.041 li
49.5923 146.041 60.6919 119.585 63.4165 119.196 cv
69.0034 118.399 li
70.3164 127.218 li
70.5635 128.879 70.687 130.549 70.687 132.22 cv
70.687 133.89 70.5635 135.56 70.3164 137.222 cv
69.0034 146.041 li
.372549 .815686 .729412 rgb
f
69.0034 175.075 mo
64.0776 174.111 li
61.6059 173.628 59.0346 173.582 56.539 173.977 cv
49.5923 175.075 li
50.8345 163.782 li
51.0195 162.1 51.0195 160.409 50.8345 158.727 cv
49.5923 147.434 li
55.1792 148.231 li
57.9043 148.62 60.6919 148.62 63.4165 148.231 cv
69.0034 147.434 li
70.3164 156.252 li
70.8106 159.575 70.8106 162.934 70.3164 166.256 cv
69.0034 175.075 li
.101961 .737255 .611765 rgb
f
69.0034 175.075 mo
67.5116 174.783 li
66.8511 174.654 li
64.0776 174.111 li
62.9709 173.895 61.8438 173.766 60.7129 173.726 cv
60.4511 173.716 60.1893 173.711 59.9273 173.711 cv
59.8071 173.711 59.6871 173.712 59.5669 173.714 cv
58.5529 173.731 57.5399 173.819 56.539 173.977 cv
49.5923 175.075 li
49.5923 175.075 60.6919 148.62 63.4165 148.231 cv
69.0034 147.434 li
70.3164 156.252 li
70.5635 157.914 70.687 159.584 70.687 161.254 cv
70.687 161.839 70.6719 162.424 70.6416 163.008 cv
70.5854 164.093 70.477 165.177 70.3164 166.256 cv
69.1592 174.028 li
69.0236 174.939 li
69.0034 175.075 li
.372549 .815686 .729412 rgb
f
29.8609 179.476 mo
29.5439 179.476 29.2872 179.21 29.2872 178.882 cv
29.2872 126.125 li
29.2872 125.798 29.5439 125.532 29.8609 125.532 cv
30.1767 125.532 30.4336 125.798 30.4336 126.125 cv
30.4336 178.882 li
30.4336 179.21 30.1767 179.476 29.8609 179.476 cv
.47451 .333333 .278431 rgb
f
42.2686 180.645 mo
29.5498 128.377 li
30.1714 128.227 li
42.8902 180.494 li
42.2686 180.645 li
.576471 .376471 .215686 rgb
f
17.8227 173.743 mo
17.2046 173.575 li
29.5513 128.218 li
30.1695 128.386 li
17.8227 173.743 li
f
19.5468 173.761 mo
18.9399 173.557 li
29.5571 142.056 li
30.1636 142.261 li
19.5468 173.761 li
f
37.5937 179.033 mo
30.1231 149.942 li
30.7437 149.782 li
38.2138 178.874 li
37.5937 179.033 li
f
33.6465 180.636 mo
29.5469 161.321 li
30.1739 161.188 li
34.2729 180.503 li
33.6465 180.636 li
f
35.5181 145.259 mo
32.3745 144.644 li
30.7964 144.335 29.1548 144.306 27.562 144.558 cv
23.1274 145.259 li
23.9209 138.05 li
24.0391 136.977 24.0391 135.897 23.9209 134.823 cv
23.1274 127.615 li
26.6938 128.124 li
28.4336 128.372 30.2129 128.372 31.9522 128.124 cv
35.5181 127.615 li
36.3564 133.244 li
36.6723 135.365 36.6723 137.509 36.3564 139.629 cv
35.5181 145.259 li
.101961 .737255 .611765 rgb
f
33.5646 144.876 mo
32.3745 144.644 li
32.3657 144.642 32.357 144.64 32.3482 144.638 cv
32.357 144.64 32.3657 144.642 32.3745 144.644 cv
33.5646 144.876 li
1 1 1 rgb
f
25.6866 144.854 mo
25.6866 144.854 li
27.562 144.558 li
27.8298 144.515 28.0991 144.481 28.3692 144.454 cv
28.0991 144.481 27.8299 144.515 27.562 144.558 cv
25.6866 144.854 li
f
31.3361 128.201 mo
31.3441 128.2 31.3522 128.199 31.3603 128.198 cv
31.3522 128.199 31.3442 128.2 31.3361 128.201 cv
31.3675 128.197 mo
31.5628 128.176 31.7577 128.151 31.9522 128.124 cv
31.7577 128.151 31.5628 128.176 31.3675 128.197 cv
f
35.5181 145.259 mo
34.2559 145.012 li
33.5646 144.876 li
32.3745 144.644 li
32.3657 144.642 32.357 144.64 32.3482 144.638 cv
31.5676 144.487 30.7718 144.405 29.9736 144.39 cv
29.892 144.389 29.8103 144.388 29.7287 144.388 cv
29.2748 144.388 28.8209 144.41 28.3692 144.454 cv
28.0991 144.481 27.8298 144.515 27.562 144.558 cv
25.6866 144.854 li
24.993 144.964 li
23.1274 145.259 li
23.1274 145.259 28.8023 128.333 29.8609 128.302 cv
30.3537 128.288 30.8459 128.254 31.3361 128.201 cv
31.3442 128.2 31.3522 128.199 31.3603 128.198 cv
31.3626 128.198 31.3651 128.198 31.3675 128.197 cv
31.5628 128.176 31.7577 128.151 31.9522 128.124 cv
31.9522 128.124 li
35.5181 127.615 li
36.3564 133.244 li
36.5144 134.304 36.5933 135.371 36.5933 136.437 cv
36.5933 137.503 36.5144 138.569 36.3564 139.629 cv
35.5181 145.259 li
.372549 .815686 .729412 rgb
f
36.6201 168.034 mo
32.8637 167.3 li
30.9785 166.931 29.0176 166.896 27.1143 167.197 cv
21.8169 168.034 li
22.7637 159.422 li
22.9053 158.14 22.9053 156.85 22.7637 155.567 cv
21.8169 146.955 li
26.0777 147.563 li
28.1563 147.859 30.2818 147.859 32.3594 147.563 cv
36.6201 146.955 li
37.6211 153.681 li
37.9986 156.214 37.9986 158.775 37.6211 161.31 cv
36.6201 168.034 li
.101961 .737255 .611765 rgb
f
36.6201 168.034 mo
35.3675 167.789 li
34.6713 167.653 li
32.8637 167.3 li
32.3883 167.207 31.9081 167.135 31.4251 167.084 cv
31.2034 167.061 30.9809 167.042 30.7583 167.028 cv
30.6501 167.021 30.542 167.015 30.4336 167.011 cv
30.1889 167 29.9438 166.994 29.6988 166.994 cv
29.5616 166.994 29.4244 166.996 29.2872 166.999 cv
28.5594 167.017 27.8328 167.083 27.1143 167.197 cv
21.8169 168.034 li
21.8169 168.034 30.2818 147.859 32.3594 147.563 cv
36.6201 146.955 li
37.6211 153.681 li
37.8098 154.947 37.9042 156.221 37.9042 157.495 cv
37.9042 158.209 37.8745 158.924 37.8151 159.638 cv
37.7686 160.196 37.7039 160.753 37.6211 161.31 cv
37.5992 161.457 li
36.6201 168.034 li
.372549 .815686 .729412 rgb
f
115.636 199.135 mo
28.0278 199.032 li
20.2793 199.032 13.4814 193.868 11.4028 186.404 cv
6.0127 173.773 li
5.88965 173.482 6.13477 173.171 6.4458 173.223 cv
8.53174 173.571 15.0234 173.151 24.0073 174.028 cv
24.7769 174.104 25.3086 177.614 26.1133 177.696 cv
38.1138 178.937 54.1938 180.618 69.915 179.276 cv
79.2891 178.477 87.9028 177.543 95.5381 176.563 cv
96.5483 176.433 97.5225 173.165 98.498 173.034 cv
112.992 171.097 123.628 169.121 128.858 168.077 cv
130.57 167.734 144.153 160.736 151.604 156.856 cv
151.951 156.676 152.243 157.171 151.918 157.391 cv
130.396 171.97 li
130.396 171.97 126.613 176.535 124.503 180.471 cv
122.312 184.559 119.612 192.902 119.612 192.902 cv
117.81 196.75 119.885 199.135 115.636 199.135 cv
cp
.203922 .286275 .368627 rgb
f
115.636 199.135 mo
28.0278 199.032 li
22.5894 199.032 17.6187 196.487 14.4199 192.391 cv
119.612 192.902 li
117.81 196.75 119.885 199.135 115.636 199.135 cv
cp
.47451 .333333 .278431 rgb
f
121.726 183.987 mo
84.9614 186.849 48.0342 186.849 11.2705 183.987 cv
10.645 183.938 10.1733 183.384 10.2217 182.755 cv
10.2388 182.541 li
10.2876 181.913 10.8384 181.439 11.4619 181.488 cv
48.0981 184.339 84.8975 184.339 121.535 181.488 cv
122.158 181.438 122.708 181.913 122.757 182.541 cv
122.774 182.755 li
122.823 183.384 122.352 183.939 121.726 183.987 cv
cp
f
31.5264 189.465 mo
31.5264 190.386 30.7808 191.131 29.8608 191.131 cv
28.9399 191.131 28.1943 190.386 28.1943 189.465 cv
28.1943 188.545 28.9399 187.799 29.8608 187.799 cv
30.7808 187.799 31.5264 188.545 31.5264 189.465 cv
cp
.584314 .847059 .913725 rgb
f
36.0815 189.465 mo
36.0815 190.386 35.3359 191.131 34.416 191.131 cv
33.4956 191.131 32.75 190.386 32.75 189.465 cv
32.75 188.545 33.4956 187.799 34.416 187.799 cv
35.3359 187.799 36.0815 188.545 36.0815 189.465 cv
cp
f
40.6372 189.465 mo
40.6372 190.386 39.8916 191.131 38.9707 191.131 cv
38.0508 191.131 37.3052 190.386 37.3052 189.465 cv
37.3052 188.545 38.0508 187.799 38.9707 187.799 cv
39.8916 187.799 40.6372 188.545 40.6372 189.465 cv
cp
f
45.1924 189.465 mo
45.1924 190.386 44.4468 191.131 43.5264 191.131 cv
42.6064 191.131 41.8608 190.386 41.8608 189.465 cv
41.8608 188.545 42.6064 187.799 43.5264 187.799 cv
44.4468 187.799 45.1924 188.545 45.1924 189.465 cv
cp
f
49.748 189.465 mo
49.748 190.386 49.0024 191.131 48.082 191.131 cv
47.1621 191.131 46.4155 190.386 46.4155 189.465 cv
46.4155 188.545 47.1621 187.799 48.082 187.799 cv
49.0024 187.799 49.748 188.545 49.748 189.465 cv
cp
f
54.3037 189.465 mo
54.3037 190.386 53.5581 191.131 52.6372 191.131 cv
51.7173 191.131 50.9712 190.386 50.9712 189.465 cv
50.9712 188.545 51.7173 187.799 52.6372 187.799 cv
53.5581 187.799 54.3037 188.545 54.3037 189.465 cv
cp
f
58.8589 189.465 mo
58.8589 190.386 58.1128 191.131 57.1929 191.131 cv
56.2729 191.131 55.5264 190.386 55.5264 189.465 cv
55.5264 188.545 56.2729 187.799 57.1929 187.799 cv
58.1128 187.799 58.8589 188.545 58.8589 189.465 cv
cp
f
63.4146 189.465 mo
63.4146 190.386 62.668 191.131 61.748 191.131 cv
60.8281 191.131 60.082 190.386 60.082 189.465 cv
60.082 188.545 60.8281 187.799 61.748 187.799 cv
62.668 187.799 63.4146 188.545 63.4146 189.465 cv
cp
f
67.9697 189.465 mo
67.9697 190.386 67.2236 191.131 66.3037 191.131 cv
65.3828 191.131 64.6372 190.386 64.6372 189.465 cv
64.6372 188.545 65.3828 187.799 66.3037 187.799 cv
67.2236 187.799 67.9697 188.545 67.9697 189.465 cv
cp
f
72.5254 189.465 mo
72.5254 190.386 71.7793 191.131 70.8594 191.131 cv
69.9395 191.131 69.1929 190.386 69.1929 189.465 cv
69.1929 188.545 69.9395 187.799 70.8594 187.799 cv
71.7793 187.799 72.5254 188.545 72.5254 189.465 cv
cp
f
77.0801 189.465 mo
77.0801 190.386 76.3345 191.131 75.4146 191.131 cv
74.4941 191.131 73.7485 190.386 73.7485 189.465 cv
73.7485 188.545 74.4941 187.799 75.4146 187.799 cv
76.3345 187.799 77.0801 188.545 77.0801 189.465 cv
cp
f
81.6357 189.465 mo
81.6357 190.386 80.8901 191.131 79.9702 191.131 cv
79.0493 191.131 78.3037 190.386 78.3037 189.465 cv
78.3037 188.545 79.0493 187.799 79.9702 187.799 cv
80.8901 187.799 81.6357 188.545 81.6357 189.465 cv
cp
f
86.1909 189.465 mo
86.1909 190.386 85.4453 191.131 84.5249 191.131 cv
83.605 191.131 82.8594 190.386 82.8594 189.465 cv
82.8594 188.545 83.605 187.799 84.5249 187.799 cv
85.4453 187.799 86.1909 188.545 86.1909 189.465 cv
cp
f
90.7466 189.465 mo
90.7466 190.386 90.001 191.131 89.0801 191.131 cv
88.1602 191.131 87.4146 190.386 87.4146 189.465 cv
87.4146 188.545 88.1602 187.799 89.0801 187.799 cv
90.001 187.799 90.7466 188.545 90.7466 189.465 cv
cp
f
95.3018 189.465 mo
95.3018 190.386 94.5562 191.131 93.6357 191.131 cv
92.7158 191.131 91.9702 190.386 91.9702 189.465 cv
91.9702 188.545 92.7158 187.799 93.6357 187.799 cv
94.5562 187.799 95.3018 188.545 95.3018 189.465 cv
cp
f
99.8574 189.465 mo
99.8574 190.386 99.1118 191.131 98.1914 191.131 cv
97.2715 191.131 96.5249 190.386 96.5249 189.465 cv
96.5249 188.545 97.2715 187.799 98.1914 187.799 cv
99.1118 187.799 99.8574 188.545 99.8574 189.465 cv
cp
f
104.413 189.465 mo
104.413 190.386 103.667 191.131 102.747 191.131 cv
101.827 191.131 101.081 190.386 101.081 189.465 cv
101.081 188.545 101.827 187.799 102.747 187.799 cv
103.667 187.799 104.413 188.545 104.413 189.465 cv
cp
f
108.968 189.465 mo
108.968 190.386 108.222 191.131 107.302 191.131 cv
106.382 191.131 105.636 190.386 105.636 189.465 cv
105.636 188.545 106.382 187.799 107.302 187.799 cv
108.222 187.799 108.968 188.545 108.968 189.465 cv
cp
f
120.725 177.925 mo
120.725 178.994 119.858 179.859 118.79 179.859 cv
117.721 179.859 116.855 178.994 116.855 177.925 cv
116.855 176.856 117.721 175.99 118.79 175.99 cv
119.858 175.99 120.725 176.856 120.725 177.925 cv
cp
.47451 .333333 .278431 rgb
f
145.344 26.6474 mo
153.043 26.6474 li
153.962 22.0562 li
141.24 22.0562 li
139.753 20.393 li
26.4165 20.393 li
14.0625 47.729 li
164.187 47.729 li
145.344 26.6474 li
.584314 .847059 .913725 rgb
f
141.346 47.729 mo
90.7616 47.729 li
14.321 47.6361 li
90.1475 20.393 li
96.2793 20.393 li
98.3823 20.393 li
98.3862 20.393 li
104.518 20.393 li
139.753 20.393 li
141.24 22.0562 li
153.962 22.0562 li
153.043 26.6474 li
145.344 26.6474 li
162.665 46.0257 li
141.346 47.729 li
.792157 .92549 .956863 rgb
f
143.297 28.8315 mo
143.297 29.3896 142.845 29.8433 142.286 29.8433 cv
141.727 29.8433 141.274 29.3896 141.274 28.8315 cv
141.274 28.2725 141.727 27.8198 142.286 27.8198 cv
142.845 27.8198 143.297 28.2725 143.297 28.8315 cv
cp
.2 .431373 .482353 rgb
f
140.588 28.8428 mo
140.588 29.4014 140.135 29.8545 139.577 29.8545 cv
139.018 29.8545 138.565 29.4014 138.565 28.8428 cv
138.565 28.2842 139.018 27.8315 139.577 27.8315 cv
140.135 27.8315 140.588 28.2842 140.588 28.8428 cv
cp
f
140.588 25.9141 mo
140.588 22.8247 li
153.816 22.7891 li
153.19 25.9082 li
140.588 25.9141 li
cp
f
34.3813 24.4478 mo
28.1011 24.4478 li
28.1011 22.4761 li
34.3813 22.4761 li
34.3813 24.4478 li
cp
f
43.5249 24.4478 mo
37.2446 24.4478 li
37.2446 22.4761 li
43.5249 22.4761 li
43.5249 24.4478 li
cp
f
52.6685 24.4478 mo
46.3882 24.4478 li
46.3882 22.4761 li
52.6685 22.4761 li
52.6685 24.4478 li
cp
f
61.812 24.4478 mo
55.5317 24.4478 li
55.5317 22.4761 li
61.812 22.4761 li
61.812 24.4478 li
cp
f
70.9556 24.4478 mo
64.6753 24.4478 li
64.6753 22.4761 li
70.9556 22.4761 li
70.9556 24.4478 li
cp
f
80.0991 24.4478 mo
73.8188 24.4478 li
73.8188 22.4761 li
80.0991 22.4761 li
80.0991 24.4478 li
cp
f
89.2427 24.4478 mo
82.9624 24.4478 li
82.9624 22.4761 li
89.2427 22.4761 li
89.2427 24.4478 li
cp
f
98.3862 24.4478 mo
92.106 24.4478 li
92.106 22.4761 li
98.3862 22.4761 li
98.3862 24.4478 li
cp
f
107.53 24.4478 mo
101.25 24.4478 li
101.25 22.4761 li
107.53 22.4761 li
107.53 24.4478 li
cp
f
116.673 24.4478 mo
110.393 24.4478 li
110.393 22.4761 li
116.673 22.4761 li
116.673 24.4478 li
cp
f
125.817 24.4478 mo
119.537 24.4478 li
119.537 22.4761 li
125.817 22.4761 li
125.817 24.4478 li
cp
f
134.96 24.4478 mo
128.68 24.4478 li
128.68 22.4761 li
134.96 22.4761 li
134.96 24.4478 li
cp
f
34.3813 27.6333 mo
28.1011 27.6333 li
28.1011 25.6616 li
34.3813 25.6616 li
34.3813 27.6333 li
cp
f
43.5249 27.6333 mo
37.2446 27.6333 li
37.2446 25.6616 li
43.5249 25.6616 li
43.5249 27.6333 li
cp
f
52.6685 27.6333 mo
46.3882 27.6333 li
46.3882 25.6616 li
52.6685 25.6616 li
52.6685 27.6333 li
cp
f
61.812 27.6333 mo
55.5317 27.6333 li
55.5317 25.6616 li
61.812 25.6616 li
61.812 27.6333 li
cp
f
70.9556 27.6333 mo
64.6753 27.6333 li
64.6753 25.6616 li
70.9556 25.6616 li
70.9556 27.6333 li
cp
f
80.0991 27.6333 mo
73.8188 27.6333 li
73.8188 25.6616 li
80.0991 25.6616 li
80.0991 27.6333 li
cp
f
89.2427 27.6333 mo
82.9624 27.6333 li
82.9624 25.6616 li
89.2427 25.6616 li
89.2427 27.6333 li
cp
f
98.3862 27.6333 mo
92.106 27.6333 li
92.106 25.6616 li
98.3862 25.6616 li
98.3862 27.6333 li
cp
f
107.53 27.6333 mo
101.25 27.6333 li
101.25 25.6616 li
107.53 25.6616 li
107.53 27.6333 li
cp
f
116.673 27.6333 mo
110.393 27.6333 li
110.393 25.6616 li
116.673 25.6616 li
116.673 27.6333 li
cp
f
125.817 27.6333 mo
119.537 27.6333 li
119.537 25.6616 li
125.817 25.6616 li
125.817 27.6333 li
cp
f
134.96 27.6333 mo
128.68 27.6333 li
128.68 25.6616 li
134.96 25.6616 li
134.96 27.6333 li
cp
f
34.3813 30.8193 mo
28.1011 30.8193 li
28.1011 28.8477 li
34.3813 28.8477 li
34.3813 30.8193 li
cp
f
43.5249 30.8193 mo
37.2446 30.8193 li
37.2446 28.8477 li
43.5249 28.8477 li
43.5249 30.8193 li
cp
f
52.6685 30.8193 mo
46.3882 30.8193 li
46.3882 28.8477 li
52.6685 28.8477 li
52.6685 30.8193 li
cp
f
61.812 30.8193 mo
55.5317 30.8193 li
55.5317 28.8477 li
61.812 28.8477 li
61.812 30.8193 li
cp
f
70.9556 30.8193 mo
64.6753 30.8193 li
64.6753 28.8477 li
70.9556 28.8477 li
70.9556 30.8193 li
cp
f
80.0991 30.8193 mo
73.8188 30.8193 li
73.8188 28.8477 li
80.0991 28.8477 li
80.0991 30.8193 li
cp
f
89.2427 30.8193 mo
82.9624 30.8193 li
82.9624 28.8477 li
89.2427 28.8477 li
89.2427 30.8193 li
cp
f
98.3862 30.8193 mo
92.106 30.8193 li
92.106 28.8477 li
98.3862 28.8477 li
98.3862 30.8193 li
cp
f
107.53 30.8193 mo
101.25 30.8193 li
101.25 28.8477 li
107.53 28.8477 li
107.53 30.8193 li
cp
f
116.673 30.8193 mo
110.393 30.8193 li
110.393 28.8477 li
116.673 28.8477 li
116.673 30.8193 li
cp
f
125.817 30.8193 mo
119.537 30.8193 li
119.537 28.8477 li
125.817 28.8477 li
125.817 30.8193 li
cp
f
134.96 30.8193 mo
128.68 30.8193 li
128.68 28.8477 li
134.96 28.8477 li
134.96 30.8193 li
cp
f
34.3813 34.0049 mo
28.1011 34.0049 li
28.1011 32.0332 li
34.3813 32.0332 li
34.3813 34.0049 li
cp
f
43.5249 34.0049 mo
37.2446 34.0049 li
37.2446 32.0332 li
43.5249 32.0332 li
43.5249 34.0049 li
cp
f
52.6685 34.0049 mo
46.3882 34.0049 li
46.3882 32.0332 li
52.6685 32.0332 li
52.6685 34.0049 li
cp
f
61.812 34.0049 mo
55.5317 34.0049 li
55.5317 32.0332 li
61.812 32.0332 li
61.812 34.0049 li
cp
f
70.9556 34.0049 mo
64.6753 34.0049 li
64.6753 32.0332 li
70.9556 32.0332 li
70.9556 34.0049 li
cp
f
80.0991 34.0049 mo
73.8188 34.0049 li
73.8188 32.0332 li
80.0991 32.0332 li
80.0991 34.0049 li
cp
f
89.2427 34.0049 mo
82.9624 34.0049 li
82.9624 32.0332 li
89.2427 32.0332 li
89.2427 34.0049 li
cp
f
98.3862 34.0049 mo
92.106 34.0049 li
92.106 32.0332 li
98.3862 32.0332 li
98.3862 34.0049 li
cp
f
107.53 34.0049 mo
101.25 34.0049 li
101.25 32.0332 li
107.53 32.0332 li
107.53 34.0049 li
cp
f
116.673 34.0049 mo
110.393 34.0049 li
110.393 32.0332 li
116.673 32.0332 li
116.673 34.0049 li
cp
f
125.817 34.0049 mo
119.537 34.0049 li
119.537 32.0332 li
125.817 32.0332 li
125.817 34.0049 li
cp
f
134.96 34.0049 mo
128.68 34.0049 li
128.68 32.0332 li
134.96 32.0332 li
134.96 34.0049 li
cp
f
34.3813 37.1909 mo
28.1011 37.1909 li
28.1011 35.2192 li
34.3813 35.2192 li
34.3813 37.1909 li
cp
f
43.5249 37.1909 mo
37.2446 37.1909 li
37.2446 35.2192 li
43.5249 35.2192 li
43.5249 37.1909 li
cp
f
52.6685 37.1909 mo
46.3882 37.1909 li
46.3882 35.2192 li
52.6685 35.2192 li
52.6685 37.1909 li
cp
f
61.812 37.1909 mo
55.5317 37.1909 li
55.5317 35.2192 li
61.812 35.2192 li
61.812 37.1909 li
cp
f
70.9556 37.1909 mo
64.6753 37.1909 li
64.6753 35.2192 li
70.9556 35.2192 li
70.9556 37.1909 li
cp
f
80.0991 37.1909 mo
73.8188 37.1909 li
73.8188 35.2192 li
80.0991 35.2192 li
80.0991 37.1909 li
cp
f
89.2427 37.1909 mo
82.9624 37.1909 li
82.9624 35.2192 li
89.2427 35.2192 li
89.2427 37.1909 li
cp
f
98.3862 37.1909 mo
92.106 37.1909 li
92.106 35.2192 li
98.3862 35.2192 li
98.3862 37.1909 li
cp
f
107.53 37.1909 mo
101.25 37.1909 li
101.25 35.2192 li
107.53 35.2192 li
107.53 37.1909 li
cp
f
116.673 37.1909 mo
110.393 37.1909 li
110.393 35.2192 li
116.673 35.2192 li
116.673 37.1909 li
cp
f
125.817 37.1909 mo
119.537 37.1909 li
119.537 35.2192 li
125.817 35.2192 li
125.817 37.1909 li
cp
f
134.96 37.1909 mo
128.68 37.1909 li
128.68 35.2192 li
134.96 35.2192 li
134.96 37.1909 li
cp
f
34.3813 40.3765 mo
28.1011 40.3765 li
28.1011 38.4048 li
34.3813 38.4048 li
34.3813 40.3765 li
cp
f
43.5249 40.3765 mo
37.2446 40.3765 li
37.2446 38.4048 li
43.5249 38.4048 li
43.5249 40.3765 li
cp
f
52.6685 40.3765 mo
46.3882 40.3765 li
46.3882 38.4048 li
52.6685 38.4048 li
52.6685 40.3765 li
cp
f
61.812 40.3765 mo
55.5317 40.3765 li
55.5317 38.4048 li
61.812 38.4048 li
61.812 40.3765 li
cp
f
70.9556 40.3765 mo
64.6753 40.3765 li
64.6753 38.4048 li
70.9556 38.4048 li
70.9556 40.3765 li
cp
f
80.0991 40.3765 mo
73.8188 40.3765 li
73.8188 38.4048 li
80.0991 38.4048 li
80.0991 40.3765 li
cp
f
89.2427 40.3765 mo
82.9624 40.3765 li
82.9624 38.4048 li
89.2427 38.4048 li
89.2427 40.3765 li
cp
f
98.3862 40.3765 mo
92.106 40.3765 li
92.106 38.4048 li
98.3862 38.4048 li
98.3862 40.3765 li
cp
f
107.53 40.3765 mo
101.25 40.3765 li
101.25 38.4048 li
107.53 38.4048 li
107.53 40.3765 li
cp
f
116.673 40.3765 mo
110.393 40.3765 li
110.393 38.4048 li
116.673 38.4048 li
116.673 40.3765 li
cp
f
125.817 40.3765 mo
119.537 40.3765 li
119.537 38.4048 li
125.817 38.4048 li
125.817 40.3765 li
cp
f
134.96 40.3765 mo
128.68 40.3765 li
128.68 38.4048 li
134.96 38.4048 li
134.96 40.3765 li
cp
f
34.3813 43.5625 mo
28.1011 43.5625 li
28.1011 41.5908 li
34.3813 41.5908 li
34.3813 43.5625 li
cp
f
43.5249 43.5625 mo
37.2446 43.5625 li
37.2446 41.5908 li
43.5249 41.5908 li
43.5249 43.5625 li
cp
f
52.6685 43.5625 mo
46.3882 43.5625 li
46.3882 41.5908 li
52.6685 41.5908 li
52.6685 43.5625 li
cp
f
61.812 43.5625 mo
55.5317 43.5625 li
55.5317 41.5908 li
61.812 41.5908 li
61.812 43.5625 li
cp
f
70.9556 43.5625 mo
64.6753 43.5625 li
64.6753 41.5908 li
70.9556 41.5908 li
70.9556 43.5625 li
cp
f
80.0991 43.5625 mo
73.8188 43.5625 li
73.8188 41.5908 li
80.0991 41.5908 li
80.0991 43.5625 li
cp
f
89.2427 43.5625 mo
82.9624 43.5625 li
82.9624 41.5908 li
89.2427 41.5908 li
89.2427 43.5625 li
cp
f
98.3862 43.5625 mo
92.106 43.5625 li
92.106 41.5908 li
98.3862 41.5908 li
98.3862 43.5625 li
cp
f
107.53 43.5625 mo
101.25 43.5625 li
101.25 41.5908 li
107.53 41.5908 li
107.53 43.5625 li
cp
f
116.673 43.5625 mo
110.393 43.5625 li
110.393 41.5908 li
116.673 41.5908 li
116.673 43.5625 li
cp
f
125.817 43.5625 mo
119.537 43.5625 li
119.537 41.5908 li
125.817 41.5908 li
125.817 43.5625 li
cp
f
134.96 43.5625 mo
128.68 43.5625 li
128.68 41.5908 li
134.96 41.5908 li
134.96 43.5625 li
cp
f
151.582 33.6265 mo
141.274 33.6265 li
141.274 31.4292 li
149.618 31.4292 li
151.582 33.6265 li
cp
f
154.38 36.7563 mo
152.416 34.5601 li
146.011 34.5601 li
141.274 34.5601 li
141.274 36.7563 li
146.011 36.7563 li
154.38 36.7563 li
cp
f
157.177 39.8867 mo
155.214 37.6904 li
150.748 37.6904 li
141.274 37.6904 li
141.274 39.8867 li
150.748 39.8867 li
157.177 39.8867 li
cp
f
158.012 40.8203 mo
155.484 40.8203 li
141.274 40.8203 li
141.274 43.0166 li
155.484 43.0166 li
159.976 43.0166 li
158.012 40.8203 li
cp
f
4.07229 47.895 mo
4.07229 51.8355 li
4.07229 51.9507 4.02932 52.0605 3.95259 52.1465 cv
1.53659 54.8437 0 58.8897 0 63.4146 cv
0 64.5454 .096653 65.6455 .277851 66.7026 cv
.314497 66.9165 .502981 67.0698 .71879 67.0698 cv
170.801 67.0698 li
170.851 66.9726 li
171.588 65.5019 172.675 64.2339 174.016 63.2803 cv
198.861 44.0918 li
199.259 43.7847 199.033 43.148 198.531 43.1602 cv
140.588 47.7896 li
4.33739 47.624 li
4.18994 47.6274 4.07229 47.7476 4.07229 47.895 cv
.0823529 .627451 .788235 rgb
f
0 63.4146 mo
0 64.5454 .096653 65.6455 .277851 66.7026 cv
.314497 66.9165 .502981 67.0698 .71879 67.0698 cv
170.801 67.0698 li
170.851 66.9726 li
171.588 65.5019 172.675 64.2339 174.016 63.2803 cv
0 63.4146 li
.929412 .611765 .596078 rgb
f
192.329 43.6557 mo
192.345 43.6495 li
198.531 43.1602 li
192.329 43.6557 li
1 1 1 rgb
f
142.405 63.3047 mo
192.329 43.6557 li
198.531 43.1602 li
198.536 43.1601 198.541 43.16 198.545 43.16 cv
198.863 43.16 199.066 43.4207 199.065 43.6875 cv
199.064 43.8347 199.001 43.9837 198.861 44.0918 cv
174.016 63.2803 li
174.016 63.2803 li
142.405 63.3047 li
.541176 .815686 .894118 rgb
f
170.801 67.0698 mo
132.838 67.0698 li
142.405 63.3047 li
174.016 63.2803 li
172.675 64.2339 171.588 65.5019 170.851 66.9726 cv
170.801 67.0698 li
.964706 .807843 .8 rgb
f
70.9556 20.3931 mo
29.5327 20.3931 li
29.5327 18.2275 33.4805 12.2134 43.5249 12.2134 cv
54.9629 12.2134 70.9556 18.7905 70.9556 20.3931 cv
cp
.2 .431373 .482353 rgb
f
83.0664 7.16358 mo
76.9345 7.16358 li
81.9126 20.393 li
88.0449 20.393 li
83.0664 7.16358 li
f
88.0449 20.393 mo
81.9126 20.393 li
83.0664 7.16358 li
88.0449 20.393 li
.6 .717647 .741176 rgb
f
91.3003 7.16358 mo
85.1685 7.16358 li
90.1475 20.393 li
96.2793 20.393 li
91.3003 7.16358 li
.2 .431373 .482353 rgb
f
99.5352 7.16358 mo
93.4034 7.16358 li
98.3823 20.393 li
104.514 20.393 li
99.5352 7.16358 li
f
134.96 17.6401 mo
107.53 17.6401 li
107.53 20.3931 li
134.96 20.3931 li
134.96 17.6401 li
cp
f
124.348 14.9854 mo
107.53 14.9854 li
107.53 17.6401 li
124.348 17.6401 li
124.348 14.9854 li
cp
.301961 .74902 .85098 rgb
f
96.2793 20.393 mo
90.1475 20.393 li
91.3003 7.16358 li
96.2793 20.393 li
.6 .717647 .741176 rgb
f
104.518 20.393 mo
104.514 20.393 li
99.5387 7.17305 li
99.5396 7.16358 li
104.518 20.393 li
1 1 1 rgb
f
104.518 20.393 mo
98.3862 20.393 li
104.514 20.393 li
104.518 20.393 li
.898039 .964706 .980392 rgb
f
104.514 20.393 mo
98.3862 20.393 li
99.5387 7.17305 li
104.514 20.393 li
.6 .717647 .741176 rgb
f
34.8643 47.729 mo
28.874 47.729 li
28.4487 47.729 28.1011 47.3813 28.1011 46.9561 cv
28.1011 45.5986 li
28.1011 45.1733 28.4487 44.8257 28.874 44.8257 cv
34.8643 44.8257 li
35.2896 44.8257 35.6372 45.1733 35.6372 45.5986 cv
35.6372 46.9561 li
35.6372 47.3813 35.2896 47.729 34.8643 47.729 cv
cp
1 .6 0 rgb
f
44.0078 47.7295 mo
38.0176 47.7295 li
37.5923 47.7295 37.2446 47.3813 37.2446 46.9561 cv
37.2446 45.5986 li
37.2446 45.1733 37.5923 44.8257 38.0176 44.8257 cv
44.0078 44.8257 li
44.4331 44.8257 44.7808 45.1733 44.7808 45.5986 cv
44.7808 46.9561 li
44.7808 47.3813 44.4331 47.7295 44.0078 47.7295 cv
cp
f
53.1514 47.7295 mo
47.1611 47.7295 li
46.7358 47.7295 46.3882 47.3813 46.3882 46.9561 cv
46.3882 45.5986 li
46.3882 45.1733 46.7358 44.8257 47.1611 44.8257 cv
53.1514 44.8257 li
53.5767 44.8257 53.9243 45.1733 53.9243 45.5986 cv
53.9243 46.9561 li
53.9243 47.3813 53.5767 47.7295 53.1514 47.7295 cv
cp
f
62.2949 47.7295 mo
56.3047 47.7295 li
55.8794 47.7295 55.5317 47.3813 55.5317 46.9561 cv
55.5317 45.5986 li
55.5317 45.1733 55.8794 44.8257 56.3047 44.8257 cv
62.2949 44.8257 li
62.7202 44.8257 63.0679 45.1733 63.0679 45.5986 cv
63.0679 46.9561 li
63.0679 47.3813 62.7202 47.7295 62.2949 47.7295 cv
cp
f
71.4385 47.7295 mo
65.4482 47.7295 li
65.0229 47.7295 64.6753 47.3813 64.6753 46.9561 cv
64.6753 45.5986 li
64.6753 45.1733 65.0229 44.8257 65.4482 44.8257 cv
71.4385 44.8257 li
71.8638 44.8257 72.2114 45.1733 72.2114 45.5986 cv
72.2114 46.9561 li
72.2114 47.3813 71.8638 47.7295 71.4385 47.7295 cv
cp
f
80.582 47.7295 mo
74.5918 47.7295 li
74.1665 47.7295 73.8188 47.3813 73.8188 46.9561 cv
73.8188 45.5986 li
73.8188 45.1733 74.1665 44.8257 74.5918 44.8257 cv
80.582 44.8257 li
81.0073 44.8257 81.355 45.1733 81.355 45.5986 cv
81.355 46.9561 li
81.355 47.3813 81.0073 47.7295 80.582 47.7295 cv
cp
f
89.7256 47.7295 mo
83.7354 47.7295 li
83.3101 47.7295 82.9624 47.3813 82.9624 46.9561 cv
82.9624 45.5986 li
82.9624 45.1733 83.3101 44.8257 83.7354 44.8257 cv
89.7256 44.8257 li
90.1509 44.8257 90.4985 45.1733 90.4985 45.5986 cv
90.4985 46.9561 li
90.4985 47.3813 90.1509 47.7295 89.7256 47.7295 cv
cp
f
98.8691 47.7295 mo
92.8789 47.7295 li
92.4536 47.7295 92.106 47.3813 92.106 46.9561 cv
92.106 45.5986 li
92.106 45.1733 92.4536 44.8257 92.8789 44.8257 cv
98.8691 44.8257 li
99.2944 44.8257 99.6421 45.1733 99.6421 45.5986 cv
99.6421 46.9561 li
99.6421 47.3813 99.2944 47.7295 98.8691 47.7295 cv
cp
f
108.013 47.7295 mo
102.022 47.7295 li
101.597 47.7295 101.25 47.3813 101.25 46.9561 cv
101.25 45.5986 li
101.25 45.1733 101.597 44.8257 102.022 44.8257 cv
108.013 44.8257 li
108.438 44.8257 108.786 45.1733 108.786 45.5986 cv
108.786 46.9561 li
108.786 47.3813 108.438 47.7295 108.013 47.7295 cv
cp
f
117.156 47.7295 mo
111.166 47.7295 li
110.741 47.7295 110.393 47.3813 110.393 46.9561 cv
110.393 45.5986 li
110.393 45.1733 110.741 44.8257 111.166 44.8257 cv
117.156 44.8257 li
117.582 44.8257 117.929 45.1733 117.929 45.5986 cv
117.929 46.9561 li
117.929 47.3813 117.582 47.7295 117.156 47.7295 cv
cp
f
126.3 47.7295 mo
120.31 47.7295 li
119.884 47.7295 119.537 47.3813 119.537 46.9561 cv
119.537 45.5986 li
119.537 45.1733 119.884 44.8257 120.31 44.8257 cv
126.3 44.8257 li
126.725 44.8257 127.073 45.1733 127.073 45.5986 cv
127.073 46.9561 li
127.073 47.3813 126.725 47.7295 126.3 47.7295 cv
cp
f
135.443 47.7295 mo
129.453 47.7295 li
129.028 47.7295 128.68 47.3813 128.68 46.9561 cv
128.68 45.5986 li
128.68 45.1733 129.028 44.8257 129.453 44.8257 cv
135.443 44.8257 li
135.869 44.8257 136.216 45.1733 136.216 45.5986 cv
136.216 46.9561 li
136.216 47.3813 135.869 47.7295 135.443 47.7295 cv
cp
f
33.7036 53.4351 mo
33.7036 54.9819 32.4487 56.2358 30.9019 56.2358 cv
29.355 56.2358 28.1011 54.9819 28.1011 53.4351 cv
28.1011 51.8872 29.355 50.6333 30.9019 50.6333 cv
32.4487 50.6333 33.7036 51.8872 33.7036 53.4351 cv
cp
.584314 .847059 .913725 rgb
f
42.8472 53.4351 mo
42.8472 54.9819 41.5923 56.2358 40.0454 56.2358 cv
38.4985 56.2358 37.2446 54.9819 37.2446 53.4351 cv
37.2446 51.8872 38.4985 50.6333 40.0454 50.6333 cv
41.5923 50.6333 42.8472 51.8872 42.8472 53.4351 cv
cp
f
51.9902 53.4351 mo
51.9902 54.9819 50.7363 56.2358 49.189 56.2358 cv
47.6421 56.2358 46.3882 54.9819 46.3882 53.4351 cv
46.3882 51.8872 47.6421 50.6333 49.189 50.6333 cv
50.7363 50.6333 51.9902 51.8872 51.9902 53.4351 cv
cp
f
61.1338 53.4351 mo
61.1338 54.9819 59.8799 56.2358 58.3325 56.2358 cv
56.7856 56.2358 55.5317 54.9819 55.5317 53.4351 cv
55.5317 51.8872 56.7856 50.6333 58.3325 50.6333 cv
59.8799 50.6333 61.1338 51.8872 61.1338 53.4351 cv
cp
f
70.2773 53.4351 mo
70.2773 54.9819 69.0234 56.2358 67.4761 56.2358 cv
65.9292 56.2358 64.6753 54.9819 64.6753 53.4351 cv
64.6753 51.8872 65.9292 50.6333 67.4761 50.6333 cv
69.0234 50.6333 70.2773 51.8872 70.2773 53.4351 cv
cp
f
79.4209 53.4351 mo
79.4209 54.9819 78.167 56.2358 76.6201 56.2358 cv
75.0728 56.2358 73.8188 54.9819 73.8188 53.4351 cv
73.8188 51.8872 75.0728 50.6333 76.6201 50.6333 cv
78.167 50.6333 79.4209 51.8872 79.4209 53.4351 cv
cp
f
88.5645 53.4351 mo
88.5645 54.9819 87.3105 56.2358 85.7637 56.2358 cv
84.2163 56.2358 82.9624 54.9819 82.9624 53.4351 cv
82.9624 51.8872 84.2163 50.6333 85.7637 50.6333 cv
87.3105 50.6333 88.5645 51.8872 88.5645 53.4351 cv
cp
f
97.708 53.4351 mo
97.708 54.9819 96.4541 56.2358 94.9072 56.2358 cv
93.3599 56.2358 92.106 54.9819 92.106 53.4351 cv
92.106 51.8872 93.3599 50.6333 94.9072 50.6333 cv
96.4541 50.6333 97.708 51.8872 97.708 53.4351 cv
cp
f
106.852 53.4351 mo
106.852 54.9819 105.598 56.2358 104.051 56.2358 cv
102.503 56.2358 101.25 54.9819 101.25 53.4351 cv
101.25 51.8872 102.503 50.6333 104.051 50.6333 cv
105.598 50.6333 106.852 51.8872 106.852 53.4351 cv
cp
f
115.996 53.4351 mo
115.996 54.9819 114.741 56.2358 113.194 56.2358 cv
111.647 56.2358 110.393 54.9819 110.393 53.4351 cv
110.393 51.8872 111.647 50.6333 113.194 50.6333 cv
114.741 50.6333 115.996 51.8872 115.996 53.4351 cv
cp
f
125.14 53.4351 mo
125.14 54.9819 123.885 56.2358 122.338 56.2358 cv
120.791 56.2358 119.537 54.9819 119.537 53.4351 cv
119.537 51.8872 120.791 50.6333 122.338 50.6333 cv
123.885 50.6333 125.14 51.8872 125.14 53.4351 cv
cp
f
134.282 53.4351 mo
134.282 54.9819 133.028 56.2358 131.481 56.2358 cv
129.935 56.2358 128.68 54.9819 128.68 53.4351 cv
128.68 51.8872 129.935 50.6333 131.481 50.6333 cv
133.028 50.6333 134.282 51.8872 134.282 53.4351 cv
cp
f
143.426 53.4351 mo
143.426 54.9819 142.172 56.2358 140.625 56.2358 cv
139.078 56.2358 137.824 54.9819 137.824 53.4351 cv
137.824 51.8872 139.078 50.6333 140.625 50.6333 cv
142.172 50.6333 143.426 51.8872 143.426 53.4351 cv
cp
f
139.577 48.9766 mo
4.07227 48.9766 li
4.07227 47.4946 li
139.577 47.4946 li
139.577 48.9766 li
cp
.537255 .411765 .368627 rgb
f
302.528 106.217 mo
299.127 106.337 li
299.066 106.339 li
237.705 108.5 li
237.596 108.542 li
230.657 114.3 li
230.634 114.55 li
230.771 114.615 li
230.884 114.575 li
237.778 108.854 li
245.433 108.585 li
242.65 114.661 li
242.738 114.896 li
242.811 114.913 li
242.973 114.81 li
245.786 108.671 li
245.797 108.572 li
253.061 108.316 li
250.289 114.362 li
250.25 114.453 250.287 114.558 250.375 114.599 cv
250.453 114.615 li
250.615 114.511 li
253.426 108.374 li
253.441 108.302 li
260.686 108.047 li
257.929 114.064 li
258.017 114.301 li
258.09 114.317 li
258.252 114.212 li
261.065 108.075 li
261.075 108.034 li
268.313 107.779 li
265.57 113.765 li
265.656 114.002 li
265.732 114.019 li
265.892 113.914 li
268.706 107.778 li
268.708 107.764 li
275.938 107.51 li
273.208 113.468 li
273.296 113.703 li
273.37 113.719 li
273.533 113.617 li
276.336 107.496 li
283.566 107.242 li
280.849 113.17 li
280.936 113.406 li
281.011 113.422 li
281.172 113.318 li
283.963 107.228 li
291.191 106.973 li
288.488 112.872 li
288.577 113.108 li
288.65 113.124 li
288.812 113.02 li
291.588 106.959 li
298.817 106.704 li
296.128 112.572 li
296.087 112.663 296.125 112.768 296.215 112.809 cv
296.29 112.825 li
296.453 112.721 li
299.215 106.69 li
302.541 106.572 li
302.638 106.569 302.715 106.487 302.711 106.389 cv
302.708 106.29 302.617 106.208 302.528 106.217 cv
cp
.615686 .615686 .611765 rgb
f
160.654 139.66 mo
160.654 139.66 248.256 142.884 269.158 135.6 cv
290.057 128.317 302.534 112.318 302.534 112.318 cv
235.921 113.8 li
171.486 119.051 li
163.295 126.449 li
150.613 130.148 li
150.613 133.843 li
162.767 133.848 li
160.654 139.66 li
.301961 .301961 .301961 rgb
f
235.411 139.738 mo
249.979 139.088 262.725 137.842 269.158 135.6 cv
290.057 128.317 302.534 112.318 302.534 112.318 cv
302.534 112.318 281.133 124.183 269.539 129.658 cv
257.945 135.133 235.411 139.738 235.411 139.738 cv
cp
.2 .2 .2 rgb
f
204.331 96.8901 mo
183.294 118.089 li
194.398 117.185 li
207.836 101.392 li
225.366 98.46 li
225.366 96.3447 li
204.331 96.8901 li
cp
.6 .6 .6 rgb
f
169.542 120.806 mo
235.719 116.169 li
300.764 114.379 li
299.759 115.462 li
235.773 117.237 li
168.26 121.965 li
169.542 120.806 li
cp
.854902 .854902 .854902 rgb
f
171.486 119.051 mo
235.921 113.8 li
302.534 112.318 li
301.543 113.397 li
236.095 115.119 li
170.586 119.863 li
171.486 119.051 li
.6 .6 .6 rgb
f
282.781 129.138 mo
162.767 133.848 li
162.299 135.133 li
270.454 135.133 li
270.454 135.133 274.219 133.716 276.738 132.414 cv
279.388 131.218 282.781 129.138 282.781 129.138 cv
cp
.501961 .501961 .501961 rgb
f
243.481 120.261 mo
243.481 120.883 241.491 121.388 239.034 121.388 cv
236.579 121.388 234.588 120.883 234.588 120.261 cv
234.588 119.637 236.579 119.133 239.034 119.133 cv
241.491 119.133 243.481 119.637 243.481 120.261 cv
cp
.698039 .698039 .698039 rgb
f
256.621 120.261 mo
256.621 120.883 254.63 121.388 252.172 121.388 cv
249.717 121.388 247.725 120.883 247.725 120.261 cv
247.725 119.637 249.717 119.133 252.172 119.133 cv
254.63 119.133 256.621 119.637 256.621 120.261 cv
cp
f
197.764 116.972 mo
197.764 116.972 201.706 113.155 206.193 110.61 cv
210.676 108.064 217.673 106.014 217.673 106.014 cv
228.516 114.394 li
197.764 116.972 li
.211765 .662745 .882353 rgb
f
197.764 116.972 mo
197.764 116.972 201.706 113.155 206.193 110.61 cv
210.676 108.064 217.673 106.014 217.673 106.014 cv
209.47 115.989 li
197.764 116.972 li
cp
.584314 .847059 .913725 rgb
f
217.645 114.948 mo
220.876 108.956 li
222.541 110.149 li
220.052 114.778 li
217.645 114.948 li
.490196 .788235 .917647 rgb
f
225.366 97.0923 mo
203.387 97.8403 li
204.331 96.8901 li
225.366 96.3447 li
225.366 97.0923 li
cp
.698039 .698039 .698039 rgb
f
206.093 96.8438 mo
204.331 96.8901 li
183.294 118.089 li
185.873 117.878 li
206.093 96.8438 li
cp
f
272.341 128.304 mo
150.613 130.148 li
163.295 126.449 li
280.958 123.926 li
272.341 128.304 li
cp
.2 .2 .2 rgb
f
16.3755 300.227 mo
16.3755 300.227 23.3511 319.684 28.2407 322.952 cv
36.8579 328.712 90.1284 330.251 100.704 325.038 cv
104.628 323.103 114.257 301.579 114.257 301.579 cv
114.257 301.579 91.1157 306.874 65.5151 306.874 cv
39.9136 306.874 16.3755 300.227 16.3755 300.227 cv
cp
.792157 .619608 .403922 rgb
f
16.3755 300.227 mo
16.3755 300.227 23.3511 319.684 28.2407 322.952 cv
30.2524 324.298 34.6987 325.411 40.4663 326.265 cv
40.4663 326.265 32.8325 321.159 28.4194 316.585 cv
24.0083 312.011 16.3755 300.227 16.3755 300.227 cv
cp
.694118 .498039 .290196 rgb
f
68.8511 328.195 mo
80.4224 328.026 96.6802 327.021 100.704 325.038 cv
104.628 323.103 114.257 301.579 114.257 301.579 cv
114.257 301.579 102.307 311.69 96.5874 316.022 cv
90.8657 320.354 68.8511 328.195 68.8511 328.195 cv
cp
f
64.0435 310.328 mo
49.3804 310.328 34.7358 308.732 20.4468 305.574 cv
20.2261 305.526 20.0864 305.308 20.1353 305.087 cv
20.1841 304.866 20.4048 304.728 20.6235 304.774 cv
36.1558 308.208 52.1147 309.788 68.0542 309.47 cv
77.6626 309.278 94.0464 308.085 108.99 305.851 cv
109.214 305.817 109.422 305.972 109.455 306.194 cv
109.488 306.418 109.333 306.626 109.111 306.66 cv
94.1323 308.899 77.7056 310.097 68.0718 310.288 cv
66.729 310.315 65.3843 310.328 64.0435 310.328 cv
cp
.576471 .376471 .215686 rgb
f
17.5015 300.882 mo
17.2622 300.833 17.1118 300.614 17.1636 300.394 cv
17.2173 300.173 17.4556 300.035 17.6929 300.083 cv
34.5161 303.517 51.9507 305.594 69.2173 305.835 cv
79.8423 305.983 97.2173 303.393 113.404 301.158 cv
113.647 301.124 113.871 301.278 113.908 301.502 cv
113.943 301.726 113.774 301.925 113.535 301.967 cv
97.6099 304.767 78.2378 307.35 67.6997 307.169 cv
47.5317 306.823 32.978 304.04 17.5015 300.882 cv
cp
f
107.968 309.658 mo
107.933 309.435 107.724 309.282 107.501 309.315 cv
93.1011 311.55 77.3159 312.743 68.0601 312.936 cv
52.7017 313.252 37.3257 311.674 22.3618 308.241 cv
22.1431 308.191 21.9224 308.328 21.8716 308.548 cv
21.8296 308.728 21.8931 309.11 21.8647 309.232 cv
21.8149 309.452 21.9517 309.673 22.1724 309.723 cv
35.9429 312.882 50.0581 314.478 64.189 314.478 cv
65.4829 314.478 66.7769 314.464 68.0698 314.438 cv
77.354 314.245 93.1841 313.049 107.621 310.809 cv
107.844 310.774 107.997 310.565 107.961 310.341 cv
107.941 310.207 107.996 309.836 107.968 309.658 cv
cp
f
106.479 313.121 mo
106.442 312.897 106.232 312.745 106.01 312.782 cv
92.2241 315.017 77.1108 316.209 68.2485 316.401 cv
53.5464 316.718 38.8276 315.14 24.5015 311.708 cv
24.2808 311.655 24.061 311.791 24.0083 312.011 cv
23.9653 312.19 24.0366 312.575 24.0083 312.694 cv
23.9556 312.915 24.0913 313.135 24.3101 313.188 cv
37.4985 316.347 51.0161 317.944 64.5503 317.944 cv
65.7886 317.944 67.0278 317.931 68.2661 317.903 cv
77.1577 317.711 92.3169 316.515 106.14 314.274 cv
106.364 314.238 106.515 314.028 106.479 313.805 cv
106.457 313.669 106.506 313.298 106.479 313.121 cv
cp
f
105.265 316.584 mo
105.227 316.361 105.017 316.212 104.793 316.248 cv
91.4731 318.481 76.8696 319.675 68.3071 319.866 cv
54.1021 320.183 39.8813 318.604 26.0386 315.175 cv
25.8188 315.12 25.5972 315.253 25.5435 315.474 cv
25.4985 315.652 25.5728 316.039 25.5435 316.157 cv
25.4888 316.376 25.6226 316.599 25.8423 316.652 cv
38.5874 319.812 51.6519 321.408 64.7319 321.408 cv
65.9292 321.408 67.1284 321.396 68.3257 321.368 cv
76.9175 321.177 91.5688 319.979 104.928 317.739 cv
105.151 317.702 105.301 317.491 105.265 317.269 cv
105.243 317.134 105.294 316.762 105.265 316.584 cv
cp
f
102.554 320.046 mo
102.515 319.823 102.303 319.675 102.081 319.714 cv
89.5386 321.947 75.7905 323.141 67.728 323.332 cv
54.356 323.649 40.9673 322.071 27.937 318.642 cv
27.7183 318.583 27.4937 318.714 27.436 318.933 cv
27.3911 319.103 27.4585 320.091 27.436 320.176 cv
27.3784 320.395 27.5093 320.618 27.728 320.677 cv
39.7339 323.837 52.0425 325.434 64.3638 325.434 cv
65.4917 325.434 66.6196 325.421 67.7476 325.394 cv
75.8413 325.201 89.6401 324.004 102.223 321.763 cv
102.447 321.724 102.593 321.512 102.554 321.289 cv
102.538 321.191 102.583 320.21 102.554 320.046 cv
cp
f
76.3706 328.798 mo
71.2983 328.798 64.7817 328.736 61.9478 328.699 cv
61.27 328.69 60.5034 328.698 59.7632 328.706 cv
58.9321 328.714 58.0728 328.722 57.3022 328.709 cv
50.147 328.579 42.0376 328.433 34.3882 326.126 cv
30.9507 325.089 27.9175 324.04 25.6079 321.694 cv
23.5923 319.647 22.2729 316.763 21.1099 314.217 cv
20.9106 313.782 li
20.1958 312.222 19.606 310.366 18.9829 308.401 cv
17.8823 304.933 16.7427 301.347 14.8599 299.29 cv
14.5044 298.901 14.5317 298.298 14.9204 297.942 cv
15.3091 297.586 15.9116 297.612 16.2681 298.001 cv
18.4351 300.368 19.6382 304.159 20.8032 307.823 cv
21.4077 309.73 21.98 311.532 22.647 312.987 cv
22.8472 313.423 li
23.9438 315.825 25.189 318.548 26.9692 320.355 cv
28.9614 322.38 31.7573 323.339 34.9399 324.298 cv
42.3345 326.528 50.3052 326.673 57.3374 326.8 cv
58.0796 326.813 58.9253 326.804 59.7437 326.796 cv
60.4956 326.788 61.2729 326.78 61.9712 326.79 cv
67.1479 326.858 80.4614 326.961 82.689 326.81 cv
83.7651 326.735 84.8853 326.692 85.9683 326.649 cv
87.0376 326.608 88.144 326.565 89.1919 326.493 cv
92.6216 326.261 96.9624 325.755 100.133 323.899 cv
103.46 321.95 105.13 318.366 106.898 314.573 cv
107.181 313.966 107.463 313.36 107.752 312.763 cv
108.945 310.296 109.761 308.627 110.577 306.959 cv
111.392 305.293 112.208 303.627 113.398 301.163 cv
113.626 300.688 114.198 300.489 114.673 300.72 cv
115.148 300.948 115.347 301.52 115.117 301.993 cv
113.924 304.462 113.108 306.13 112.292 307.798 cv
111.477 309.464 110.663 311.13 109.471 313.594 cv
109.186 314.183 108.907 314.78 108.629 315.379 cv
106.815 319.272 104.94 323.298 101.098 325.546 cv
97.5835 327.604 92.9575 328.151 89.3218 328.399 cv
88.2456 328.472 87.1255 328.515 86.0425 328.558 cv
84.9731 328.6 83.8667 328.644 82.8188 328.714 cv
81.9146 328.775 79.4009 328.798 76.3706 328.798 cv
cp
.490196 .305882 .141176 rgb
f
64.5669 309.853 mo
62.8296 309.853 60.9556 309.479 59.7612 308.437 cv
59.2212 307.964 58.6401 307.419 58.1255 306.927 cv
56.0337 308.442 53.4565 309.063 51.186 308.591 cv
50.3267 308.413 49.5093 308.087 48.7212 307.771 cv
47.7417 307.378 46.4175 306.849 45.4214 306.047 cv
45.2026 306.165 44.9692 306.299 44.7251 306.438 cv
43.5933 307.086 42.311 307.819 41.1577 307.82 cv
39.7954 307.817 36.6245 307.823 34.6675 306.782 cv
33.4253 306.122 31.7729 305.132 31.2808 303.953 cv
29.814 304.472 28.4692 304.887 27.0532 304.894 cv
26.5903 304.896 li
24.8081 304.911 22.9663 304.925 21.272 304.171 cv
20.2534 303.716 19.1235 302.624 17.9116 300.923 cv
17.8247 300.8 17.8521 300.63 17.9761 300.542 cv
18.0991 300.454 18.269 300.483 18.356 300.606 cv
19.4937 302.204 20.5786 303.265 21.4937 303.672 cv
23.0796 304.379 24.7837 304.364 26.5864 304.352 cv
27.0503 304.348 li
28.4634 304.342 29.8384 303.891 31.3589 303.347 cv
31.5806 303.362 li
31.7173 303.538 li
31.9146 304.346 32.9937 305.275 34.9224 306.301 cv
36.7603 307.278 39.8403 307.272 41.1567 307.274 cv
42.1665 307.272 43.3813 306.579 44.4546 305.965 cv
44.7632 305.788 45.0552 305.621 45.3286 305.479 cv
45.4282 305.428 45.5493 305.44 45.6333 305.514 cv
46.5737 306.323 47.9312 306.866 48.9233 307.263 cv
49.6909 307.571 50.4849 307.888 51.2974 308.058 cv
53.4849 308.513 55.9829 307.876 57.9829 306.354 cv
58.0894 306.272 58.2388 306.281 58.3364 306.374 cv
58.8872 306.901 59.5298 307.51 60.1206 308.026 cv
62.2925 309.925 67.1118 309.382 68.2466 308.581 cv
68.4644 308.429 li
69.2583 307.872 70.0073 307.345 70.5728 306.579 cv
70.647 306.479 70.7788 306.442 70.894 306.488 cv
71.0093 306.535 71.0796 306.653 71.063 306.777 cv
71.019 307.114 71.8823 308.107 72.3882 308.471 cv
73.9673 309.601 76.8433 308.781 77.9263 308.474 cv
78.0688 308.433 78.1831 308.399 78.2642 308.38 cv
79.1196 308.171 79.896 307.352 80.5825 306.63 cv
80.7729 306.429 80.9595 306.231 81.1421 306.054 cv
81.2368 305.96 81.3862 305.949 81.4937 306.028 cv
83.6323 307.593 85.9878 308.317 88.1255 308.073 cv
90.4819 307.802 92.7212 306.616 94.2681 304.819 cv
94.3442 304.729 94.4702 304.699 94.5786 304.745 cv
94.9712 304.906 95.3315 305.152 95.6812 305.39 cv
95.9829 305.597 96.269 305.791 96.5669 305.93 cv
97.0015 306.134 97.5132 306.249 98.1743 306.293 cv
100.791 306.466 103.35 305.25 104.542 303.261 cv
104.591 303.179 104.68 303.129 104.776 303.128 cv
104.777 303.128 li
104.871 303.128 104.959 303.177 105.008 303.258 cv
105.298 303.728 li
105.867 304.65 107.383 304.79 108.588 304.451 cv
109.331 304.242 109.979 303.764 110.606 303.301 cv
112.913 301.6 li
113.034 301.51 113.205 301.536 113.294 301.657 cv
113.383 301.778 113.358 301.948 113.236 302.038 cv
110.93 303.739 li
110.294 304.208 109.575 304.74 108.736 304.976 cv
107.377 305.358 105.577 305.221 104.834 304.015 cv
104.77 303.909 li
103.395 305.851 100.788 307.017 98.1382 306.837 cv
97.4067 306.788 96.8345 306.657 96.3345 306.424 cv
95.9985 306.267 95.6812 306.05 95.3735 305.841 cv
95.0923 305.649 94.8228 305.466 94.5464 305.329 cv
92.9155 307.143 90.6108 308.337 88.188 308.615 cv
85.9751 308.868 83.561 308.155 81.3618 306.604 cv
81.2358 306.733 81.1079 306.868 80.9761 307.006 cv
80.2397 307.782 79.4048 308.662 78.3931 308.909 cv
78.3179 308.929 78.2095 308.96 78.0747 308.997 cv
76.9233 309.325 73.8628 310.196 72.0718 308.914 cv
71.813 308.729 71.0093 307.991 70.6694 307.321 cv
70.1157 307.937 69.4614 308.394 68.7788 308.874 cv
68.561 309.026 li
67.9253 309.476 66.3159 309.853 64.5669 309.853 cv
cp
.972549 .792157 0 rgb
f
19.2808 302.278 mo
24.1812 302.278 28.1528 306.251 28.1528 311.151 cv
30.1499 311.151 li
30.1499 305.148 25.2837 300.282 19.2808 300.282 cv
13.2788 300.282 8.41162 305.148 8.41162 311.151 cv
10.4077 311.151 li
10.4077 306.251 14.3804 302.278 19.2808 302.278 cv
cp
1 .670588 .662745 rgb
f
19.2808 302.278 mo
14.3804 302.278 10.4077 306.251 10.4077 311.151 cv
12.6196 311.151 li
12.6196 307.472 15.6021 304.489 19.2808 304.489 cv
22.9595 304.489 25.9419 307.472 25.9419 311.151 cv
28.1528 311.151 li
28.1528 306.251 24.1812 302.278 19.2808 302.278 cv
cp
1 .517647 .486275 rgb
f
19.2808 322.021 mo
25.2837 322.021 30.1499 317.153 30.1499 311.151 cv
28.1528 311.151 li
28.1528 316.052 24.1812 320.023 19.2808 320.023 cv
14.3804 320.023 10.4077 316.052 10.4077 311.151 cv
8.41162 311.151 li
8.41162 317.153 13.2788 322.021 19.2808 322.021 cv
cp
f
19.2808 317.813 mo
15.6021 317.813 12.6196 314.831 12.6196 311.151 cv
10.4077 311.151 li
10.4077 316.052 14.3804 320.023 19.2808 320.023 cv
24.1812 320.023 28.1528 316.052 28.1528 311.151 cv
25.9419 311.151 li
25.9419 314.831 22.9595 317.813 19.2808 317.813 cv
cp
1 .670588 .662745 rgb
f
19.2808 305.991 mo
18.9282 305.991 18.6421 305.706 18.6421 305.354 cv
18.6421 299.274 li
18.6421 298.922 18.9282 298.636 19.2808 298.636 cv
19.6333 298.636 19.9194 298.922 19.9194 299.274 cv
19.9194 305.354 li
19.9194 305.706 19.6333 305.991 19.2808 305.991 cv
cp
.4 .247059 .188235 rgb
f
37.9478 340.984 mo
33.6147 336.651 li
33.4302 336.467 33.4302 336.168 33.6147 335.984 cv
40.0269 329.571 li
40.1372 329.46 40.2964 329.411 40.4507 329.441 cv
40.4507 329.441 43.5835 329.665 43.7241 329.525 cv
71.2749 301.974 li
71.6479 301.602 72.2505 301.602 72.6245 301.974 cv
72.9976 302.347 72.9976 302.951 72.6245 303.324 cv
45.0737 330.875 li
44.9331 331.016 45.1577 334.148 45.1577 334.148 cv
45.187 334.302 45.1382 334.46 45.0269 334.571 cv
38.6157 340.984 li
38.4302 341.169 38.1313 341.169 37.9478 340.984 cv
cp
.576471 .376471 .215686 rgb
f
37.9478 340.984 mo
35.7817 338.817 li
72.6245 301.974 li
72.9976 302.347 72.9976 302.951 72.6245 303.324 cv
45.0737 330.875 li
44.9331 331.016 45.1577 334.148 45.1577 334.148 cv
45.187 334.302 45.1382 334.46 45.0269 334.571 cv
38.6157 340.984 li
38.4302 341.169 38.1313 341.169 37.9478 340.984 cv
cp
.670588 .580392 .54902 rgb
f
248.394 56.0137 mo
326.608 56.0137 li
367.39 56.0137 li
368.664 56.0137 369.183 54.6299 368.145 54.0063 cv
354.134 45.6079 li
353.914 45.4756 353.65 45.4043 353.379 45.4043 cv
247.485 45.4043 li
247.136 45.4043 246.803 45.522 246.559 45.73 cv
236.678 54.1289 li
235.858 54.8257 236.441 56.0137 237.604 56.0137 cv
241.059 56.0137 li
248.394 56.0137 li
cp
.941176 .792157 .223529 rgb
f
409.114 59.4604 mo
336.433 62.6577 li
317.004 62.6523 li
316.02 62.6523 315.39 61.7656 315.85 61.0303 cv
317.928 57.708 li
305.526 57.708 li
302.531 62.0908 li
302.297 62.4326 301.867 62.6426 301.401 62.6426 cv
260.529 62.6426 li
259.489 62.6426 258.866 61.6655 259.437 60.9307 cv
261.941 57.708 li
249.489 57.708 li
249.477 57.7378 li
245.956 62.146 li
245.712 62.4507 245.306 62.6328 244.873 62.6328 cv
234.522 62.6299 li
234.399 62.6338 li
227.058 63.0898 221.363 68.3848 221.363 74.6167 cv
221.363 80.0605 li
221.363 80.6709 221.948 81.1655 222.669 81.1655 cv
389.769 81.1655 li
390.155 81.1655 390.521 81.022 390.769 80.7725 cv
410.18 61.2764 li
410.917 60.5366 410.254 59.4102 409.114 59.4604 cv
cp
.960784 .705882 0 rgb
f
302.155 62.6426 mo
258.107 62.6426 li
263.254 56.0176 li
306.684 56.0137 li
302.155 62.6426 li
cp
.0117647 .396078 .392157 rgb
f
359.2 62.6426 mo
314.835 62.6514 li
318.989 56.0137 li
363.729 56.0137 li
359.2 62.6426 li
cp
f
263.254 38.7793 mo
258.107 45.4043 li
351.565 45.4043 li
340.703 38.7759 li
263.254 38.7793 li
cp
f
351.777 36.7671 mo
343.999 30.1699 li
343.738 29.9487 343.383 29.8242 343.013 29.8242 cv
286.625 29.8242 li
282.395 17.2295 li
298.953 17.2295 li
298.953 15.8965 li
281.826 14.5625 li
281.417 14.5625 li
281.417 9.36279 li
276.985 9.36279 li
269.182 0 li
268.257 0 li
275.002 9.36279 li
275.002 14.5625 li
275.002 17.2295 li
275.002 29.8242 li
262.97 29.8242 li
262.542 29.8242 262.138 29.9907 261.875 30.2754 cv
255.766 36.8721 li
255.05 37.6445 255.701 38.7754 256.862 38.7754 cv
350.792 38.7754 li
352.031 38.7754 352.652 37.5088 351.777 36.7671 cv
cp
.898039 .45098 .407843 rgb
f
271.667 62.6514 mo
268.825 62.6514 li
273.829 56.0171 li
276.67 56.0171 li
271.667 62.6514 li
cp
1 1 1 rgb
f
279.846 62.6455 mo
274.397 62.6455 li
279.4 56.0137 li
284.85 56.0137 li
279.846 62.6455 li
cp
f
277.891 45.4043 mo
276.167 45.4043 li
280.635 38.7754 li
282.36 38.7754 li
277.891 45.4043 li
cp
f
286.317 45.4043 mo
282.933 45.4043 li
287.402 38.7754 li
290.785 38.7754 li
286.317 45.4043 li
cp
f
304.573 45.4043 mo
298.253 45.4043 li
302.721 38.7754 li
309.041 38.7754 li
304.573 45.4043 li
cp
f
327.994 62.6426 mo
324.54 62.6426 li
329.634 56.0137 li
333.09 56.0137 li
327.994 62.6426 li
cp
f
334.299 62.6426 mo
332.399 62.6426 li
337.496 56.0137 li
339.396 56.0137 li
334.299 62.6426 li
cp
f
310.23 75.2036 mo
303.647 75.2036 li
303.647 73.3159 li
310.23 73.3159 li
310.23 75.2036 li
cp
.0117647 .396078 .392157 rgb
f
321.019 75.2036 mo
314.437 75.2036 li
314.437 73.3159 li
321.019 73.3159 li
321.019 75.2036 li
cp
f
332.106 75.2036 mo
325.524 75.2036 li
325.524 73.3159 li
332.106 73.3159 li
332.106 75.2036 li
cp
f
383.767 75.2036 mo
375.773 75.2036 li
375.297 75.2036 374.91 74.8149 374.91 74.3403 cv
374.91 72.7979 li
374.91 72.3232 375.297 71.9346 375.773 71.9346 cv
383.767 71.9346 li
384.242 71.9346 384.63 72.3232 384.63 72.7979 cv
384.63 74.3403 li
384.63 74.8149 384.242 75.2036 383.767 75.2036 cv
cp
f
404.844 66.6357 mo
224.94 66.6357 li
224.94 66.6357 225.459 66.1392 226.06 65.6753 cv
226.66 65.2109 227.339 64.8018 227.339 64.8018 cv
406.672 64.8018 li
404.844 66.6357 li
cp
f
249.136 31.6108 mo
248.331 31.6108 li
248.331 45.4043 li
249.136 45.4043 li
249.136 31.6108 li
cp
.47451 .333333 .278431 rgb
f
242.647 34.8066 mo
249.136 34.8066 li
249.136 31.6108 li
242.647 31.6108 li
244.032 33.2085 li
242.647 34.8066 li
cp
.392157 .690196 .266667 rgb
f
270.745 33.9033 mo
270.745 35.1699 269.718 36.1963 268.452 36.1963 cv
267.186 36.1963 266.16 35.1699 266.16 33.9033 cv
266.16 32.6372 267.186 31.6108 268.452 31.6108 cv
269.718 31.6108 270.745 32.6372 270.745 33.9033 cv
cp
.584314 .847059 .913725 rgb
f
277.697 33.9033 mo
277.697 35.1699 276.67 36.1963 275.405 36.1963 cv
274.138 36.1963 273.112 35.1699 273.112 33.9033 cv
273.112 32.6372 274.138 31.6108 275.405 31.6108 cv
276.67 31.6108 277.697 32.6372 277.697 33.9033 cv
cp
f
284.651 33.9033 mo
284.651 35.1699 283.625 36.1963 282.358 36.1963 cv
281.092 36.1963 280.066 35.1699 280.066 33.9033 cv
280.066 32.6372 281.092 31.6108 282.358 31.6108 cv
283.625 31.6108 284.651 32.6372 284.651 33.9033 cv
cp
f
291.604 33.9033 mo
291.604 35.1699 290.577 36.1963 289.311 36.1963 cv
288.044 36.1963 287.018 35.1699 287.018 33.9033 cv
287.018 32.6372 288.044 31.6108 289.311 31.6108 cv
290.577 31.6108 291.604 32.6372 291.604 33.9033 cv
cp
f
298.556 33.9033 mo
298.556 35.1699 297.53 36.1963 296.263 36.1963 cv
294.998 36.1963 293.971 35.1699 293.971 33.9033 cv
293.971 32.6372 294.998 31.6108 296.263 31.6108 cv
297.53 31.6108 298.556 32.6372 298.556 33.9033 cv
cp
f
305.509 33.9033 mo
305.509 35.1699 304.483 36.1963 303.216 36.1963 cv
301.951 36.1963 300.924 35.1699 300.924 33.9033 cv
300.924 32.6372 301.951 31.6108 303.216 31.6108 cv
304.483 31.6108 305.509 32.6372 305.509 33.9033 cv
cp
f
312.461 33.9033 mo
312.461 35.1699 311.435 36.1963 310.169 36.1963 cv
308.903 36.1963 307.876 35.1699 307.876 33.9033 cv
307.876 32.6372 308.903 31.6108 310.169 31.6108 cv
311.435 31.6108 312.461 32.6372 312.461 33.9033 cv
cp
f
319.415 33.9033 mo
319.415 35.1699 318.388 36.1963 317.122 36.1963 cv
315.856 36.1963 314.83 35.1699 314.83 33.9033 cv
314.83 32.6372 315.856 31.6108 317.122 31.6108 cv
318.388 31.6108 319.415 32.6372 319.415 33.9033 cv
cp
f
326.368 33.9033 mo
326.368 35.1699 325.341 36.1963 324.076 36.1963 cv
322.809 36.1963 321.783 35.1699 321.783 33.9033 cv
321.783 32.6372 322.809 31.6108 324.076 31.6108 cv
325.341 31.6108 326.368 32.6372 326.368 33.9033 cv
cp
f
333.321 33.9033 mo
333.321 35.1699 332.294 36.1963 331.028 36.1963 cv
329.762 36.1963 328.736 35.1699 328.736 33.9033 cv
328.736 32.6372 329.762 31.6108 331.028 31.6108 cv
332.294 31.6108 333.321 32.6372 333.321 33.9033 cv
cp
f
340.273 33.9033 mo
340.273 35.1699 339.247 36.1963 337.981 36.1963 cv
336.714 36.1963 335.688 35.1699 335.688 33.9033 cv
335.688 32.6372 336.714 31.6108 337.981 31.6108 cv
339.247 31.6108 340.273 32.6372 340.273 33.9033 cv
cp
f
262.867 56.5161 mo
263.108 56.2046 263.519 56.0176 263.958 56.0176 cv
304.42 56.0137 li
305.426 56.0137 306.054 56.9351 305.551 57.6719 cv
305.526 57.708 li
317.928 57.708 li
318.62 56.6016 li
318.847 56.2402 319.292 56.0137 319.775 56.0137 cv
326.608 56.0137 li
248.394 56.0137 li
249.428 56.0137 250.038 56.9771 249.489 57.708 cv
261.941 57.708 li
262.867 56.5161 li
cp
.941176 .521569 .113725 rgb
f
241.059 56.0137 mo
241.059 56.0137 li
248.394 56.0137 li
241.059 56.0137 li
cp
.584314 .847059 .913725 rgb
f
297.888 73.5693 mo
297.888 75.7324 296.134 77.4863 293.971 77.4863 cv
291.807 77.4863 290.053 75.7324 290.053 73.5693 cv
290.053 71.4058 291.807 69.6519 293.971 69.6519 cv
296.134 69.6519 297.888 71.4058 297.888 73.5693 cv
cp
.0117647 .396078 .392157 rgb
f
286.275 73.3159 mo
286.275 75.4795 284.521 77.2334 282.358 77.2334 cv
280.195 77.2334 278.441 75.4795 278.441 73.3159 cv
278.441 71.1528 280.195 69.3989 282.358 69.3989 cv
284.521 69.3989 286.275 71.1528 286.275 73.3159 cv
cp
f
274.663 73.063 mo
274.663 75.2266 272.909 76.98 270.745 76.98 cv
268.582 76.98 266.828 75.2266 266.828 73.063 cv
266.828 70.8999 268.582 69.146 270.745 69.146 cv
272.909 69.146 274.663 70.8999 274.663 73.063 cv
cp
f
352.469 202.184 mo
352.309 201.577 351.683 201.21 351.075 201.37 cv
347.063 202.423 li
346.666 202.527 346.389 202.838 346.278 203.207 cv
324.884 208.659 li
323.768 203.296 li
315.853 203.296 li
315.853 189.933 li
312.007 189.933 li
312.007 216.66 li
323.768 216.66 li
325.002 209.938 li
346.668 204.417 li
346.939 204.624 347.29 204.725 347.643 204.632 cv
351.655 203.579 li
352.261 203.419 352.628 202.792 352.469 202.184 cv
cp
.333333 .384314 .439216 rgb
f
351.718 211.859 mo
327.684 216.577 li
181.543 216.669 li
178.354 212.083 li
160.098 212.083 li
160.098 216.684 li
160.098 216.8 li
160.098 219.785 li
160.098 221.278 160.499 222.745 161.258 224.03 cv
162.691 226.455 li
162.953 226.898 163.429 227.169 163.944 227.169 cv
377.933 227.169 li
381.072 224.03 li
393.243 211.859 li
351.718 211.859 li
cp
.203922 .286275 .368627 rgb
f
351.718 211.859 mo
327.684 216.577 li
181.543 216.669 li
178.354 212.083 li
160.098 212.083 li
160.098 213.2 li
177.162 213.218 li
180.501 217.793 li
327.617 217.793 li
351.698 213.271 li
391.812 213.289 li
393.243 211.859 li
351.718 211.859 li
cp
.278431 .392157 .486275 rgb
f
312.007 207.271 mo
196.896 207.271 li
196.896 216.66 li
312.007 216.66 li
312.007 207.271 li
cp
.419608 .517647 .415686 rgb
f
312.007 207.271 mo
196.896 207.271 li
196.896 208.517 li
312.007 208.517 li
312.007 207.271 li
cp
.501961 .619608 .494118 rgb
f
244.079 194.953 mo
257.853 194.953 li
257.853 207.271 li
244.079 207.271 li
244.079 194.953 li
cp
.258824 .258824 .258824 rgb
f
299.622 196.905 mo
271.186 196.905 li
271.186 207.271 li
299.622 207.271 li
299.622 196.905 li
cp
.4 .4 .4 rgb
f
299.622 196.905 mo
271.186 196.905 li
271.186 197.877 li
299.622 197.877 li
299.622 196.905 li
cp
.501961 .501961 .501961 rgb
f
282.523 186.031 mo
272.275 189.437 li
271.625 189.653 271.186 190.261 271.186 190.947 cv
271.186 196.905 li
281.382 196.905 li
283.631 187.037 li
283.779 186.385 283.158 185.82 282.523 186.031 cv
cp
.301961 .301961 .301961 rgb
f
295.625 182.567 mo
294.505 181.282 292.877 180.452 291.039 180.452 cv
287.667 180.452 284.933 183.185 284.933 186.557 cv
284.933 189.516 287.04 191.981 289.834 192.54 cv
289.834 196.905 li
299.622 196.905 li
299.622 182.567 li
295.625 182.567 li
cp
f
264.408 171.708 mo
243.13 171.708 li
243.13 169.086 li
264.408 169.086 li
264.408 171.708 li
cp
.258824 .258824 .258824 rgb
f
253.365 173.796 mo
254.966 172.029 li
255.395 176.481 li
253.365 173.796 li
cp
251.776 186.853 mo
256.064 189.814 li
246.906 189.814 li
251.776 186.853 li
cp
247.909 184.183 mo
251.259 186.496 li
246.351 189.482 li
247.909 184.183 li
cp
249.704 178.082 mo
251.993 180.154 li
248.262 182.983 li
249.704 178.082 li
cp
250.208 177.282 mo
252.981 174.222 li
255.294 177.282 li
250.208 177.282 li
cp
252.453 179.804 mo
250.307 177.863 li
255.012 177.863 li
252.453 179.804 li
cp
256.028 183.041 mo
252.883 180.195 li
255.557 178.166 li
256.028 183.041 li
cp
256.139 184.199 mo
256.653 189.527 li
252.311 186.527 li
256.139 184.199 li
cp
248.609 183.437 mo
252.422 180.543 li
255.621 183.437 li
248.609 183.437 li
cp
255.335 184.018 mo
251.794 186.171 li
248.677 184.018 li
255.335 184.018 li
cp
252.633 173.762 mo
250.176 176.475 li
251.438 172.183 li
252.633 173.762 li
cp
254.107 163.111 mo
254.941 171.772 li
254.676 171.508 li
253.018 173.337 li
251.649 171.527 li
251.625 171.547 li
254.107 163.111 li
cp
257.215 195.351 mo
257.766 195.293 li
256.043 177.427 li
256.084 177.392 li
256.034 177.325 li
254.521 161.641 li
254.521 151.2 li
253.967 151.2 li
253.967 161.612 li
244.079 195.236 li
244.608 195.407 li
246.082 190.396 li
256.737 190.396 li
257.215 195.351 li
cp
f
221.958 204.723 mo
221.958 195.277 li
221.378 195.277 li
221.378 204.723 li
221.378 205.048 li
221.378 207.271 li
227.526 207.271 li
227.526 204.723 li
221.958 204.723 li
cp
.333333 .384314 .439216 rgb
f
311.08 180.452 mo
310.5 180.452 li
310.5 168.195 li
311.08 168.195 li
311.08 180.452 li
cp
f
308.974 180.452 mo
295.071 168.565 li
305.028 168.565 li
305.028 167.345 li
292.366 167.345 li
292.366 153.812 li
291.786 153.812 li
291.786 167.345 li
289.259 167.345 li
289.259 168.565 li
291.337 168.565 li
299.647 180.452 li
299.622 180.452 li
299.622 207.271 li
312.007 207.271 li
312.007 180.452 li
308.974 180.452 li
cp
.501961 .501961 .501961 rgb
f
271.186 207.271 mo
257.853 207.271 li
257.853 200.117 li
271.186 200.117 li
271.186 207.271 li
cp
.737255 .737255 .737255 rgb
f
161.258 224.03 mo
162.639 226.366 li
162.933 226.864 163.469 227.169 164.046 227.169 cv
377.933 227.169 li
381.072 224.03 li
161.258 224.03 li
cp
1 .517647 .486275 rgb
f
312.4 194.303 mo
315.853 194.303 li
315.853 191.446 li
312.4 191.446 li
312.4 194.303 li
cp
.305882 .803922 .768627 rgb
f
312.4 198.39 mo
315.853 198.39 li
315.853 196.055 li
312.4 196.055 li
312.4 198.39 li
cp
f
313.517 194.303 mo
313.173 194.303 li
313.612 191.446 li
313.955 191.446 li
313.517 194.303 li
cp
1 1 1 rgb
f
314.018 194.303 mo
313.792 194.303 li
314.229 191.446 li
314.456 191.446 li
314.018 194.303 li
cp
f
302.05 206.353 mo
300.381 206.353 li
300.381 181.31 li
302.05 181.31 li
302.05 206.353 li
cp
.301961 .301961 .301961 rgb
f
305.159 206.353 mo
303.488 206.353 li
303.488 181.31 li
305.159 181.31 li
305.159 206.353 li
cp
f
308.266 206.353 mo
306.597 206.353 li
306.597 181.31 li
308.266 181.31 li
308.266 206.353 li
cp
f
311.374 206.353 mo
309.705 206.353 li
309.705 181.31 li
311.374 181.31 li
311.374 206.353 li
cp
f
198.101 216.566 mo
196.896 216.566 li
196.896 207.271 li
198.101 207.271 li
198.101 216.566 li
cp
.501961 .619608 .494118 rgb
f
315.853 203.779 mo
323.768 203.779 li
323.768 203.296 li
315.853 203.296 li
315.853 203.779 li
cp
.388235 .462745 .529412 rgb
f
381.072 217.519 mo
381.072 218.269 380.464 218.877 379.712 218.877 cv
378.961 218.877 378.353 218.269 378.353 217.519 cv
378.353 216.767 378.961 216.157 379.712 216.157 cv
380.464 216.157 381.072 216.767 381.072 217.519 cv
cp
.278431 .392157 .486275 rgb
f
205.029 215.249 mo
199.73 215.249 li
199.73 209.949 li
205.029 209.949 li
205.029 215.249 li
cp
.258824 .258824 .258824 rgb
f
212.119 215.249 mo
206.821 215.249 li
206.821 209.949 li
212.119 209.949 li
212.119 215.249 li
cp
f
219.21 215.249 mo
213.91 215.249 li
213.91 209.949 li
219.21 209.949 li
219.21 215.249 li
cp
f
226.3 215.249 mo
221.002 215.249 li
221.002 209.949 li
226.3 209.949 li
226.3 215.249 li
cp
f
233.391 215.249 mo
228.091 215.249 li
228.091 209.949 li
233.391 209.949 li
233.391 215.249 li
cp
f
240.481 215.249 mo
235.182 215.249 li
235.182 209.949 li
240.481 209.949 li
240.481 215.249 li
cp
f
247.573 215.249 mo
242.272 215.249 li
242.272 209.949 li
247.573 209.949 li
247.573 215.249 li
cp
f
254.663 215.249 mo
249.364 215.249 li
249.364 209.949 li
254.663 209.949 li
254.663 215.249 li
cp
f
261.753 215.249 mo
256.455 215.249 li
256.455 209.949 li
261.753 209.949 li
261.753 215.249 li
cp
f
268.844 215.249 mo
263.544 215.249 li
263.544 209.949 li
268.844 209.949 li
268.844 215.249 li
cp
f
275.935 215.249 mo
270.636 215.249 li
270.636 209.949 li
275.935 209.949 li
275.935 215.249 li
cp
f
283.025 215.249 mo
277.726 215.249 li
277.726 209.949 li
283.025 209.949 li
283.025 215.249 li
cp
f
290.116 215.249 mo
284.817 215.249 li
284.817 209.949 li
290.116 209.949 li
290.116 215.249 li
cp
f
297.207 215.249 mo
291.907 215.249 li
291.907 209.949 li
297.207 209.949 li
297.207 215.249 li
cp
f
304.297 215.249 mo
298.999 215.249 li
298.999 209.949 li
304.297 209.949 li
304.297 215.249 li
cp
f
333.02 262.919 mo
329.406 261.491 320.493 259.062 305.501 258.276 cv
290.511 257.488 260.954 260.578 260.954 260.578 cv
229.638 266.047 li
229.638 266.047 228.969 266.199 226.102 266.865 cv
213.78 254.842 li
210.274 254.842 li
210.054 254.896 209.828 255.257 209.954 255.447 cv
219.746 268.155 li
214.662 269.348 208.361 271.032 207.766 271.227 cv
206.974 271.491 204.946 273.665 203.581 275.208 cv
202.673 276.234 201.476 276.993 200.131 277.4 cv
192.436 279.733 li
191.831 279.917 191.419 280.45 191.419 281.055 cv
191.419 281.235 li
191.419 281.815 191.829 282.327 192.419 282.477 cv
194.261 282.951 198.141 283.906 199.708 283.977 cv
201.796 284.071 270.888 287.255 283.978 286.033 cv
297.068 284.811 304.585 284.1 313.095 280.66 cv
322.366 276.913 337.396 265.39 337.396 265.39 cv
337.396 265.39 335.131 263.753 333.02 262.919 cv
.898039 .45098 .407843 rgb
f
229.638 266.047 mo
249.461 254.842 li
260.954 260.578 li
247.644 265.23 li
229.638 266.047 li
.301961 .74902 .85098 rgb
f
194.01 281.404 mo
193.913 280.528 li
263.559 271.711 li
337.396 265.39 li
264.409 277.105 li
194.01 281.404 li
cp
.203922 .286275 .368627 rgb
f
gsave
243.123 265.234 mo
247.651 256.066 li
249.442 255.072 li
251.555 256.123 li
247.155 265.053 li
243.123 265.234 li
clp
243.123 255.072 mo
251.555 255.072 li
251.555 265.234 li
243.123 265.234 li
cp
.65098 .87451 .92549 rgb
f
grestore
321.392 260.311 mo
208.107 271.729 li
205.511 274.471 li
329.282 262.055 li
321.392 260.311 li
cp
1 1 1 rgb
f
328.587 271.711 mo
282.647 278.291 li
204.628 284.197 li
222.104 284.924 li
286.632 283.143 li
324.052 274.697 li
328.587 271.711 li
cp
.768627 .301961 .345098 rgb
f
231.865 281.041 mo
223.795 281.848 li
222.183 282.009 220.735 280.821 220.573 279.21 cv
220.302 276.506 li
220.14 274.894 221.329 273.444 222.939 273.283 cv
231.008 272.478 li
232.619 272.315 234.069 273.502 234.231 275.113 cv
234.5 277.817 li
234.662 279.43 233.475 280.881 231.865 281.041 cv
cp
1 1 1 rgb
f
224.336 276.118 mo
224.385 276.632 224.803 276.871 225.413 276.969 cv
225.84 276.773 226.149 276.422 226.105 275.956 cv
226.062 275.545 225.774 275.141 225.148 275.203 cv
224.571 275.261 224.292 275.673 224.336 276.118 cv
cp
226.509 278.498 mo
226.445 277.873 225.981 277.615 225.265 277.487 cv
224.681 277.722 224.394 278.149 224.443 278.641 cv
224.473 279.165 224.914 279.587 225.572 279.521 cv
226.198 279.459 226.562 279.029 226.509 278.498 cv
cp
223.74 278.807 mo
223.676 278.157 224.017 277.66 224.625 277.326 cv
224.616 277.306 li
224.017 277.092 223.727 276.673 223.682 276.229 cv
223.602 275.414 224.234 274.791 225.137 274.7 cv
226.136 274.6 226.699 275.175 226.763 275.818 cv
226.805 276.252 226.639 276.743 226.035 277.106 cv
226.039 277.13 li
226.703 277.319 227.144 277.731 227.206 278.357 cv
227.297 279.251 226.588 279.932 225.606 280.029 cv
224.531 280.138 223.815 279.559 223.74 278.807 cv
cp
.258824 .258824 .258824 rgb
f
230.574 277.741 mo
230.497 277.004 230.035 276.602 229.391 276.666 cv
228.974 276.708 228.612 277.008 228.458 277.4 cv
228.417 277.484 228.396 277.591 228.41 277.718 cv
228.509 278.563 228.961 279.148 229.69 279.077 cv
230.292 279.017 230.646 278.477 230.574 277.741 cv
cp
230.471 274.75 mo
230.329 274.758 230.148 274.783 229.954 274.834 cv
228.878 275.126 228.381 275.983 228.345 276.843 cv
228.371 276.841 li
228.582 276.492 228.985 276.18 229.555 276.123 cv
230.464 276.032 231.174 276.624 231.274 277.63 cv
231.368 278.572 230.812 279.509 229.743 279.616 cv
228.644 279.727 227.836 278.941 227.702 277.604 cv
227.6 276.591 227.885 275.754 228.341 275.195 cv
228.729 274.734 229.272 274.415 229.914 274.271 cv
230.116 274.218 230.291 274.193 230.416 274.181 cv
230.471 274.75 li
cp
f
56.1958 249.681 mo
33.8159 249.681 li
33.8159 259.536 li
56.1958 259.536 li
56.1958 249.681 li
cp
.737255 .737255 .737255 rgb
f
56.1958 235.391 mo
33.8159 235.391 li
33.8159 245.246 li
56.1958 245.246 li
56.1958 235.391 li
cp
f
56.1958 245.246 mo
33.8159 245.246 li
33.8159 249.681 li
56.1958 249.681 li
56.1958 245.246 li
cp
.258824 .258824 .258824 rgb
f
48.3657 226.799 mo
33.8159 226.799 li
33.8159 235.391 li
48.3657 235.391 li
48.3657 226.799 li
cp
f
43.9375 220.894 mo
33.8159 220.894 li
33.8159 226.799 li
43.9375 226.799 li
43.9375 220.894 li
cp
.737255 .737255 .737255 rgb
f
35.2358 208.49 mo
33.8159 208.49 li
33.8159 220.894 li
37.3257 220.894 li
35.2358 208.49 li
cp
f
41.8164 217.34 mo
39.8809 217.34 li
39.8809 220.894 li
41.8164 220.894 li
41.8164 217.34 li
cp
f
43.9702 214.692 mo
43.9702 216.416 42.5728 217.813 40.8486 217.813 cv
39.1245 217.813 37.7266 216.416 37.7266 214.692 cv
37.7266 212.968 39.1245 211.57 40.8486 211.57 cv
42.5728 211.57 43.9702 212.968 43.9702 214.692 cv
cp
f
164.37 249.681 mo
159.75 249.681 155.43 251.967 152.833 255.787 cv
150.282 259.536 li
28.0122 259.536 li
21.7256 249.681 li
.874512 249.681 li
2.45459 257.754 li
2.45459 263.797 5.44238 269.227 9.95361 272.914 cv
13.6973 275.974 18.4888 277.833 23.5034 277.833 cv
156.969 277.833 li
158.852 277.833 160.627 276.959 161.776 275.468 cv
163.742 272.914 li
176.702 256.078 li
177.293 255.308 177.967 254.604 178.711 253.978 cv
183.813 249.681 li
164.37 249.681 li
cp
.333333 .384314 .439216 rgb
f
133.748 277.833 mo
156.969 277.833 li
158.852 277.833 160.627 276.959 161.776 275.468 cv
163.742 272.914 li
176.702 256.078 li
176.702 256.078 168.231 265.787 158.186 271.078 cv
148.142 276.368 133.748 277.833 133.748 277.833 cv
cp
.25098 .282353 .309804 rgb
f
23.5034 277.833 mo
156.969 277.833 li
158.852 277.833 160.627 276.959 161.776 275.468 cv
163.742 272.914 li
9.95361 272.914 li
13.6973 275.974 18.4888 277.833 23.5034 277.833 cv
cp
.996078 .807843 .658824 rgb
f
41.8164 249.681 mo
39.8809 249.681 li
42.4585 245.263 li
44.394 245.263 li
41.8164 249.681 li
cp
1 1 1 rgb
f
46.3228 249.681 mo
45.0059 249.681 li
47.5835 245.263 li
48.9004 245.263 li
46.3228 249.681 li
cp
f
67.2134 247.583 mo
57.3569 247.583 li
57.3569 259.536 li
67.2134 259.536 li
67.2134 247.583 li
cp
1 .517647 .486275 rgb
f
59.8164 258.919 mo
58.2227 258.919 li
58.2227 248.201 li
59.8164 248.201 li
59.8164 258.919 li
cp
.768627 .301961 .345098 rgb
f
63.0825 258.919 mo
61.4878 258.919 li
61.4878 248.201 li
63.0825 248.201 li
63.0825 258.919 li
cp
f
66.3481 258.919 mo
64.7534 258.919 li
64.7534 248.201 li
66.3481 248.201 li
66.3481 258.919 li
cp
f
77.0688 247.583 mo
67.2134 247.583 li
67.2134 259.536 li
77.0688 259.536 li
77.0688 247.583 li
cp
.0117647 .396078 .392157 rgb
f
69.6724 258.919 mo
68.0786 258.919 li
68.0786 248.201 li
69.6724 248.201 li
69.6724 258.919 li
cp
.00784314 .258824 .25098 rgb
f
72.938 258.919 mo
71.3442 258.919 li
71.3442 248.201 li
72.938 248.201 li
72.938 258.919 li
cp
f
76.2036 258.919 mo
74.6099 258.919 li
74.6099 248.201 li
76.2036 248.201 li
76.2036 258.919 li
cp
f
67.2134 235.63 mo
57.3569 235.63 li
57.3569 247.583 li
67.2134 247.583 li
67.2134 235.63 li
cp
.305882 .803922 .768627 rgb
f
59.8164 246.965 mo
58.2227 246.965 li
58.2227 236.247 li
59.8164 236.247 li
59.8164 246.965 li
cp
.192157 .639216 .596078 rgb
f
63.0825 246.965 mo
61.4878 246.965 li
61.4878 236.247 li
63.0825 236.247 li
63.0825 246.965 li
cp
f
66.3481 246.965 mo
64.7534 246.965 li
64.7534 236.247 li
66.3481 236.247 li
66.3481 246.965 li
cp
f
77.0688 235.63 mo
67.2134 235.63 li
67.2134 247.583 li
77.0688 247.583 li
77.0688 235.63 li
cp
.337255 .337255 .337255 rgb
f
69.6724 246.965 mo
68.0786 246.965 li
68.0786 236.247 li
69.6724 236.247 li
69.6724 246.965 li
cp
.258824 .258824 .258824 rgb
f
72.938 246.965 mo
71.3442 246.965 li
71.3442 236.247 li
72.938 236.247 li
72.938 246.965 li
cp
f
76.2036 246.965 mo
74.6099 246.965 li
74.6099 236.247 li
76.2036 236.247 li
76.2036 246.965 li
cp
f
86.9263 247.583 mo
77.0688 247.583 li
77.0688 259.536 li
86.9263 259.536 li
86.9263 247.583 li
cp
1 .517647 .486275 rgb
f
79.5288 258.919 mo
77.9351 258.919 li
77.9351 248.201 li
79.5288 248.201 li
79.5288 258.919 li
cp
.768627 .301961 .345098 rgb
f
82.7944 258.919 mo
81.2007 258.919 li
81.2007 248.201 li
82.7944 248.201 li
82.7944 258.919 li
cp
f
86.0601 258.919 mo
84.4663 258.919 li
84.4663 248.201 li
86.0601 248.201 li
86.0601 258.919 li
cp
f
86.9263 235.63 mo
77.0688 235.63 li
77.0688 247.583 li
86.9263 247.583 li
86.9263 235.63 li
cp
.972549 .792157 0 rgb
f
79.5288 246.965 mo
77.9351 246.965 li
77.9351 236.247 li
79.5288 236.247 li
79.5288 246.965 li
cp
.913725 .498039 .00784314 rgb
f
82.7944 246.965 mo
81.2007 246.965 li
81.2007 236.247 li
82.7944 236.247 li
82.7944 246.965 li
cp
f
86.0601 246.965 mo
84.4663 246.965 li
84.4663 236.247 li
86.0601 236.247 li
86.0601 246.965 li
cp
f
96.7817 247.583 mo
86.9263 247.583 li
86.9263 259.536 li
96.7817 259.536 li
96.7817 247.583 li
cp
.403922 .501961 .623529 rgb
f
89.3853 258.919 mo
87.7915 258.919 li
87.7915 248.201 li
89.3853 248.201 li
89.3853 258.919 li
cp
.203922 .286275 .368627 rgb
f
92.6509 258.919 mo
91.0571 258.919 li
91.0571 248.201 li
92.6509 248.201 li
92.6509 258.919 li
cp
f
95.9165 258.919 mo
94.3228 258.919 li
94.3228 248.201 li
95.9165 248.201 li
95.9165 258.919 li
cp
f
96.7817 235.63 mo
86.9263 235.63 li
86.9263 247.583 li
96.7817 247.583 li
96.7817 235.63 li
cp
.537255 .411765 .368627 rgb
f
89.3853 246.965 mo
87.7915 246.965 li
87.7915 236.247 li
89.3853 236.247 li
89.3853 246.965 li
cp
.47451 .333333 .278431 rgb
f
92.6509 246.965 mo
91.0571 246.965 li
91.0571 236.247 li
92.6509 236.247 li
92.6509 246.965 li
cp
f
95.9165 246.965 mo
94.3228 246.965 li
94.3228 236.247 li
95.9165 236.247 li
95.9165 246.965 li
cp
f
106.638 247.583 mo
96.7817 247.583 li
96.7817 259.536 li
106.638 259.536 li
106.638 247.583 li
cp
.972549 .792157 0 rgb
f
99.2417 258.919 mo
97.647 258.919 li
97.647 248.201 li
99.2417 248.201 li
99.2417 258.919 li
cp
.913725 .498039 .00784314 rgb
f
102.506 258.919 mo
100.913 258.919 li
100.913 248.201 li
102.506 248.201 li
102.506 258.919 li
cp
f
105.772 258.919 mo
104.178 258.919 li
104.178 248.201 li
105.772 248.201 li
105.772 258.919 li
cp
f
106.638 235.63 mo
96.7817 235.63 li
96.7817 247.583 li
106.638 247.583 li
106.638 235.63 li
cp
.0117647 .396078 .392157 rgb
f
99.2417 246.965 mo
97.647 246.965 li
97.647 236.247 li
99.2417 236.247 li
99.2417 246.965 li
cp
.00784314 .258824 .25098 rgb
f
102.506 246.965 mo
100.913 246.965 li
100.913 236.247 li
102.506 236.247 li
102.506 246.965 li
cp
f
105.772 246.965 mo
104.178 246.965 li
104.178 236.247 li
105.772 236.247 li
105.772 246.965 li
cp
f
116.495 247.583 mo
106.638 247.583 li
106.638 259.536 li
116.495 259.536 li
116.495 247.583 li
cp
1 .517647 .486275 rgb
f
109.098 258.919 mo
107.504 258.919 li
107.504 248.201 li
109.098 248.201 li
109.098 258.919 li
cp
.768627 .301961 .345098 rgb
f
112.364 258.919 mo
110.77 258.919 li
110.77 248.201 li
112.364 248.201 li
112.364 258.919 li
cp
f
115.629 258.919 mo
114.036 258.919 li
114.036 248.201 li
115.629 248.201 li
115.629 258.919 li
cp
f
116.495 235.63 mo
106.638 235.63 li
106.638 247.583 li
116.495 247.583 li
116.495 235.63 li
cp
.305882 .803922 .768627 rgb
f
109.098 246.965 mo
107.504 246.965 li
107.504 236.247 li
109.098 236.247 li
109.098 246.965 li
cp
.192157 .639216 .596078 rgb
f
112.364 246.965 mo
110.77 246.965 li
110.77 236.247 li
112.364 236.247 li
112.364 246.965 li
cp
f
115.629 246.965 mo
114.036 246.965 li
114.036 236.247 li
115.629 236.247 li
115.629 246.965 li
cp
f
126.35 247.583 mo
116.495 247.583 li
116.495 259.536 li
126.35 259.536 li
126.35 247.583 li
cp
.337255 .337255 .337255 rgb
f
118.954 258.919 mo
117.36 258.919 li
117.36 248.201 li
118.954 248.201 li
118.954 258.919 li
cp
.258824 .258824 .258824 rgb
f
122.219 258.919 mo
120.625 258.919 li
120.625 248.201 li
122.219 248.201 li
122.219 258.919 li
cp
f
125.485 258.919 mo
123.891 258.919 li
123.891 248.201 li
125.485 248.201 li
125.485 258.919 li
cp
f
126.35 235.63 mo
116.495 235.63 li
116.495 247.583 li
126.35 247.583 li
126.35 235.63 li
cp
.305882 .803922 .768627 rgb
f
118.954 246.965 mo
117.36 246.965 li
117.36 236.247 li
118.954 236.247 li
118.954 246.965 li
cp
.192157 .639216 .596078 rgb
f
122.219 246.965 mo
120.625 246.965 li
120.625 236.247 li
122.219 236.247 li
122.219 246.965 li
cp
f
125.485 246.965 mo
123.891 246.965 li
123.891 236.247 li
125.485 236.247 li
125.485 246.965 li
cp
f
136.208 247.583 mo
126.35 247.583 li
126.35 259.536 li
136.208 259.536 li
136.208 247.583 li
cp
.403922 .501961 .623529 rgb
f
128.811 258.919 mo
127.216 258.919 li
127.216 248.201 li
128.811 248.201 li
128.811 258.919 li
cp
.203922 .286275 .368627 rgb
f
132.077 258.919 mo
130.482 258.919 li
130.482 248.201 li
132.077 248.201 li
132.077 258.919 li
cp
f
135.341 258.919 mo
133.748 258.919 li
133.748 248.201 li
135.341 248.201 li
135.341 258.919 li
cp
f
136.208 235.63 mo
126.35 235.63 li
126.35 247.583 li
136.208 247.583 li
136.208 235.63 li
cp
.537255 .411765 .368627 rgb
f
128.811 246.965 mo
127.216 246.965 li
127.216 236.247 li
128.811 236.247 li
128.811 246.965 li
cp
.47451 .333333 .278431 rgb
f
132.077 246.965 mo
130.482 246.965 li
130.482 236.247 li
132.077 236.247 li
132.077 246.965 li
cp
f
135.341 246.965 mo
133.748 246.965 li
133.748 236.247 li
135.341 236.247 li
135.341 246.965 li
cp
f
146.063 247.583 mo
136.208 247.583 li
136.208 259.536 li
146.063 259.536 li
146.063 247.583 li
cp
.305882 .803922 .768627 rgb
f
138.667 258.919 mo
137.073 258.919 li
137.073 248.201 li
138.667 248.201 li
138.667 258.919 li
cp
.192157 .639216 .596078 rgb
f
141.932 258.919 mo
140.338 258.919 li
140.338 248.201 li
141.932 248.201 li
141.932 258.919 li
cp
f
145.198 258.919 mo
143.604 258.919 li
143.604 248.201 li
145.198 248.201 li
145.198 258.919 li
cp
f
146.063 235.63 mo
136.208 235.63 li
136.208 247.583 li
146.063 247.583 li
146.063 235.63 li
cp
.976471 .74902 .231373 rgb
f
138.667 246.965 mo
137.073 246.965 li
137.073 236.247 li
138.667 236.247 li
138.667 246.965 li
cp
.94902 .47451 .207843 rgb
f
141.932 246.965 mo
140.338 246.965 li
140.338 236.247 li
141.932 236.247 li
141.932 246.965 li
cp
f
145.198 246.965 mo
143.604 246.965 li
143.604 236.247 li
145.198 236.247 li
145.198 246.965 li
cp
f
150.219 259.536 mo
28.0195 259.536 li
21.7285 249.721 li
21.7285 249.681 li
.874512 249.681 li
1.1167 250.918 li
21.0264 250.918 li
27.3003 260.706 li
27.3003 260.773 li
27.3433 260.773 li
27.3921 260.849 li
27.5103 260.773 li
150.219 260.773 li
150.219 259.536 li
cp
.392157 .458824 .517647 rgb
f
163.994 262.596 mo
163.994 263.756 163.053 264.695 161.895 264.695 cv
160.735 264.695 159.795 263.756 159.795 262.596 cv
159.795 261.437 160.735 260.497 161.895 260.497 cv
163.053 260.497 163.994 261.437 163.994 262.596 cv
cp
f
36.7871 237.366 mo
34.6196 237.366 li
34.6196 236.247 li
36.7871 236.247 li
36.7871 237.366 li
cp
.258824 .258824 .258824 rgb
f
40.2065 237.366 mo
38.0396 237.366 li
38.0396 236.247 li
40.2065 236.247 li
40.2065 237.366 li
cp
f
43.626 237.366 mo
41.4585 237.366 li
41.4585 236.247 li
43.626 236.247 li
43.626 237.366 li
cp
f
36.7871 239.59 mo
34.6196 239.59 li
34.6196 238.471 li
36.7871 238.471 li
36.7871 239.59 li
cp
f
40.2065 239.59 mo
38.0396 239.59 li
38.0396 238.471 li
40.2065 238.471 li
40.2065 239.59 li
cp
f
43.626 239.59 mo
41.4585 239.59 li
41.4585 238.471 li
43.626 238.471 li
43.626 239.59 li
cp
f
36.7871 241.813 mo
34.6196 241.813 li
34.6196 240.694 li
36.7871 240.694 li
36.7871 241.813 li
cp
f
40.2065 241.813 mo
38.0396 241.813 li
38.0396 240.694 li
40.2065 240.694 li
40.2065 241.813 li
cp
f
43.626 241.813 mo
41.4585 241.813 li
41.4585 240.694 li
43.626 240.694 li
43.626 241.813 li
cp
f
36.7871 244.037 mo
34.6196 244.037 li
34.6196 242.919 li
36.7871 242.919 li
36.7871 244.037 li
cp
f
40.2065 244.037 mo
38.0396 244.037 li
38.0396 242.919 li
40.2065 242.919 li
40.2065 244.037 li
cp
f
43.626 244.037 mo
41.4585 244.037 li
41.4585 242.919 li
43.626 242.919 li
43.626 244.037 li
cp
f
47.0454 237.366 mo
44.8784 237.366 li
44.8784 236.247 li
47.0454 236.247 li
47.0454 237.366 li
cp
f
50.4648 237.366 mo
48.2979 237.366 li
48.2979 236.247 li
50.4648 236.247 li
50.4648 237.366 li
cp
f
53.8848 237.366 mo
51.7173 237.366 li
51.7173 236.247 li
53.8848 236.247 li
53.8848 237.366 li
cp
f
37.6484 252.21 mo
37.6484 252.979 37.0244 253.604 36.2549 253.604 cv
35.4854 253.604 34.8613 252.979 34.8613 252.21 cv
34.8613 251.439 35.4854 250.815 36.2549 250.815 cv
37.0244 250.815 37.6484 251.439 37.6484 252.21 cv
cp
f
41.9102 252.21 mo
41.9102 252.979 41.2861 253.604 40.5166 253.604 cv
39.7471 253.604 39.123 252.979 39.123 252.21 cv
39.123 251.439 39.7471 250.815 40.5166 250.815 cv
41.2861 250.815 41.9102 251.439 41.9102 252.21 cv
cp
f
46.1719 252.21 mo
46.1719 252.979 45.5479 253.604 44.7783 253.604 cv
44.0083 253.604 43.3848 252.979 43.3848 252.21 cv
43.3848 251.439 44.0083 250.815 44.7783 250.815 cv
45.5479 250.815 46.1719 251.439 46.1719 252.21 cv
cp
f
50.4336 252.21 mo
50.4336 252.979 49.8096 253.604 49.04 253.604 cv
48.27 253.604 47.646 252.979 47.646 252.21 cv
47.646 251.439 48.27 250.815 49.04 250.815 cv
49.8096 250.815 50.4336 251.439 50.4336 252.21 cv
cp
f
54.6948 252.21 mo
54.6948 252.979 54.0713 253.604 53.3013 253.604 cv
52.5317 253.604 51.9077 252.979 51.9077 252.21 cv
51.9077 251.439 52.5317 250.815 53.3013 250.815 cv
54.0713 250.815 54.6948 251.439 54.6948 252.21 cv
cp
f
165.508 270.62 mo
7.5083 270.577 li
7.5083 270.577 8.15771 271.295 8.7373 271.843 cv
9.31689 272.391 9.95361 272.914 9.95361 272.914 cv
163.742 272.914 li
165.508 270.62 li
cp
f
150.047 262.166 mo
27.1284 262.166 li
27.1284 260.497 li
150.047 260.497 li
150.047 262.166 li
cp
1 .517647 .486275 rgb
f
29.915 264.695 mo
29.915 265.465 29.291 266.089 28.5215 266.089 cv
27.7524 266.089 27.1284 265.465 27.1284 264.695 cv
27.1284 263.926 27.7524 263.303 28.5215 263.303 cv
29.291 263.303 29.915 263.926 29.915 264.695 cv
cp
.258824 .258824 .258824 rgb
f
34.2407 264.695 mo
34.2407 265.465 33.6167 266.089 32.8472 266.089 cv
32.0781 266.089 31.4541 265.465 31.4541 264.695 cv
31.4541 263.926 32.0781 263.303 32.8472 263.303 cv
33.6167 263.303 34.2407 263.926 34.2407 264.695 cv
cp
f
38.5659 264.695 mo
38.5659 265.465 37.9424 266.089 37.1729 266.089 cv
36.4033 266.089 35.7798 265.465 35.7798 264.695 cv
35.7798 263.926 36.4033 263.303 37.1729 263.303 cv
37.9424 263.303 38.5659 263.926 38.5659 264.695 cv
cp
f
42.8916 264.695 mo
42.8916 265.465 42.2681 266.089 41.4985 266.089 cv
40.729 266.089 40.1055 265.465 40.1055 264.695 cv
40.1055 263.926 40.729 263.303 41.4985 263.303 cv
42.2681 263.303 42.8916 263.926 42.8916 264.695 cv
cp
f
47.2173 264.695 mo
47.2173 265.465 46.5938 266.089 45.8242 266.089 cv
45.0547 266.089 44.4312 265.465 44.4312 264.695 cv
44.4312 263.926 45.0547 263.303 45.8242 263.303 cv
46.5938 263.303 47.2173 263.926 47.2173 264.695 cv
cp
f
51.543 264.695 mo
51.543 265.465 50.9194 266.089 50.1499 266.089 cv
49.3804 266.089 48.7568 265.465 48.7568 264.695 cv
48.7568 263.926 49.3804 263.303 50.1499 263.303 cv
50.9194 263.303 51.543 263.926 51.543 264.695 cv
cp
f
55.8687 264.695 mo
55.8687 265.465 55.2451 266.089 54.4756 266.089 cv
53.7061 266.089 53.0825 265.465 53.0825 264.695 cv
53.0825 263.926 53.7061 263.303 54.4756 263.303 cv
55.2451 263.303 55.8687 263.926 55.8687 264.695 cv
cp
f
60.1943 264.695 mo
60.1943 265.465 59.5708 266.089 58.8013 266.089 cv
58.0317 266.089 57.4082 265.465 57.4082 264.695 cv
57.4082 263.926 58.0317 263.303 58.8013 263.303 cv
59.5708 263.303 60.1943 263.926 60.1943 264.695 cv
cp
f
64.52 264.695 mo
64.52 265.465 63.896 266.089 63.1274 266.089 cv
62.3579 266.089 61.7329 265.465 61.7329 264.695 cv
61.7329 263.926 62.3579 263.303 63.1274 263.303 cv
63.896 263.303 64.52 263.926 64.52 264.695 cv
cp
f
68.8462 264.695 mo
68.8462 265.465 68.2212 266.089 67.4526 266.089 cv
66.6831 266.089 66.0591 265.465 66.0591 264.695 cv
66.0591 263.926 66.6831 263.303 67.4526 263.303 cv
68.2212 263.303 68.8462 263.926 68.8462 264.695 cv
cp
f
73.1714 264.695 mo
73.1714 265.465 72.5474 266.089 71.7778 266.089 cv
71.0083 266.089 70.3853 265.465 70.3853 264.695 cv
70.3853 263.926 71.0083 263.303 71.7778 263.303 cv
72.5474 263.303 73.1714 263.926 73.1714 264.695 cv
cp
f
77.4966 264.695 mo
77.4966 265.465 76.8735 266.089 76.104 266.089 cv
75.3345 266.089 74.7104 265.465 74.7104 264.695 cv
74.7104 263.926 75.3345 263.303 76.104 263.303 cv
76.8735 263.303 77.4966 263.926 77.4966 264.695 cv
cp
f
81.8228 264.695 mo
81.8228 265.465 81.1987 266.089 80.4292 266.089 cv
79.6606 266.089 79.0356 265.465 79.0356 264.695 cv
79.0356 263.926 79.6606 263.303 80.4292 263.303 cv
81.1987 263.303 81.8228 263.926 81.8228 264.695 cv
cp
f
86.1489 264.695 mo
86.1489 265.465 85.5239 266.089 84.7544 266.089 cv
83.9849 266.089 83.3618 265.465 83.3618 264.695 cv
83.3618 263.926 83.9849 263.303 84.7544 263.303 cv
85.5239 263.303 86.1489 263.926 86.1489 264.695 cv
cp
f
90.4731 264.695 mo
90.4731 265.465 89.8501 266.089 89.0806 266.089 cv
88.311 266.089 87.688 265.465 87.688 264.695 cv
87.688 263.926 88.311 263.303 89.0806 263.303 cv
89.8501 263.303 90.4731 263.926 90.4731 264.695 cv
cp
f
94.7993 264.695 mo
94.7993 265.465 94.1763 266.089 93.4067 266.089 cv
92.6372 266.089 92.0132 265.465 92.0132 264.695 cv
92.0132 263.926 92.6372 263.303 93.4067 263.303 cv
94.1763 263.303 94.7993 263.926 94.7993 264.695 cv
cp
f
99.1255 264.695 mo
99.1255 265.465 98.5015 266.089 97.7319 266.089 cv
96.9624 266.089 96.3384 265.465 96.3384 264.695 cv
96.3384 263.926 96.9624 263.303 97.7319 263.303 cv
98.5015 263.303 99.1255 263.926 99.1255 264.695 cv
cp
f
103.451 264.695 mo
103.451 265.465 102.827 266.089 102.057 266.089 cv
101.288 266.089 100.665 265.465 100.665 264.695 cv
100.665 263.926 101.288 263.303 102.057 263.303 cv
102.827 263.303 103.451 263.926 103.451 264.695 cv
cp
f
107.776 264.695 mo
107.776 265.465 107.153 266.089 106.383 266.089 cv
105.614 266.089 104.991 265.465 104.991 264.695 cv
104.991 263.926 105.614 263.303 106.383 263.303 cv
107.153 263.303 107.776 263.926 107.776 264.695 cv
cp
f
112.102 264.695 mo
112.102 265.465 111.478 266.089 110.709 266.089 cv
109.94 266.089 109.315 265.465 109.315 264.695 cv
109.315 263.926 109.94 263.303 110.709 263.303 cv
111.478 263.303 112.102 263.926 112.102 264.695 cv
cp
f
116.428 264.695 mo
116.428 265.465 115.803 266.089 115.035 266.089 cv
114.265 266.089 113.641 265.465 113.641 264.695 cv
113.641 263.926 114.265 263.303 115.035 263.303 cv
115.803 263.303 116.428 263.926 116.428 264.695 cv
cp
f
120.753 264.695 mo
120.753 265.465 120.129 266.089 119.36 266.089 cv
118.59 266.089 117.967 265.465 117.967 264.695 cv
117.967 263.926 118.59 263.303 119.36 263.303 cv
120.129 263.303 120.753 263.926 120.753 264.695 cv
cp
f
125.079 264.695 mo
125.079 265.465 124.456 266.089 123.686 266.089 cv
122.917 266.089 122.292 265.465 122.292 264.695 cv
122.292 263.926 122.917 263.303 123.686 263.303 cv
124.456 263.303 125.079 263.926 125.079 264.695 cv
cp
f
129.405 264.695 mo
129.405 265.465 128.781 266.089 128.011 266.089 cv
127.242 266.089 126.618 265.465 126.618 264.695 cv
126.618 263.926 127.242 263.303 128.011 263.303 cv
128.781 263.303 129.405 263.926 129.405 264.695 cv
cp
f
133.731 264.695 mo
133.731 265.465 133.106 266.089 132.336 266.089 cv
131.567 266.089 130.944 265.465 130.944 264.695 cv
130.944 263.926 131.567 263.303 132.336 263.303 cv
133.106 263.303 133.731 263.926 133.731 264.695 cv
cp
f
138.055 264.695 mo
138.055 265.465 137.432 266.089 136.663 266.089 cv
135.893 266.089 135.27 265.465 135.27 264.695 cv
135.27 263.926 135.893 263.303 136.663 263.303 cv
137.432 263.303 138.055 263.926 138.055 264.695 cv
cp
f
142.381 264.695 mo
142.381 265.465 141.758 266.089 140.989 266.089 cv
140.219 266.089 139.595 265.465 139.595 264.695 cv
139.595 263.926 140.219 263.303 140.989 263.303 cv
141.758 263.303 142.381 263.926 142.381 264.695 cv
cp
f
146.708 264.695 mo
146.708 265.465 146.083 266.089 145.314 266.089 cv
144.544 266.089 143.92 265.465 143.92 264.695 cv
143.92 263.926 144.544 263.303 145.314 263.303 cv
146.083 263.303 146.708 263.926 146.708 264.695 cv
cp
f
151.033 264.695 mo
151.033 265.465 150.409 266.089 149.639 266.089 cv
148.87 266.089 148.247 265.465 148.247 264.695 cv
148.247 263.926 148.87 263.303 149.639 263.303 cv
150.409 263.303 151.033 263.926 151.033 264.695 cv
cp
f
284.607 340.801 mo
274.291 340.801 li
274.291 347.856 li
284.607 347.856 li
284.607 340.801 li
.584314 .847059 .913725 rgb
f
280.459 347.856 mo
277.786 347.856 li
279.696 340.818 li
282.372 340.818 li
280.459 347.856 li
.709804 .894118 .941176 rgb
f
292.153 418.386 mo
266.575 418.386 li
266.575 407.311 li
292.153 407.311 li
292.153 418.386 li
cp
.501961 .501961 .501961 rgb
f
293.814 407.311 mo
264.913 407.311 li
264.913 404.812 li
293.814 404.812 li
293.814 407.311 li
cp
.301961 .301961 .301961 rgb
f
283.857 350.645 mo
280.862 350.645 277.866 350.645 274.87 350.645 cv
272.106 368.7 269.34 386.756 266.575 404.812 cv
275.102 404.812 283.625 404.812 292.153 404.812 cv
289.386 386.756 286.622 368.7 283.857 350.645 cv
cp
.909804 .909804 .909804 rgb
f
284.607 344.465 mo
279.753 344.465 li
279.146 344.465 li
274.292 344.465 li
274.292 340.975 li
277.731 340.975 281.168 340.975 284.607 340.975 cv
284.607 344.465 li
cp
284.607 346.02 mo
279.753 346.02 li
279.753 344.748 li
284.607 344.748 li
284.607 346.02 li
cp
284.607 347.856 mo
279.753 347.856 li
279.753 346.302 li
284.607 346.302 li
284.607 347.856 li
cp
274.292 347.856 mo
274.292 346.302 li
279.146 346.302 li
279.146 347.856 li
274.292 347.856 li
cp
274.292 344.748 mo
279.146 344.748 li
279.146 346.02 li
274.292 346.02 li
274.292 344.748 li
cp
273.684 337.284 mo
273.684 338.514 273.684 339.745 273.684 340.975 cv
273.684 344.465 li
273.684 344.748 li
273.684 346.02 li
273.684 346.302 li
273.684 347.856 li
273.684 350.645 li
285.215 350.645 li
285.215 347.856 li
285.215 346.302 li
285.215 346.02 li
285.215 344.748 li
285.215 344.465 li
285.215 340.975 li
285.215 340.801 li
285.215 339.629 285.215 338.456 285.215 337.284 cv
283.03 332.233 275.869 332.233 273.684 337.284 cv
cp
.898039 .45098 .407843 rgb
f
286.337 366.84 mo
272.39 366.84 li
273.851 357.304 li
284.876 357.304 li
286.337 366.84 li
cp
f
288.92 383.707 mo
269.807 383.707 li
271.268 374.17 li
287.459 374.17 li
288.92 383.707 li
cp
f
291.503 400.573 mo
267.224 400.573 li
268.686 391.037 li
290.042 391.037 li
291.503 400.573 li
cp
f
293.814 422.753 mo
264.913 422.753 li
264.913 418.386 li
293.814 418.386 li
293.814 422.753 li
cp
.258824 .258824 .258824 rgb
f
286.337 366.84 mo
284.876 357.304 li
279.364 357.304 li
279.364 366.84 li
286.337 366.84 li
cp
1 .52549 .501961 rgb
f
288.92 383.707 mo
287.459 374.17 li
279.364 374.17 li
279.364 383.707 li
288.92 383.707 li
cp
f
291.503 400.573 mo
290.042 391.037 li
279.364 391.037 li
279.364 400.573 li
291.503 400.573 li
cp
f
284.607 346.02 mo
279.753 346.02 li
279.753 344.748 li
284.607 344.748 li
284.607 346.02 li
cp
284.607 347.856 mo
279.753 347.856 li
279.753 346.302 li
284.607 346.302 li
284.607 347.856 li
cp
285.215 347.856 mo
285.215 346.302 li
285.215 346.02 li
285.215 344.748 li
285.215 344.465 li
285.215 340.975 li
285.215 340.801 li
285.215 339.629 285.215 338.456 285.215 337.284 cv
284.123 334.76 281.787 333.497 279.45 333.497 cv
279.45 340.975 li
281.168 340.975 282.888 340.975 284.607 340.975 cv
284.607 344.465 li
279.753 344.465 li
279.45 344.465 li
279.45 350.645 li
285.215 350.645 li
285.215 347.856 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (kot) ()
%%Title: (1509.i120.004.P.m007.c20.ships.eps)
%%CreationDate: 9/9/2015 2:41 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+]fC8\5^97DF:*G/g7_JdnOGaAI!Wg^W&[hZE\%#s-pP7q@^Sf:HZE^[e%CaMA7(,4HEmC(/Vp/me@3O7df#s?T7BZ14
%H:CghX+p%Q%,K10\psWj@GsZ:-uAY>ah"Wh@7E>Z.gkE^ZAPdL:aE)EVPRe=6DN&4L%W`"X&05Ym<k\_BXQGJq-QENZQEGfP9BH?
%XB$9iAocFpF9Q6g*V7da<("FJWWerPPuT505Gc58g/&,+^jA\_:NpQ8F<#Hb!#sFIfb][WF3,aPQ2VO`*JG;pG,H's.ZO:k--YZA
%=BtN=fF7NU<48AqiGT;LAd[LBd&hK$btOW8DECK/XC=22d);/,Q*R&+Q2VKfa1kS$8s"P'.fPL8?,+:(/YcqeDWgMnJ8Jti_,<%C
%$'-r@5eY_KVCW@A8AULoeuT(HOF'e[ZY!g7^QLflB'9?>\7urWbYlZDWSjmn4!IJU^#@:0puctc72V9,QKUc@eN'f1(OF7Y&PtnA
%+*FVmlV5(@!HM>-k&L^n2p,PDd#3hZeUY4fJK9/r*%+&<,4#;F2QC&Ys*D[^jKhqDg0X8!6uGpl,6uJtIaWI6J?G>+4O(19?YnKB
%\>h,Ba8l^WAB2eAYrn><p"J%GLVS9BXia)/^:rktG?UFbpi<uH.E?7=CDhml#_T4B\6O:c5QU7I-`ft^<UDWXT3uUa]72Bc34\D,
%cK[\!aefqp3>q1QKcI=B]b#8e8@KSVJ<'FUPP`l:g[J0nJ%CZ4QA(s6MkBgX9\":`eocA?lhFH2q5Ng]E@tj+R*Dr+QXsS`bJJ(]
%jnl>]f>TkTMg8S&8&\aMZah]#_`Re7D#$2*bNH-D5*&M1H-G=Gpsf$iMi.BqB(14$`'?-"$k]tj:U-jGY+nD%0?f/qi?r5)]Hjr`
%%$AD&b_&IF-fH]"_1`ISr5;ru'RjLk9J!=bOhso2*H*VLn\S=pV@3K;6e(T=oCtMHa^-1LRF4c%-5CuM;9#1>@.5$pDP)HG>pZiH
%5KnjAi[7dG*Qa]?1XU2eK@pf+g!`V5/rVdL-iQF8R1Jdc!09_HM:iG1r8c.6G%'Ac"PBU4"Ti"NP3b46O_Km0R!=cPN'/CN^b]ZZ
%1=n+iNO-]UQj44f4GjDBEQ4Lj,EDPUfpLA'8#?Y1`_Xg2#XWOQj`2V$q7$mrFNMgkBdDRJnB<Z3'QT;V^1HRcHq\m)R>FGLbDq_[
%1&.,1[a3KF"oOnj$/g*%11t[c1P*%CTDgPqa.o9M5]Jf1j)HE&'orIZF?'P7:8Hl(2p%1(pU6l?g`$N_,UX=f8Ku!9+Np(]@P4[\
%$N7k\+Y$L^:Xf)9r6>6MK7Cr!r""[S-7?dir6MhIGPo_c*/B#*:=Qj"rcoPLMSJso0#t`eDuL!\$O':_^\M6AaM6bRrhi0aKUg(H
%`)#f.r[iWi2r^bRH,K7^#1?<A$[*#o4\pbGeb;46.lrFLg@XVHIR2THF5<K!nf5ula7rK9n[IYMY3BC]X_8M^&JtHA*im_H)RbZ5
%=qU$QGWlfH+RF\rb:]/76K$oE'/.S'+e*_%*WA1^D>;8#S;chbH/7O2kpg/mSqEDV52JR]%TH[9Qq<m=]#>HeN!O),JssSSjPc`o
%;"['ecNO^!7EFEA1U2)Oj!5Y(&]_*ir.J+D.R:s`,k/ZH7)^mbF_D^*6/6Gk5[-cPTSi3*RLbL)5TJZZ!-A`Z1\$ZY@l6;I9;H(_
%iXc%,hq0u;qab'<Q\KS_FM,75)?Dg?PDUU;fG^KXRk^l>M.i9Jm!F3,4_'YGK@jQ>"qh>9QIf@e)7#A`oI?e.T7M2[U:Q+>!HpYi
%OpP_5$M'3AZ$f"RIj=&($2RM0J3GTa*o^oq?BP(g7DaANlh+Tjr.&=jOI\d.`-%r4E)<0ON'1$%-4Q,1oBE_7$)A<"T_gheHi]um
%L5_lh3ceIW#7R<caFhcgDnPE<J+m1X&=Bh]7R4Q/P"8&S)BrCjQYcW8Om@CjUng/*%qHBu,DJiWKjdXqRIb)S!(<-Pg(oMQg[Z&g
%J@7qm[VQ>*!BepmMu8<O"C"+uF96L2OO6cBMEFk"I/H(g4T8(9opECPahOf78c`H*VCK\-l7VkO?Dk'rQmbR'(1;8-m0ZHl6!X[*
%JBtG*5/]d@WCHq,aO$O<_F:(T>ZUbAq]1jjN_$H8bI-4GNc2!+=WI<o^X7X2d7De>:.@8p"T[6LXLt#UR^VHo"hZtPZp!.ErmhF"
%*hL8.ipN0`B1[L*R%:0l0W+q-\GQfq;mZ(C6#h2)EtrTl%:dig;2bCUk>amYO@eCmNsNOd,J!siJ:NW/*qi))^.n-75Uq(:!$I+B
%*Jg@,Wm9Ke%okKK/kd/Q>Nu*GUf4F/M*BlW<_8o_23?H%&4.aClU5G;DnAF@N\:T=!,M>,,F?2O&P&A3guT[H(?3ZtQAQ6(gfLaZ
%#QI9A;3HeLcdE2S6pAI,J*07cGq;EPKeB&GPTgT,i%lljbWG<ljrIu,4%F"(&atR7T*#/aS;W#E#7c<Wr/K@/LeU/c0SiCN^1^35
%A?oX^T_iJn0Qnue8Ifa-K"pj%1*+T%#=SlT0@*#;o^JHEdtlJ8[\f-5p]h--\K/^1rI_"7#@"!Z4oWGs,$k+[:mU0$Nd2g+NB,GU
%3;!"*%O;=aFX3cG\+1:E+A`q0`mB\'nHW.C7&C-"JLmBYA'N-m->"]qEOGpH3faBr+G/:6T.7j0cPIJ<CQ^g!77ujb/7b3r(#:[/
%0ShHhJ\o6&`21W"c>gGjQG<;L=ZgsYIFX0m:du4E0rYL:PT7-dF3164Hj^\2`5CZs\&8ojdDE_IrBeq`M=14XdIgq05a%ZWOEGef
%^;YOp49D"t5Y$KbEZb$^VQ(>$:kSe2;t;P3F;Q9"%CGS4<<S"eHgj%g3)r6_(?cZJ!Gi3E;:aY,:`VB(3\FOGi3#qtfh0([nH%"0
%-n/TfJ.dL8!+%p&7bA"AW(i=l<<T:I^@@D:1SfPo_PG(172Ga3<]$t20-i3l*7G^Ug*D<?#:iVV%+sn'`VssqI;maV^Y&h4Ts+T.
%$uJJLhmV2(_*9d&D26@=;V1[`D%9Q*##<,.prFS!"JlEO'?%+%3ZdqC6!H_&krH,$+GYY2Ch+L/!Z=g3q5OX6+\*DDc9P0RY$1[)
%d>/pnq%Ap`M]=@QLalW9BTeEFeY,J;l@Hg:IPcoi9!5?)*SX"=SRFiDNN=,U/)kUucGhfp9;W6XVq\/O*?c>oR)KOP?gufYpm?0e
%!5R]@>ecI)9qKtY_SF=!C31*ARR5&KCg'VrNpDY=d?a%s2Do5FALC%D)rqJ78ih^l@`Oj"1F.14@\G"rX.Tj%>l;Kd15Rk-Dt1I>
%dVPOq"Vd[p2lV^X4f<=*%]CkR)eQB0)fc`EiYZp?`p.C@m<Mof&qBYnT\6VTZ!W<_^1:F4Fi59$&afZe;?Q.o^NIl2o?mj6cq=P3
%*YIGlKO`M$O]b.*#\4Wa:EYEuMCF([(Gi13;Vr_EW6Jc]6tEML@Pj6]$-Mj.)&:h9.YRt(ngl@]%MK\%`5:$?nW3e?"drC[,9ZI(
%2aW%dS(?IDUurEiSm[Dn`T[L1#-p'%9JV]M.[s(Vn0WD$=MF-=YIF7_)Ia[/4D7q")8Suiq.%U.F*V:>A#O:.(<A>V53S0^-FSa,
%3q#S%(.A:K:Xn,Z;iF"9,9^V"Ms<tkj8s'<-q2,^o<_f]('jAYmj7Q:kn#ec+BSe;]?sglnN+3OkVciGbVCASjbY6Tc:+KWjt7(J
%!2(%*Z7/gS+N'#g-6=E`N"TYH(;eE3gUg,spsWfC&6@F%o,$q\Mk.a;dN(?^\ee"hd3h,c/gVpTkC?3AqUFP&:[iT_I?%l@$B.`=
%LQ`O2?"=9%cc7ZsGarT423!^%L.%-j:bc?Tn>#a^%ej,cksGC%"dB+OH=E;@9?pp8$q)kZNG`Ca3Y*-/(hfqo_j;LNV,Sd5Miq%-
%i<i+QQ>[n'2,fj1%GSg]7%U=AM[0EF3'V!X]>+j!%*Mea4^V"h^Y(/="ku#aTRh+L;qsi-JDRS):_4m[jm*i;qEj`e22B5a0$*01
%M3o(2#)c8+>OinQUc@I`XC6MXU5Et\;B2YY"D4`^"e;G/aZ9P/!J-mAQOTTW,E3&*Q(^iZ+q8Po'A8Mg4Cq?VSKn4R66[>-#n"l`
%s1K6u6oP;baCIe/Z3B3502b^<:Vh=%Nrl:E[u?L%d:3JNJR<(akK$4Wg1?M9*?QO;BiKeA084utBsoG<0Jd_tp2#YH%[*fO`ri`j
%/A_IB.07;<dOYdH+F9.kFdd!3ifG)<(%]&S<SNY('#?gC38'HI_E_Nn$R8b96p6:EjpTfG@i@T9N[P9,MpXl;B5u&d@piLq2$Yc[
%W2@XKRM]n#BOi%#[LC-t,.mC-D\a."Td&YSpQ6`-0]\!t5`B3i#e*?]nol/DmC\5j.V;p"^)\1[RN@li`'c>=*3nXra>OME`rr3P
%Yi`%.c7)Xl)B"EdUOX8(UhSn/Hs2tf39F`4bcu03C?2Ou.q)T&g*:%an7*]h`OMio)NpOji=X,Q;+NZ%;%W>geKe5;o.gE`P%0JT
%9ULU@T=@Go5.4a-eu0rEkcag[D<g+B\iA'Z@766Rq,-;mZGU-?-7to^=E.tnB$E($9JYsO-DBe=So5ddW46G17c^g"]1TE?]cPA6
%'i8&AC#g[SA`R`W=_tN9IN1F:&i2NnR&IloJNJf;ZU]]oJt3J]=Z#f:-bH.hLdhS/[tI[HM8AL4^)6.@PU)J%(%jY!eO8"s!*;Zh
%-t82\VAhtgg#^13l9+_"a=O,HR&q)?:EcO41)b!f(Qj.d\ZAc(.9**ao0m*LJ^8R]!CL]b1PG7k%A>VtO;5oA8(GQQCF&_Dk6hpp
%ptJaQI:J0d5+%>iWQYFE.VT)TjoA+eEYLTiL*de3,&Y)MEZJYNjI6Y!;]G?\]SX?mA;UYDKat%#R3d7taZ<B-OkH?,0p9?u9SM1;
%<;c2k;<t<FP-%11.%j9SW2e5U*W'gdbLG9rM^e#->=I%&1P3bZ3T=o*X>IJej6Y^sDjl;"r$]fK'i/%%"sm_k'W$d@"G+C(aL:/J
%@N1RV-CunaCn*`Z'N39]0p-5I1uEfs-6>a`6JdE40)CGb74'6,r/A9>6W5hr+Q+sak^oO,'bgUd/s?-%;q4`rfd8_o(d$8Xf76ke
%:_VoVkB2E'^nb?^RVKd@3(o$JdsPT^"`e;77;I1/(=Eg!&JnsJoP.V^#_2pLR4?&<USQLXR[[](.1:ZB>PQ;4o/L)+_;ttm%S#s7
%G%d_(0>n$P.9:k?_52udnF0.N_te7*<)@DlY[+'9lUbrKPfJoGoDOe?.i&B:2u%DjLel6%G[tZT2'`F.Qs`I>+)p)k74:hUVqH$-
%f]XCO86QEg\-?rDOV?l.K51td:Zs`O;:-]W8/[RZGfV!De!FUACJH-#d1Ghr&aI7K+1Zbm&%oq_)*"n\@mB-s\1g3f1J(]>qAX2]
%7Y-Z6A:'6&BK7/iC.PKnTJ\#::YJa)6?CF]?l/VX%;BuP<T[k!*oM>E(:E;ei#^Rl7Qtcs:Z83^D\?9r+le1KU=8B?TbO8IBV7OT
%7g##(f.[I[kA$1/3XUj]>Vnb@B`:q-kYs\u-]hoYglu=gZ6bbuS)NuEj.8ND`Dti<I#dH=O`A74!VH^;#nbPVcVjE;/qQ?tbdNW8
%\/'f8OC6+cV)RJU(qc_uioD^FSNp"O"Pk>s@T&_Iej'L,*Han`;lBS+(O4<%W(NdV;(el"dA`>ZUTR)/9.JEE*b&'#IpmhG?ZU^$
%5(6-_;E=(WcfW9nAM8fJs6dihmC+\'(A?W3Xn<b#$T)<,3''dZ#s'O%L`pANXV#^hc9I5)16[>[GZT/#Eq;4/Aj&_pq<$[6&ojJ4
%lgmM?E7dIsPnpY9f_Zi#&Jg$EJt&&oL+_<T,Z:4poCDFI04(_kE^%hIqUG8KpuY/E6'($K'+O0,VHo6/N<o9`WKFQT"sAI5#\LYi
%0pH]fTbOXdE(i!\kb?AF?^p>kG)<2XS$0IH`=h8XZ5\LCD1t%Q02n(N795\0!"K_>dsE\LdnsAs:Qccj"PH[lR>+sd5[p3l.sd<o
%$*m7%i`HclR'Wb9rE<Fq-,^K+F,qTKR#UTTGlX$>3?H_(7fcFR&aL(B`'h2H=A\%[S!\8@'AjKKUO]q58s._Y&3?u7P`I-#7<%`W
%(Z"(%Uok=NC)'Ro'<JRr>/<le+%n@t2I9.1CE6LZ;K]?GdNaAJLC=ERU'4Zp*)GkJU^je`_O2q9L14i$\=!<'LoYNP'"d,PNE5,%
%RPGG@7qDub#23I$)M*%2.uY&nd(sZV;a+(iX<N>r_kN-EQ&248l8*A\T-l=3Kb[anE0&1Ed%UU-d`4TM[X#m:imuL-(OaVfKN(7Q
%hF1Rf`J\Q)LCCQ+Q5m*pZ?,q<pQUD^ij[%Ud:A6R5%&!O.QUaSUb[R!YYc!jiCqb+H3%+F0M`$jd'Cl#/<g<G3f?N2kmSaIrpkGV
%]+g'rHdZnM4k#@N!T,B-.KGkFE?q4`n+pKC5aCo-R8sL8S31,XQk)LA9FNFaWT6B(>-MO.hY\U%Dds&j11VeqC$X5?(dpXk/1rFR
%I/enM66lS*V!A:E?BuBt:9ccRN@?^Ej2dlCG8=^:Fp4pFj(V1lXMjF"EM[G-)i0^.^_A8Y0UuY8jgQ3[_^1N1"N[eL]7hZ&/72.d
%R5+[#DW3;/k6<Fe*0JSmpkS'p-^F;u'%Dsq2nkW(BTWIpi?&gO$R"uq!ciRD\7c95_rtP_#G:(nIks(q3,';nr.>bOdh5k+h8jMJ
%$!TTFT'W7g]jlnZZ\jEESegGgQf/Q7nC,m#eh`cn`,BrKdKk'2V+FRM*r@M$dFMoOH7oIb!^;&9T14K<NY[?=S:F<<0`d6H+MrS<
%&egjk(Cq?_cp/uaBfH+5nXBc(NO*"3;?AgP8T_oZgW''*^.[oj_c^B[`BTo*Ho]9?a8'mfB/O:40gk?Md'&h^;fb,sRa<=S.kY3,
%NkQMS4E6oi>]EOIjD_LTc8)\G[].$\+pl-<PEYk=aN>-MJk`,):kl,l!IF0tBp!U<TK'&"J>Y>8@/T!M#d#=?D6Hg86]^Ku'uemH
%U"%$!$5LP``NuBg_r_#4[ToF&NQa2>";N%fH,;C)%OOpac2an<UF<]1(YRF<8qb'I\%sTIC%d`lpkW&q;\>J=A[Np:6d)qt0ZP33
%p&_>:ftjIr[I[l+Mr[O9p:sV[2o,)RH$jlHN2*>Hloa$F2S3RQBrLSbY:8Q>>"p0?RTq?E.VIN_*"4(H[F0^AC*Ju1)!YL+-nT^Q
%G@7AiU;2`,diM$`CgG>8lS7pS.<K#'$H9EuJBM(ee46TK<=rme>t^*YD)n.ZCg)ql#$u3N]uY48'VFPZMC2G#k*"1&U(_Z-9Y>V8
%(Mbd,Ncr7[+]X)-*ARsAP&QKtj@b%IM-&p=+kIcsVco1aHc4l?hpXRC^]9JHNG\VY`%nHbN!p:iW/Ed$WYgOJEq&8&?rX_?*5"uB
%5NItB,YIG$bBH8mO?d+\7@k>ha1)S%0:RZ@_*nYp6!Q<(:*(N4EkIooB+cofKO%<J1GqC#Vb]rCo!EYYLRboRA`6;PGU$QsEZN47
%9umoJA5Yk.)Me$J0+;f@J]t-+ZOrrH,$0SI<_VFBc?!Rd:!_j)4R.3FLCA5)'B7lX.#nSOK3&lY:ks=R*&r5!e;6sZXdirhMH`Lp
%$-u(]XB&.e9WcEE(X>;KKe*hB,!tCQ=CMl8&5W[/>,LP(3//Yi/092A+#9eiNWr<H,qHhk<VG]_>-9$.7\3_>Gs3FB%"&BidLhB>
%JV>eL`t;%+AMWLP+DU-&U7`&PZJ6Q(63h9<g[ZjBBMG_K.Dj1j9q17<T.+)se,,"9:UeK>BV_<_Ot6nl^IUfB.2Zk5n&G^.;H-*[
%OubUs!l,er-kLV@J/"_Dn/sb9fK-OcSdd<VWJXhd*0,Jg9q.Ysdj.<&3GCcSLDDu4aUQ1t^GJ0$-QoYq,8(T1`SrDo$Ye\&7`).4
%"]N"89C]iG]JpOQ)gS,DH-I@M,)H]LS8lVC0I706]7<@+F(Hmfqh#F$j8m+*V]0TZHDE0@&tNKP6(.tQ3I3Y]J=.7cD!1B3;i4Gq
%7CX$kO#aueha0p/aEfKmJcX88?mP';IrRm"kRI6+Sm@L'%i'g2]3"VdJ]MZF.m"qh(VuDIUlrn+@qh-'LL`u50PeP+o&PrkOLb/?
%#C(K(OFoQ2fT;Ds\$R@XlHfl-.p`\$`07B20iWXYKi5J<`MX<+P&l^]b7Ou"=AlZESljg'U_:J;n4*'V@[t$V,+i"[VQ:hYO4:Ju
%9ALTjS:jDP&ikCUNH[&`#U#-1$'W;9q[qTD3@LIP;cQ'08/sK2IMWA(`OKBl'&&L\.4sY=WtoK1i`Rllc`eV5%1Q?;:1/\9"L&9Q
%H5ZI&&@_I)%JSnu>on5$Lr38gg:.\iiudp[3:(aVJ+2;1P]6K!!<jrqgh>].s1I?(cKScF$P0^NNG`g8Ibsk[5DrjYE>E0CL8@Y?
%<V^Q8c5`@&LEB0W`Qu,mIF^"3ZYmQiWI1*@VjS<r_fJbok8A_Vf]%H#(GtWj$0`f"Z#-F$C+gN*RS+lUo;b/-bj\OZ90_D4*5Bse
%08/MJ<\:K4Z`[sM&&Mm.0l3_EL_p1"ppP:SLW_S2>Z\301TWL'fY5#C"SHft?-m>`J`X*Se:UeV*rJB%mR(EUZ`T/28T^88B=Kbe
%#8X&ZM0eJO[(KK9$.&gj+fW6e>O<d0)&8l.&IKa=,T`ds.d1,LEn.C#DZ=bZWAYP<_VhmPo1(XqVU@_Qr2Y"lW)hV0JkHi_,\^$s
%(brd0RM\.Z">a*_[kq&>M/f7FBN3!i#APS,E`B*Z3=nbLUmVPi'*4D^^7DK.5H$B3>M]!ak+pD'rc;OaH7T)Q)M.u9'o4B&"&1'g
%RnZ')[5n`C^B9*:o5B=h'p@2"":&ZM+B:CV?9k+nWn#6\.qi6i9"u/C/Ko&/bgd@Fe.AiWRA<H#Hm<Z!i(YN%8i0HBYuE$)-R9N,
%[M`T).#bDF3/3Z!Jg<\WgJU"F9Ec,!f:&3Y5_\FD'[%5q?\YMr)tP'L)0AK;RD$aG.qhr"&W-g]qRf]Z"/*]j8ge/U9^O-a+dKY^
%$#:%r_1@1GD*:3-/+sVka'b:4?sY2)a48_&L8Cp>_rJ5\I\kc7D<'3Aqoh,!HG@5hW_j8j^/-9;(2lM)f8)p9RDlpUeN,ft"e)kL
%BAH;g7_oFBoNJAi5>UOL;D#Ap3p"^DCHM2ar")(R^X-qPLPr1,/1bA`NhOnt7;o&q6+&4`?&"W&bKc2soq9=X!!8R.AYRTJZVp3r
%VSG[^)](7=E^17A<0"ubS/@5D,#!Pp:[W42l0Y!ee`LF^WfBQP;GMcXAf;I@Bt3V5$64Lh2@@>]0o<bSdEO(!-VYq2\ui:k3('N]
%1aTZ]87FuPNs25'j1&"gANLg$2W_hn;U`^JT%mi9f;rGA7dM[>LOLcOd=lI41B@=CNsdsb1hQDum@_r8I\uD8AEImjKYqR^>-5$b
%Xemg5AB'kNAf/bW9e_XZ]A^j[Tojm$B$-12;_T7P$HYanC^"4gVs'@)laXIk\C#/Y_JOH4;cjgQnF*V5lB=DH.eR3_UDFGXm,KDL
%W&5N2o&N[WQTKeNm,-1jX;/VDbf8G'Rm;)XY1t;6ElQn"S%E^)+;<(*!LULL=,fh!m`\CZ1RB9m1o7ok$DBHRjlX;4gm=N-EcYUU
%hsSZ*ZfTB,6>&o<3Uh'0iQn`SHl8.fJ'Q!>eZ(M0hG-*WB%u3O9hA+T%-YeI(3@)d/qcG>FEh4D-RY=1>^2f>]>HJU'O/i:6+>[Q
%"SLPhlmCJ):;Li01ub;.f0g.;EZ-rE*hsiR2`rEnH8X!ogL99"d4iOLrIAjVb#)J6;]&U-Q08q<5;.fh/NnFB=#E]g:uiQ3c_X_M
%dI+HgK2Qr!$IU*IPC5%rrXg(DqStmGfXUa4nmG.tF=B0ZYjPPE<q3A*UE8"8TQRrhfFU`;?bTBUGCj&X(DiK;LLZSZ%NS9=s/$p]
%J&gb7Wp.ltF;NS'KuNNRJa^b$3,DRZS\9+WY*HU$j&c`?4^g9CV9q)?;Z`pUl,;<Z[g^sFAkla>HY1uZT%hM19UZ)TTbaecffI7#
%^e>DXMd<.s+'2ql*bfT?e)6m[%u3!S1b93gK7bmB*.h4fF'/l4BdT(B8i+cHAGIf6rP\$AC8F9Z:!Am_59g*&l.4TWH>bUr`n@'_
%@I#+*8ku4jPCB1LAq/Sb'_><go2RsVd8=OiQ-[5-NK&=\;9cMcn@pDa_'XXT;lUEenPS'U36_(W-8h:Pc0&,(Y&r,$248Gh*EoUF
%K/Ae9;s7l>b#5P[3)%SeCmt@5KchJ<e_=ap06)Wj'I%l*h2o/aRs6YG$c;4i?GW(0>irohIq23u_HPAj(u?_(N2C68s5s&e`]:i4
%GSTQR^)3K"ZR1+%chQ8n.Epa"ICh__b3Q$R]DjFApG+U`-Nu9SU3NP_K7[Ot>E[DdmHY'gIP5+FFAAiu1&6_Xc;LmsoLQ"sa@uMJ
%bYa73N;R6`YD:ZgYY$;%Um]cC<b,J1Gq#VZDNE]J,%K1^KhAs[%8%e8_R(CAVc)X+!iR`j*:?dN3_Dm@AZjjh4h%0uVV<p3WQ[?L
%&olo2D2O_7o]W72]ZoIrAR$9`#2[*d85-I>9@XiB5!%-)CH7[WIA@,Y9[BY5J^!R(ooh;fc;Um43j2M`l'?p$a4I$X7Qgo)6)iA9
%F`3WI:*PqH4>+"@Q$O:C=HHeqWhoY`RWZ#pXQ)VsL%n=7R;Dd9+YgR_HLm1*a]:t#7LK(9jU.TVR0L&IlNA`Io2_WP7U/cuYrNoD
%S:tJ^5J0NuCl!K!6H)WL8ib..<h*r1BEZjMK3p'(!R%/MZr5TpS9&L0PJU7:V")nQA+hI*HDQp"B<L#)">d8:gT!&:M)#YQ>%s:'
%U81(e>/D*IPphh1T2!:-P<RQ1HmQoD*u^MY:U[6,Mc-"?[4#aNR24=/j_I^kR$L[V(1ei":9'F2q.ii"Za:Jo%5RO_..ahprsN["
%?]-[J^<VN<.'pH"-'^lgGZ?guCJiM&1G'C8[')nieJFE53bELd8njUBU81(e>"8JZS>DXn2)VB0neP,5S:*ERS*-VOiAL(\l.__;
%H91%\Tbo-[1UV_+[rY`G4^h*8F+e3FoiIT<hgD>oZ#<`f-Q?QV<Nt=tQ^PBh]8^(%k&N$W$0H8F0%]6+D(=UMYluRtF)AA0[1GEB
%0%K)^mGBMGk/Q+K)/F;m2OA1YC8mMh&NUrMr:ZqK,R"MRl'1O69`WIodHu^O4Wd-B82),To3p.d1T$<i;_6j:UlSEUiCi5PQSnK?
%3TKA.nlJpVX9QF7a7.C7V"&IUX>Pb#))5ut[oDYSn@VX@IdgsqZE@dVF:,!*1e?[J(MYb;029'844B-XCo[3*)(#(@S'h^5D=!b?
%bg9rSC)U@>]=ElsCGP10VIWX>5*ZO])fQ>F)t4tk2m7pocNC`&N\?T.)U6j$IfBL?G<G24;]R\Y22h7YU%<2-`]kf2@`IP8;Y&G8
%9=%hu*DQN+nr6hZd0A4qTK>hBrBkig:-ju.fM/1V8.k4#)AYt<Fp;OsS(X22LGXYEC5cXJ%1^:A1A0RuO3u'CJ]"_&]cJ/P0m[E5
%9'<JqG1)3'WR?g9'>d\B,u].E;l(`-B_032:m09e&TQ".SXRM_o/HX1o=snmhoVDg*Q,mLPK(f;q;;#GmhhtXB(B2iq>B]/rc^R+
%qg0LrZT%nWeg&H?CW]+=96*5Z4/!7M$'5,1kBuH6^@OAB>O0QKR^7$`hJJ&D7NI^b4UmHX.krYgq\</4NB]q.=KPh5Fs+\;#rgd9
%JRO%ZZ'ddi-,X`FSa:]DO3ME1+j.F!F"kbcU=G`]_I_W#CK`I*B1OJJ`b6D:MnK%7KPV\QRn(Ot+dKpSR"rcfU,EOGrC1"2Id$0p
%L<8(Dfsk^L@=86Z`,Gg#=660]n[$ZBL7O<)=Pd_uK)3i>m<SVG**_j,Lh;BApm!VkPfPpE)<%C,.JRhXf'Nl-*jS:bbFE&PdhF8G
%LtG'h4P$nh"a2`rKLmk_C_+BrQ6RmNi57qf+54uD"C=^dcJBP.>cna-(]S6%pQm?@HbIMQ&58d!,db%:1g_mk&%p*g0D!!&D:+dW
%?KQg*H/N6TGknfP?::07""ti*6h-Lgi+7L'd!=R22M%4bl/()rk;+gnUgrBQ9Q^JPju/[<<D[/a6S,S;-LI@ZN5d<7VL,Y+1n,IY
%qIUCT2E@/sbpLls0]-^+J)Fe\l=L]RGl5O6Y8EdWrE-1D%YMpNGl(`+:9[!QFQGL>M.s+4kK<>($/gZlMmr>3Va`VjG@6lA*LL`l
%YOgS:k.<:+MbX4/q\1&X#3Ejso0[8)mB-:#]2$W.b+BN7@-V*3:N93AH'f$-=_I9VpfK$U%Ok.WV+d(94=4B\29sP&@0]:i.kIS4
%ajW01%g^4*UCZj<H?V9<JP#0q=Zn<_m\.mqLSj@Z_IsFm%+D<uMDC2bj/GKdFT/A+;_:?Mq8T;Gs(1'YDr0Jt/D.&(AdS`9A,hS:
%r(Vr7)FrklGoU<<4994=a-\'CB'SCnc4%WGdblg?@n`u%4)JJV*ljYg0da#8k&H?**+MV#)#kXa\J(cB5rS'#bic+$e-W.Y)O3/&
%R(;!CH:6;E"f9Xc?Hk:'*@?e.Ptl$qGcf$F`-`qtC9"b'HZG/T3@1/(URST_*Vuo-7lRN9dPqM\q8\1nROrFBh:_mg\t>sJ/=Cd"
%6RkMuEGBZ"8qY?hMuEH@6`CoF^<t<`TJ_oP%Acp(o6l>tU,N"!L=00LkH.3*NA./Ej2,?@bKt47A%]D^.G5Dj;fs!mr2W;%_rGWd
%*k0f\kcOtO-f*?V[gKEa3eN#?\,/`HZ[1'UmQ94rA=T@IgV)Z*&!Wr2o4MjT="8=S$bdg/G9VXkYmNT6p?)0-/c&)WJePlZ.h)il
%^#5qIat0$jl%Bq8`%//5MGLMLB^-f334rjAe]us:Rk.o!*LG$a\abWE\MlJAk2tOU/:2FeCpLT12]4$f[Pp-tbJRrIT1cG-`0@iS
%.577'F)uPCm`s)5\[afrmrmm<flH7RTegoU-Hhs,f4^C%>!X'<1@`*6W]C7=>WO-BgRjtC!uOr2"S3'?`rF1Maqs9>j;>D+hcF:$
%5N[?#M(.4]@Z8CQNpum.)e=mT(gR</RZHuF5H>!bX,RN824?h1deU;B.f.idr2QWN;N#q_ik(GQPu#Xa8r:m$$mQi3D^n9)bXFJ>
%En2eAd4%%:B;Ve`2Jp!mT.S_Sh<3mrf_n/WgR)p/kreDk?:'-uEA?7@Q`4;4YDRtK=)S_38HenuN!mDM-YsfiJlH>e:[W42Q!umP
%]A#@W8mto1HF(p<fRJQDl=4(s7PCT&R!-J.3jDS!`tMM4=3C#O,4F/PUn0oC"TPUR\uFfoUR^A]LK)S:p>ib7o;PP0)dtDUm./;)
%!^]4]:T3ud[,tuVhO.RP'5\WBl6+i\Yn#4K;("(Ormbi7_c0CZocb(977^g)i<3I?1,k*Q7aW4p7<=s^[f^Y%`pcqH75Gas^ZBb2
%'5fY^iB$)Bn""0>=(16Dh,hMb,Wc)aNJkJJ(aE*r`lQ[ILI`='L2G>eK7cA@3"0"ud=['+4rf/TV/ocI;f1nd<>oo/(@J%1:f"fS
%XB%B;6"Qu&3EM4S/C5_L3Mo[CPHGnSi%S5mF630]&ASs_(N8OEcZS:?lc*Xt+O:Q;S5c9HDIh_uoZ*Lh0pN_5K7!C;eu@Xb]d(oU
%D_O8:B>';[]P!+=[OL+$W"qX@.5oD;$5p!Y'_+-G/kR"@/`!9A>r(FsN3%k;>2)lbID_5T.@(V=3m[e"@r8Nj`,&RHZb",rh7jO\
%c7q0KHXs5'_Bp/$.;\I0h^.=NU.f&_kMUj^53t7!rtKB,0lq-rDIKKgjOflP8J7Oc5bq.eE];q@?:8bE^7"a.Uo$09GUi+FA4NJ@
%RrI(NdF9,bZ_WA<fA<-T/\f^PA,KibHFOWYV<Qg8Le_]Q'X<'QpheaS@o)MI9,#'E0-*c`(muZsbM!g[1[Akc4_M*@Z^ElO_CRXs
%`?F=%i%*,$Xe=N7:NM]9"S2K7Kg'BeVG4_RH0]Z>VBYNG=H1pqSqfK6oaWR!o;^?OL\#`cFhYfbDO+D]&HoR*"DP^,;3fU>]c8&I
%6tmtpS\Ajg&"scm@q\l<kJE-L4o+0"s1E*p1P_SC<kIjH5Y'l85[M!@(1qThDYl2q+4Pq$Ya%4^Pl\m%%l=,?+&o;+$W\)glUdjK
%?%^I@l#OT"[A?Pt!!GjbJo_0q%=o$E(^Ar^=?<5q)-'Pt_EX%3$iPPD?%1qD3le`RGT2CtbBi3p3rQoM\bHK`+TSM8"ZYZ[E![!,
%j%?FV%AQThjo@X,.OY.@+(35'Ht7(oG?d;+A1^_=2&C0^a)WcAYq90[_+i.RWbuTac])BpNg=tZ@6JYmeGEVJCDZEQ6e\.tT?McH
%dha</rW=2_i=LR;b5`]f&k=j?&,#3Xm'EhJT5E'"I'tUID@HFD(Yi6a^eitGKF>M2lQ;d<.[l5cgTKWL)/MajTLZ>kU0<;im'kqF
%]aC9kkgRr'E>VZm:+'R/%aWS@^%ggtb-sGaMN7k)&;g/]7Jc^Apu=So-+ItM1f9aOj3^#goP\hY%kD"b'%ct=7hNg6H?f@gG1NU$
%<W=^$5Pn?6[34ri1eQRB3*V*0"&-(@\gA)PeaR442#mph;dmK%iJJF,8#l<5<R#GsAXJ3W35*_V=ZB]7<,\E.$sN%XOld*``Wma+
%"VETYhOd_BWj>;<&$[(e7MYIq8WUd7/##TBE[A&q9E_Zo7X_Y_$i-f^dT&8I>:P4mB)S8on]qM]UCk%UR]`hE(`uC.1=Gg_fK9-,
%6=Kh*HEi!G-\KMQcVh7.C"+Ipr7rf[Y."Kid85UMTLmJ/s,1l<4F6DIru.K^)TqI=5::urVa-ESX-M-"LiGe'Z3kiDRC/eDW8<&J
%\tbAoP/Q>#'7c`jAJNt,7j=>cY[de\4t_-YkcGc7S^eIo)2[7l2;JDSY6i$<;mWV7Id/>_7P;/_(a]A9O?U3Ej!K0!)BH%=p;6FH
%6*##\3`o(k>V@og7Kl@VNfVWihihJKJ?kXM3,2kL."f)')h;r.0ea-\,%d!qk7Y<S8Wc@t<t3(<&Scj*M:t]"Ge;Zh$`Z^*ZWh:i
%`M*7,:E%Jgg"qM*k/jMUYhkD?Atm'O=D6N&`ifI0L\7m:3GaE:Y`hZRcV_C4Ngn]4gR">'T\ToYQ2abW/TVW7)qAh=!0gUDT\F1(
%4/7\3L?Osi_!M<uMf*JGAe#d)DGuS>I]9,5;Qq%'b:tCr8SUQgWaE?ERuL0m^7\Yl@is3S!34hUA>Pk38Ynna(&,#CPOZ5T7YG@*
%?S.rt=Wqid#PYn4<4Q[",(t^3XT52L:7)&lRR/@QF1[iPd"J!+=)-Q+O<CP=dF?E_E-Xl.B]3b,ctoNefcr1F%IBQPk+L6bCBUb[
%L5pN"B[Cu_ll44$o;/SUU(p/8EFe34']lPm;`BJE<Kf\.baX8oAEF^5e^>I$asu($+4PcEmGjS*C/7pZLhcks1FM-gSP6:nklbXa
%C8LO&O/9't0b/2n^?u2m.C0ii%'*;$TTtg;/kNYFG5Q6c.RA>![SU5EdfE^MABprY%bt-feAFrb?qQiph.\aL,0ad^d4de<7[kQ[
%`h23JE7QI0[GkPa=R+_()<FgnhWqV"Y7<`+X"T&7+M?;S"]^dcD9=P7@n4(\`*mGZd$$EaqukhUCjMa2c&q8;-Z()C=UAgHohHe8
%4VtIqOL8&i1kEV"PjfKnfEIr'*l("^,#-0NNLsX[M%T_T,>rn9$a`GGXo8HL""/^f$0W-#rZ^(\0o//FH+Qo`LNPufeuMe..Jm('
%Z]35'R!Ji[c5b=i?E9:3\&+q#g-CO])Qe$^*md/am8]q1qcq:I4i"oJK6!k4Bk/R?N2gGS"E1c$EWp#d:bN2FeZWUVVY?D16f(:O
%YnRYple8>9/N$Hh4MH5R>V&Tb\(67kTD$0CV-?UBojt*mi=i(5P^J(R;4f!RHcX74dRj!UeX/iJc3k[W)Tos^pHXOsiuTqL%*Nf,
%$RXV%YU\dD27rRJffIa&enSRKKDqRmB*_qDUaHT5*^psL1F6`po4ZkMjr6W,cBOJQU;hZQW(Fn$hM=TpVG\d]-!"TR)Sr_i[Fh`f
%qqa<U;M@EE.TPm/^:@8G=(q['pEMGpjuss?T<3NABq>?6Y"%JfJb!Zc_Zm4Q\N)0B$YZJu`'iUT`+C5L'p-eSNO,2PGpAO"7\^5P
%%&gL)V\YrZ(h00do/A=;=4oCZG)c+b/3D&'6lMN/(::6ufCBI;S_iYDm1:N^l.1#'`=g?[##Pm[*"j,%j)\$qm7oNCk.6?jU:qRO
%04l$r'$f5@H(3n6W6&d;4VZ03aBEl[,gJEK9:O1laEJ;k+d6S@RU<3XYQH%Y1.^RFg9>BVYtEOaQE=&;@@F<M8XD2JV]g2MC"kRZ
%D'^<D'_UV44l!OQHj*ESS2pJ3.C?n[C^jf,/70LWq"?CM5LkMOl64jjPr6KAs.cU[cZcMS.3!PY,@je7Cf`7SK7(Xho(5V/Ui*8t
%E]22neU@UAY_[2'BGr<PHi)hab10P$(>Gq.ZBQ8Mkk5L4r&<Sc=X/V*qOr"pIOMVHfgZ?d^n=c9%a92.p:t77p"qaU1GBcIf+EV'
%)nsDMb^gt%S01jtU"SYcd\sU:)1R[^Zs@EI9>>?U:n4LaDr8XZOJr>"E\cW/"A@s_C=#X?%[$9."@u1>F`[h+'Z?B@NJkDdA73R"
%!]r+jDTE2*hl1_W+dCL]95_r]1*2Fk5$;u[hAql\e7pg1jZtu0!li?\I'(<g]oh]Vj*;EIg,F.^YPF8V0e%-eP'Du/SCB>Dm%+>*
%.<<IjUr]'ZAC*:sYBR;6l3QXpR@:8L`q="2J%g+#//j`KT\aDc\oBQAT^gD6RhO&rRl\6RXbR\nL4F0eL$f/tY3cf`KGd)Ke48"h
%<O'7\6?'0!K8f3@!6kE2->HtlY_.Lm3kuQ\@pj_5g$D#1s0$%C2`qaDTDPq%Y$(?1Sf!^b@Z]P5.&0V"M.#87^5Xph-u_RT:j=q.
%MP7>Kf8gu9ZdC>[,]P5&qkieZ*9D(LGY)8Y&JbXsEpXPZK<h%ll_U)<KenR!7/LT"R.:ISH8LCs6ai+@6`HBYU))KRgUYO'0lO%o
%AZ]]MFdP["")BN'o*mH"+VX]QQ244f75](,ZW-gEUY-CFCih9Sf5=F.d!>"rP=,\IL)gTX?@U^n,r31(h^J8/`_j7`b$STM0Pm;8
%V1.a,5I0\(m3)o'6$"E%EP3^[Wa9W?3;=BZK-OH3<^X&D=;"&;qAVW$#6SV\;T9.qorDi>"%0a@opDQ,:AlYpMp7H=Z>DN<9#g'`
%k+IQj[PNb#O\q2kIbLc%]4<ZR>+*,=#oJ='6?H?!:JY.[ZPebK`KNr&TM3]>1Vc9oi@JV,U>qF4G37,oYb#P65I'%;SjC/XG[(OD
%OQ/,_)^"Y:37(,OAXCZSBiE"?g#d<<(&r#j1JQeb9V\0[0n`=.%'K4HW73Vg3g\#8BX3ePL8,+@@'*s#%BQKBAh"Lc$Sp7_bPf<"
%7DQE:.Ii(,)d`mQJ9U8^ErG"?\7O&/aJ1@Qh)LGrWjFS<qA$a$Or_sgP/^=>WE!XZ(";(^;)("*;HN-b2s7$+O#oY@%%Mfg7oQgE
%d-eOSce_^>5Ar=QHD)0a9_N!\M1irEf]@hK!b4-2bt#IpJt[=ZZmrJ3Zk66t4UNk=ZAno/QOKD><&;c7ja)mZTm70bC"S95L78Gb
%`M7@sCCnC?!+Lh#jW&)G4;E/*jb"mUa&^(C'E<]bg2GI[V9;o7()C:Sn64c9F#Z*t1TuVMq8dmFOL6H.Z,6d)<bXH&Zk<>XjBc3`
%)^d+R*o5h8X'[)<Y6eV;e0X)&K:%COeV;KfGIkXi(QNj.:lHU:J@Y$9ET%t[2sTMI#hrII!/XIZ_FZL,0iAu`$7':C$N#5;o";'R
%bGhF06a;\g2[ot--g'5Q1H.r`B]Ra@jLk!(A[ch`%k?+CN/\C?5e!=R'#Pn:rBg$[:S@R(JU@m_DV4KqFZdNI8u#XYj\?G(C!oO:
%Sm"DC:3tJNhFb^3#X0qa&.)/?')PKBFO-S=el@c!^P1k"LGV-VajFF,^',X+,9eF$$RQU`Oc!t-8($^-N>9,]d(`>a)L'X?:-Wu9
%NLr@_r1IY#09&Vuf"=n]E>EZiJmVr^O>Um2%N.*nYCSi7'I64#<[sr-E;_*38s*Grf\>9-GkT:klY,/-[=(G8gGN\Hq3XN0,L%^]
%1b.p^Oc^"<?CK]m[LjO=6)&P;lG'<g!-+oC!rK(6i2r7>:)PagS6)H#5`/;T]YY,J?DsKM?9WBhV)t0I86=A(cL:*ZAc^]?1;1T?
%?p$YuoP&UBh:'C`_>BL'rR&GrDQC0N]3N+LhqRhmXXlZ]=+Y8cU%RP:d<`%2ok+*S^@?T!n+5T<X]DoAqaGAZ=\oRfJYKLZh[:5N
%b/:?@YLt:-Rk)bW<r8`%#0gt$m+lI!>e?Q^`J`>p>FS*,S?G&'<[qXdO"[ZD[9*>-%GCu8@GUpmh'maOOu#;)Y'@@o?JF3pmT_A/
%ZQ=5eK(8>9mX+Ws4(tL1Y3__hXR2_KT%e0jJ,8N&jKic[\!kOMrafm:b5\cThTj]<$S)TjIrW)J%a>Qur,9rSL%?tdls+\6qL8B*
%GM1)Fg)nidML9bM.&hPX[PjaBI`E0(d-^b_Mm!T"Hh=);;r5'O>BRYEoSuupe/=):6+IBJ\DJ*h9?!(iH80n`S8N.h$i6X[goH]Y
%b?Oe_Du>"8IIcalmXr]B;CT,m]?50aI.*5f<gC).DH.a,>H`G1/a',AcQB@!Q9TT,^#MUI&:p[[NSR5JR^"d-IbF;WV8p"*Vu%EK
%G4"nMMJ]Q)cZQEkg/43?f%$_A;IR'5(+<f[%deJO;I6Qff)k/HFoU^cl:RGEg4qQ*iPXNh<dn]Q_7S]aCZ=IaKq2#jK4fAAnTB-K
%D>DYlG4si%ebcG^!%:":Sijf+q..1F?It<=cZ3)[euE-)\)fbArUO@2YSM%=o'\/[Cgf+8557aX:_m_63P3%9d#[:$rhd3[Hrk^;
%q=?,UDd8e*6/)DMI]k:eHWFD!$I:AsMMg7Rh:sE.J+](Q1P-J/433hq)9A)tNBm7OK:jh\4i1Ht6##Jp>iCpg%7^&4_tn%p06nq!
%n&pFV[?j+861FYXc8p=DHLjSaoU0oD=mC6e%nlfVM5DL*GkRI7&"lbpA+BN,kM:qdbe-*oqXl>@c)G;Z04^u/BGAaQMe+(]e/Kqj
%5C9X)NdD(JL1Z=@lLN]"nUB*IC:,\O)!h(fSl7:&Au0')%mF-!c8FC\rRC1&4\9rk.dgQC$C]XMIbJ*"$WT'^m$d80Z)q!8U1`%[
%@r(,#F5K(4m<#O1Z`c;$UmJdp^3't8:/IhdaB#s&;K\&UcsM1M>fpDW7j!Y%b3"mSfP7N:iSi7F#SO"*7#nrtmrVVWT%dNKk2VPO
%R4[cQ[f[cW\6#6]+17Hl_:RJVT0M4U'_UQjg!?"#+%VP)k_JP1eU%'EY2&=/4oLapEUr%%*tZd-^_%V%[]^H5B^>=<$6*82?[p\;
%%W?j2'&9U2[[[$;>^(J2Gh#<JNLb7Q4C;f(//"MST+89*#<OSJ]JdY"7l;.47n^p6qo_cZ5OQZp00Y"^e)BQ.hNR?PBt<@HJ(lQV
%<Lti>>f$6r(RB9Nhmh<bHa4=[7Ha>jBP)<g.=R:*dO_OX?>9B`C]-D<I+Ks9Y'rKr/^Qb^"tZVnI<rO2ZL[6in#4rfP0EY]GQFQ.
%Z!e_[508+(59/:KR=mtp),@Y9lph<V]cSV:Ns^1'W,V/frn=+[NdUkKl/!^0!WokQ_U('aqOU:p^^O:-RO:u1$)lDA7WIOcoFqT,
%qAg"7pCEU_4gfBXl5d'Eeao'KlS9Z.&$qc??G:fll>IH_-$i29>Wf!,rfd;_Kj8b%a^TaJM?g0K4Kgk%[bcarD18S$;-km+MXXKg
%.505Wa*5-;T"8n8rY_L8>KJ_p!]QoH'G=ON;=`i.7:);X%X1S6+Vg0ZAIFaB+,`i8ni]3h]C,pKJsiSU[960)Lq/Z`;)>UHIiSjb
%UCt1?jamJf@7'1N(2ekW+\\k-r4/%RjtopSiC2"!nU;qoTWbi9[n5)CAuNkk:X9]nG<6&!OR(/4q"WnrWQCRCDFm04^.o5j8c%uI
%.p:%s0?0le[r1Ee>BE>A:G=\(B5%%J-+s:XOoNld8ZEhhE5))p1C^T"2VeH<@hWuu0/dOUKlGs3M3iIUr/&Z,@ujL"naYIB'!I[0
%Y&c3Q1R)3>F!?@78-3SN4HQ_a+:5-=I`0S80]bWq_5NB#E0=c=iD7dG>/g?2<UQ?4,2>k1f/!0+8qmt70keW6dUP!O#>%r2fMFM)
%L0Ka$*RbSMh`kV*#5gl_W;#==4<?0HIu>2$[<[!D>+jH5X93`<-m9dn.u`n_NTP!fkMLEU#[OY%*M$QM"G?;WZVQ'q-Z<ACr@M$_
%JnDG-[SO_A0c-sF`R91JYj%d':7c9=.#7P_Mf7LfOLf<%@D^#T=:5"E<&,OP6[f+V25$5$'@**4Jj],bB0?HgE9YhJGK\k<\EA58
%e\b\`&pdDY-MIP0E>lHH?!LYq2[V41s"KV\jA&)2W.+Za47;IbMT^?^MnMoerg(1CPWm.8;XBup$TjtUIWu+ng`]fY_Wn/ocj&9)
%[*Eu;9irP37d80[B7Jc$.dXU8HlH%9B>4/Hj1Tj7)Js-ggREntmIiiu&iS^?Plk%c3?,LEfpc9*S,E[L3M^GA[Ft8C0B(*kq<RbE
%>355eE+\W1SrI_q]Dq,-DeZ/N"O/4*V3k*l3Hi?uHO##Yqn(=)jh%q/EF)kZ!7U\!$=nGUc*i\U%>8UV2OfARHX-L^=+q&7C7?fq
%_g2q!%\=Cf<gTD!$a959hnXb(GauNRrfCKf4F=XlqQ#r^4g)pBE.?H"]k%m9aaQ3s6!XJml45SkYfFC0GVfHC0V@CQ1M6B+*#u\k
%U>lit#JIi;!`\nDI$k5(b00dndq<Q,qh';,?@,OJZu'<f^Y[T:Q9P'=0S7c2ZJf`*$g2Go\!?I,05+#?+qI+_B@W9d]ZWY.lfOtC
%@H5Q)^OCJ!^b=9Nhm<Qrk"$9?>^<jQag"Kc]=HOK>CatRg+*a@k^HY'?GAOMlPGl0nj1LkNCSkSeNGunp0O=J@o'[#32(c5_S4-!
%I_N;*r+u9&<:\Y-/9GCqAaX;_)%?P_o6Bc-@oVT+mRhhP07FH9%$^F*Xf;B%WiqNB+60j:3e[Z>s4pD5=qe$]6/9\u?@Ml3p`Wj$
%Z*uVtI^fn@k2j;5aq)/FmIGJbS#7iTlchSZqLL]dl!d^%On$`]!Qqe4QgHEu[/1b0/2ZrUJ3$HZ`RC]1[^GYfEAeD.e'.+UNUuSs
%GOOTen,Z]pY:BP7/KMWPYo:aLr_Nj>e#IlWHl1b>;:ZC@N0CZG*6*;#&G"tGXD!poW,Q@%a!6@Z!YQKm(Wau&dU@:90:3ihj_#[L
%4Lnd0MJ,8LhS$i]cL%0/&kT?HSlr\]6M@@j]!_P&qc0Gu:9=>A4YNOd^k/W3+,rm$mJY%j,jF?.m5"V9%8#7hctsSj$?>q1WJR'N
%bLI)oTj$b:7p[(DK<G1caF2Pj/jHVd'.PQq5%H)-iI`5tf)!!#Q&YAOB,=e<n,6cs/AKlWGL%rQNEU^Njb*5X.So8LO]>NeGJ7"-
%55_of#b)'GA7J^Pp5B6DVA3F/m,*lY\)16\:-eD6Iong5l<an]-Nsni(KVOP?-h<s4r$_GeYPG[8jkHg(9Tp6](bUcg8h^>akden
%7sFVepm[1GX];jr*?M>2=g*3qcCrkI4i+j(=?WaXSur+OlobBUjmsGkFQ7DD^K'[SNuIZ_`P&AqcV%^E!;ih_3G6TpXSUrDMF`A;
%7Q^"uiK$ugZ/I>.4]B]#G-nc>8ED&BY?#_pRW8m3F7mq,[XR^SCSU-of9$aBW,EfZmC[=!)4HJhXI%+C5H\Yp\6;_aO,s6eBO,m2
%Kg<m_SHk1LXo,,6XWP3Y;Ptgpbr&h%fo;o+pRbj_'_]58PH>qY)<=(F?[96?hHKXi!pdDiIQRQZs7U_K2Hj#9fUJ/SVnu3nkV-Y^
%dlQ*,s6G;aTM1U%ro3A;4nlp.^EX.td?.R>\!P[cbD4r"iSqZi_d77no3`hDT#=X63Jb)6LCN=X:Rauf(J^+72iD<a+.KrU3Q(!L
%4F28=T0@LA$lCUH/q3cU.8eag3_?eB`O"?`7;-:]Ip)g4SX_gRf>BAiGG9EX6r6PG`ZC%Kq=F1h/p[!&c[0$7G21ffkb)9b3AI9_
%,K&hRH,UHCG)n7\j'/YjB]bPQ=\paSkY!M0elPTjZgF_%DUe9YXj(KQS0lBYlcPt'FbI<+a.;%Vn_sJ:(Jd77O&P!em(],q(:0X4
%RB)l[i1:W%aT6'l2,HO*@Xo.(2Y@=56%!e73n@<ohCF*?_dUT4q*?S[>(-8<<Okr/\LTg!*WXq=#lTCVMc^n(88`ge1_W57RepL_
%]DS]!]l<E-<XWP9.LY\$\(7GF<U9B.L>'[)a9"=E\Gdtmp:9\`jlRK9E8'X<<PPK(0Db"kd=']KmhS2$S?,jhIIC=a>%j@YSY3Q5
%9b^S<Q[h,(N_lrl$SQ_lk>??pNhjpbmbnD#9Bhs5a4JZ8HV[[An8mJp+]j:.Ujn$eptSHjX$9`l@L(CHZ+nHGYH<Mm.6KnO%=`Aq
%k.-hN?TmldL\o-k6IPopo.I].dW6LiGYeb5#ju06M^AKgqtNJ6KBpM-k%]'RE&3mId5D2s5=;TJIXSF`\FPTtgmd;4qs4^5'XaQ>
%8pfYEFTRN[eITQe3Sqqn9BRZ)lVJ\lQI2sdkqt((Sg7UBRt`J6J)h=#2uo\_r?n%"_#Dah_=@6^m=jp\%PZ.-2j(YWkC3LJfQp*^
%#u,Q*%;ftL(U=:4RgJ5*B!!of-VGs*=@^@4GT'ddR^:cTh9oL^O([jo8`H1t<BSn2NKsCGT7<E\P,c/t55,k#DS+#^-C0)Yq#N[X
%HH0[CF*8rhli'>UG2N+e0VGj\1k.p21Y+M7bWC5/YW#l1*.#Z]2qiBXA$u_+[7VD1=KViN<\=@+rdm5e.QCPf`#rT>^V';KE1]cj
%_f6W2V;bY<`Ti8,-]d,4.0e[QmcS?.NtOK8ij=A5o).$bkjD&P*C*tKM#hi1=&^m:VpLPZT)8S0I-4M*Ue-r&D`rR<5O(/ESC,T4
%.g-?-_KDb-[7(>=Bsq-gIK+c+<S/b8mM'g\(O_fLh;ObLY8Yp3@OcOBmG*n"n)F!)!5!DmODud%gt%*5Eo2cKqT12MbYh/0$Kp5_
%8(m^F^"G=q,W9&=PYTe:I6HomhnEh_j>9#gS,\jdW2F&VTabtZ1F3g$X&#B=hCfYi+#P-BSX5nFrb47%f%Wm[lcKD'8Ge7WrcS#R
%B9\_ZqaOqmlX1tTJS.)ogi1ef0@r=!]A:;G#[ll`"RihR9CM<c?LE:<;$]+qhN'aX4b@SVW9s1'8<V;7f)"(9UU8"FX:*n:M\lA,
%kKBm?of,(uS^FcW]EhpjrJ!\dem#2A%Q(]$^&?>=q-6$Dn_P!5bX[p^8JVUe.DI(Gbp#f&99Hdf=$PVBB)_AMjq$?2ghO"\\%@XV
%BVK)::u.m5.3De0SlF95p82.)M]^8hMGZp.Z5gd75P@rU"eN&h]oQ$SD3A:#[)7suagW(%I\H)To]BpC6QWEHr49?J)YIViGI=]d
%.a43m.PF'>*Ht<%nR<&qN2"bPpN,J[O6^V>jn6JZ6?J(n-P$?V"o7#"7ub3#f!?Gk=%UFNadd^j\Q<&3P.Ls1[9=Qu-$k,#r`ha`
%4o=b[[rD%)4G%#9m)A[Re)iS%R*dT+6N*j86tGg:M"=XHJ^o)Fi].iDcTtsRr/i4kU6)DKHEi*-[;!<7/?cmOIC%odW/KS>^HPgM
%m+sg*OuRFCVJ<gCEUJsDn/(fbotJSDbfFMtUQ65a_Kk1b1'O*N#/5fPcT)hB52#@9RpWjq+.&Lb"`R&Lj'o!7s/U5169fJ_Q/)oL
%FQMn95;lA--cJQI.dsM'>Q3X1IuJI4:(P]K"\ideC]%kLiKB=U_O&E##<c#CYp``3%GpNn,j96V?\<4.mm#Z8n6aZh^Bm$$G7V$6
%h;nlRZKZ,e@Bjp_;Pn"3n$M7%\T[ubpAQKZEgo3Hnh9^f`n/bDGETF2_)!Zq,JLT)GRZ=uA*CE<IF6g%gA(4cB@h?&eA@Q10,hh6
%NiQB"Z8N77LLh<YPtf')a%@r[O1+eOnPZ:O]gqKpbM'('==:-k5&/&`X1>X]H9$66?G(%SYV0t%[%*Sgh#$^\a3F1=dZ9"NE4&Fj
%hn5;*U4UQb]+<3&S$Qr?[k=WUs#p6(HGciYmBH_0q8qrgj4CAW5p!`hhr&n\4'a/5k^?[o`jb6GC@sR)7=L)7's><KQ8f#FmkC"1
%4H9U&jng9BU^O<GjWenIE<6Z"g29C1S;_'KnAE2o]sBs&ZUhV_l;D5t:2:7=[Qtj@^Y(&Heh`in'QQ"sPZ,[&-JBON!BnCXGNeOg
%pOE24T.^**",4%lWjmeI;6lX!R0Z8_1K?q8Ga,;k3f<>8\Da3<;P,51]4TVO2)V_?CN`adbY1_X.U&?5.>F$Wq8M$/dkG>We=sQE
%f!0dLOC[>'6+0=)7?ZXiDC3\@2,1P8X.&!X<=PPga]+I%mAt$#e?H&W.]4\\JZr6Zbr+9E;@/7jWp*j5BO=PUSEj`,=1)S=AO&^H
%X'<"Z+b<fVaj:44L12k]:dS)TJY$Z1N!Q5ZN[<oI38ClToT?M9nke(d$DrEeS\hA"S_hRkDc0Z5]-F=":'0BeAJUUfn)$PRC8o^f
%$4t"\FIg_GZ?:e[/'I59LfenRP\mo;Sf?dYMX(h')B,8d4+_HG%EMH-<6%fU9Jq@7_")gr<AA;`e[$03mYONNl9mWaC[/J88Phb:
%ZB/V-3q\K-Ap)kf$?a>KY(9![EX\)1_O^)pFLnJmP%e,=-Q0Jq`c7YdW_ggK\o*?g;ZZ&E::4*ViQcUP;l/K.Xk4gh_f5ZJRNdK;
%$b]=N=t4KH-7ZA;+;@ji\lmQ?F\IK4#!XoT$-]65/sATQ*,*7>@F,rSj6Tqf%kIg%2OO+.X8rI!)@bmLi9*M.Xuh.M!sBHUcu$lM
%'9?kf)KhBn@o_.NbVk0sBL+eaTajfIgoP!O-V9K%QGoi'W>JL4Af.&<RkXj8#4fdjD8q8nC0Yk+]IO0m#0Y+,MINg>_c2jWQBnpD
%k41bAL2]!a(`%o;a(C!0/ZZH$J?IQDn;tq@D)H+-K&'+#:rGZiAo]8%N[\_N+H^tFbrYWED]i#g_qZ:jN3ftWg'Wj3*1D9ESuS0Z
%;%uM&N^?1/fnN'#f>/^NZ$/Vk#DTU[C1;.7U:WMPW4u,7)C)8&,<;.q$uJFG!X%[m;Tr8W7#PfQ9EZMIU',W7i'XBL#3/#nQ@U#H
%.[5sN/p+C2\3Oki7gk8X.Ek&?J4,R=m]5:n=tQm,W2r6h-1&!Dc7=J9FO]O-3buNM1K,]_rf[qF!XSs?0Z(n$?iZnA;P:pM*_lnF
%"W0h0KO"gV&l[sm&2ou;I&%Up7q1]\&'84=TE8StgW7j$Q*mltCC*H8oa,*aE>]Q(M[Gk#NerBcU`,n&1`Q%$XFp3NeTtj6Np:46
%j#)tX6''`[6-"Db[YZqtD?+mUq<A$_Gj_I6g7++ce/Z77/R.&J])fpPDEr]'<fm^m/@$0E3DGj?_e!":RUU&1BnAn8<!*Y*d5[E6
%lj^&h7`#2^TL)<I46+3r`>N%bR%QKn)Up@*0Jl(%Wien#GdN*`";r=u'%^-;YlONaeDm\CN4OiMW+e!C,WKnp!>!$^Ar7&.1I'RD
%0[XlJIB,[f%"RP/$L4R>K/t6b24-.%cpsh.iC;r.#L,SA!VIO:m+eY?+q.noW4']0"WH]?WGsDD'UdZVmp0p`Y)JU,4ELR2a#$ma
%J;D\-NYX#$_IM(,3*<uI!r]sH6J$n.V!GhqfP*kt\2Rj'@B,k%)6%5JQjP=o-<%k0^gJIX'T?T,aTr!c,U^P2/!LaR!W!#%6M-<I
%'l7iI]KZLP%k)ag\@/9gSC,>RCd@s!6+R=Q7N-eZ(/c0>S4(_(jAM,gZ;k0aU8sD4Go`+6D=kI&%+WMj/j/"4Mpn6We!JqMTm)rT
%F7conD]pP:RA:sf9HEM@]E+`ee.o-'))bVed^QJ`P&XQj=n6M;IEQeMaf1<G,Y#BdX_\R73kH.mFTYXrmjIu4BPp76A#Qr&SsmDg
%,s_1*@^6LMHjYl9=[[eMBkfC<TC6d",s331J?GRt>qq*l^jmn)Ndl"Brf2rdL:Z!g[dRQ3.dQCj@Aspi0<3+r8MPXsnhWDB%%?/O
%qMV"QY(j(>$*)UWg8Y)\Wg.U3,uNcCMd+3<"5NESI9dm1J0o&Z>#eplGCqg(mE:]3[-D)c-n&0.mC:lti,C[\7dJrDX$86YY52cW
%g/%-[[4A`'5eg<:j_mG\V_6NSBb>1&Sb`lt4m&TUe\L'08%fYZA7qq[Al4<tH'-l=jL/13(?CK&I@5<E(#7p?FZ7)Vh\-s/oo6Q#
%TG>u16QYuZ4quhU0YTA2+eoe$%+>uKVG2UZ9Jd2Q`dcVLTp,I8Y[_<3%%8qa:R-,MYD0ZuF*TX0=*&XEPO]'6M?,Vt#R4L@SCKU_
%i#8%X[:Om*bUT&-VD:CVBegE^0d3oG`JL>"IJ)HbfGYZ[R>\2XfU@`#R1rk_Q*kjO8krL=3)qhX@4PK@c1VgHC?ShfWl($S,1Y7L
%R0poDC1"Yu-FSZSg<@Oe>\q[(egu\1h0$#\,G^7`l9)!'g,L`6eraA(DN>G_%V@`^4RR3''h&`_i_"g96$;%P`#:ZO1m_<cM)CW%
%ZRE)oRKDr;-dfm/+YeI`RuYBQLF-C&`+h>%ETE!:N=@J<_,Y_SPJKHAhS=G-M(M(p<UK72Xe@NhP:3k]>T;[;F1F/FEm#:\jJPFa
%iPI6XR)YX_\Rk)a=M&8)Ea(7_0%N&J7TSOQC:XV?LOj\Uj40YFT'WN_;OgH5(G#kA[/)6mBks->C&T-HV2ne%!O1df9s_SWCis/Z
%!a;Hj;uMeM9Dkf[WYrH['2hh8k).W\$8#Q6c)frWH]6,N>aO#B5a$h::eJBF^i_'<#H>;:78!tmRhg06WoDI4;Br75W`6KL9E5N?
%GjQ+iTc%'Da>Jn!)He$2@T5A<j>@pEMDN&8A35[Id</E@P?a*:V)9j!6:XlV/gb$R.\rnJP\N:1(q&>N"?b*@(N0g,@qeo/\rNKa
%Sa#)&`$pbaW]8;kG)Ai6Wn<(UoM?;>Yh_nf]kXoh61oE$856.BDH")dCE2tNQVdYk@$*deD>,>.C"GqOO`&pjhnhms2;)H@jPi5P
%1g9.PR#E0gJEn!d.:XCA&lRK/)QGDfBt[;B/AKdG+kGj'**T9/>#M5k.cR<%[)tfr=XT>&FL"c<L9o''O_E.*8<g$@M*fr3_#m6e
%[oIB!OeiAXCY:VhCk,a&R"2/n`A/B1%=Tf/oa\.X`?`Wm)AY`La[qL2kmG[t2-R@>SFd0ZWi4<GZq(EFcIdq_Ll@?CC@%_T>m]oW
%YK4qAp0;:WL%`8KB]C%k;@qT?.@).sOY6a7\A#5jWKn0$SMjT@OJJY1@e1;u6:n%#A==hrD+s#567=4tOr!`T1lY720t:l'@b9+`
%;,&k8":Do`L.SoO]-P2C6r@-)>3/.ROlDpb[r0ikB,jblkQdZBn80c.'Y5bD`7G`(+a-kj[$4I*eWgIIFTAdW8p+aV\rdjq_Rku`
%_\]Q&-2(SQcR&;"6=N#'^OSlG935qf,dr?oW1#IV=#F!sX,*e;Lf?(3l0Sc.G(j)#U,bk<(<9'iIV0WH,,Wf#\[_Fi&9^,^ngj<n
%WoH-hCdY&P4C#4r;gg^MA58<((5*XaFJ`#`l`nU3-GN!-WVD2N-Lo8RphkkDmg3K]V2I6*h:,th2S\V\WOAR9Z9m;#KHm.WN^^o]
%b7kRrF"OQ"O,/!,Z\M#^jt_99Zfa+@?Qla]"[oIEbY[#)UW.6"l]0rFLqOuXU6ARl91g]DK>ikAF_jK;.n)0t:,6*(r%q'fCe3Z9
%&g5^)_jtRr<.*Yejg"-GcuqZ4ZIhV)YIg#EXDs6on0eUY3QS>-7o8;8K4d>%'`l2tMmj!X1%*E6,5?&?Y"Mb<?K&b#Mo54\<q$hn
%;55tAKa+8@9M=<FC(AkJ8&[P'g-]6+S."_pd%1X4ItuB/g$W/-)*qJCDZBj]e:dc/U6oH&O:!4/>+HE5Y9Ab25@Bn6HN6p+AddR1
%>.W@b8WTb5n4poo0ia&>A)&".)pq>&U1lIl6)3X15hj0(#/EsbP_lE-1PA`J(56TTMt<d&Pk^[nOu,l5W/4=TV<XM2cA&=(U$Y;W
%P">bd@eV6E(E(>k(dQ#$$YL"+P[H,Mk;%B:Zi:IigJHD@U^"r>.RIaZ@eV3AFYk6Q?')LL.?.*V8^GX2[NhnQZq)XfZD;T^$-EmI
%<D6=\4Ufr(2(AfI4$n\,W`!i]Ooj@c7?+0LP_6<),ltJmMNY=I5a>8"eI[HnmMq$3No:>WSX(^&P,6=2$:[i[L!jN48IcY3<_1uZ
%`<qFTY]Q#TG"%C=7(b<;HTWs=b[pKQB$Y&^`5laFX4a?n,L*g=n%0H?"..!3>Z)#d"djkQW^piX@1V'Z/rEu)MWJf?L`PC`I'1R8
%;<PXCf\XTYX!1R,N?HV$eksL,0[?NI2(Ya>-PTQ(G7E"86It/pr?tZiF9/-??t_lmj%a4Y5+_173UWmW-ZQY&KMY'b[\ZTuU=u';
%caHhPC*;!$dUJO[g)3@ZfLNnB'AE&sIWM2G(Y\n,Trk=tgX*njSUm8WOjJ:5*o"&_PqL9_goO.kV:B:Q!-:Gtb-1lJ%&"q@>+H!;
%h^fC[q4Jl7--1O<US5V\YstS/b!(f/7E-%^F[^OBF29C\1#0-NK2XX9BLAe8X27K,8A(Y5%DD4_![%.tVA.fn/rH;uI2XUQ&N7*t
%Y#"*FCfg_s#*"uq[a_2$]Rgl)UZ%c#m.%aF3#C7hOZaN6'-a`#Yo!&2m9QL#TZ,Rops+e,ns5%`^;UO?We""\-+V'/rs`lTNJBin
%h5VAS^Hu)`<7==aW#@)X?(MVW/<mN/Uh_k@lu9qFA!DYO)%1Yk`uS`de1.BE3=Ui)\4\BT1ndD.KSO(N.PMY/M,_[X.EH7RWWSh_
%L)[ss<n4L^kZ';jW^tNB=+ko34cD1r(:Z*1F@B/8cVCI*D<_gm&\()hJcYj]&niW2M?6=(<Q1<"A;)cNpSZNN2"*u8!r03]-P%U4
%mDV^I-D'[&i_>eSK2"nEZ_hUp&TR\_"G0Nc'4%,Z:_gt/,i%]-GGsZKG?'jaBVLo/92&;M?fNL">b?XQhMO]7/&m9'FKtlll25EN
%Al<W`'2$\XeW^`hI=+u,c!I'C2/;_q@VcDhe_j/!2-eY2T_kV>\>cB7WX<U?Wo79m`df#fDr;(2ooII(MO=6q<'\u/U_8aR@Wb\8
%MVAoQ/$#*gDN\c\P73dZE0Y[gAXViAWru[9S7lJJ$7]oppM&0nL.]6*P=duWb>bLg(&O$2`GJVF;A$=!87>=eI#`_N'MqkX;If?n
%-=S0(UZ!UgM>l>f:kFfl<JD,a1<huofN01VVqY%Z"VU\!Mi>bWRQ)h^(*q@,E8e0,8\/Df-*sV.Y,*aPf2BDG"H]YB<"UabV:DKK
%Qu^,r+[':,[gi%CHUYW-8k\CtDMqYB8g6&8R=o!=QLo0k5mpnN,`Pam[0@>_;%p49NaPG9H;Lh,bn]o-H3]N0EK[.=d.o/G0rYK7
%PTQ)'7qYYo#CE"p\(&VHc[6UTqM(:u@DN`6rqC/5)dhuo'W0AC9LU7=8YRV6FJ9D?mF%2E^#$H7d6tQ$ne;*4?Z%e+]7IB6Ha?)>
%aX/F5)RpC`Ou,fD5T?S/d2<6+ZAE"0WfEtq@?P3fJj*T;(jJN%DW)XWVD&l=PL#N0<%'=L!?4ft_^*F5,5qSCpEuF=$F2;SLuOL[
%GI&2.nUX7MY))m-&>)%ZmARp?DW*)pUNSFa*1R*p'!?(>,EhbO8&J5%<&@pVdrN7.Pc*CfnX0Z2#Dh<t8;!<D9N-_E9Tm\Z8DWT+
%`<GdhfZtnI@;osd_jqWJg/Mq1N'#XA6T3i4B"E/gRIX'fB\BaU)k5F*!AKCKOal_4oVt"[2:,BK9ElOF6YF2&;'@*=F?IZ7Zhjlq
%9\o"NHSuc`f0n;Be3jai,2hguJ=?qV\UYV6?al"4fhF06af&D-cWV$\%@OB$d:ku+I,O=O-qeEH:E*2FD)TJCkb@*k'F-1)e`M+G
%U.PaWi0dqU,*aFPS[E=j8>K^XBrNF,Bc<RHgliF4HTe@:TlA\p3nMl_9Q.P-P\4ZSe!;D)Y:%l+GlOm/No0Gg0gej&2;#F2J7T0a
%76a9`5A0$-=;2r"S=6O1?=)VOKRp*<:A1^Ie7Y$W`#Y/4W.C9+d+Mhp;D"0#qbnuYih\V%;gW7Mnj"t\Y^9cn,k+Kd6mq[TaklG[
%-+<$>NgOGZn(m7GB[%GQ!QD<hf/Dl`/b!HD'k1R!%GXR_,bUdo$tl.1iJfsie,W\T>VIog9T@B,VR[RKED:^L+mk\QM0'd^ViV,k
%*\O#39d^fn-Dssjr#W+!7TV!%@Z-&b*iJ9;El$B/]btIOi'n@lD$RO?2X)Jt=2C*2USL#E$YgRoK9<.cIi=7VL#Vb\eH#7oAp'aY
%$]hs>,he0.J2(km7N?8IC=?DpE0'-B]%dloE@KsdM/t^48MrIPcI_#;&LQa9/p(!"FQ<Z>nKs0/J1qtnf0$XCn*mFp1`>h2%\9,&
%dr6^$g5q%Kk1;FAa3qpmCSnHL_,Ae1`2%:jQZ<M(jb]jj;gJH`=-\X;8i`b6CG%!^Js$-_kF%-Sj:S1fC!RK^DmO6sCq*E9b#;^K
%O.mb2YCUr!!FqOm6>!^R:>2Y^;^.n)&*A9l*"=l.O;s9?3u17=D:]Dsme*Aj1rCS:9f_`',Se@jlcKmR6'Ags;j0)s[Kn^(3],C7
%'VTu_X@)H$%8R-sE3IkI+B8ZsTUL9D$r5;+P,.c;+.SdqUF):np84k*X]iJ<KcrM?H>7r-h.j%Was]05V^kr.B%VK1W30el7`4Fj
%S/U\6K,*eK4@SU2>.GAHJqgfBMO]oEP!3l#:VT=UoV=rtW-E9Leh\\SiA*=LOIn]3T[P_rbm]-dVB]`WO$kAW+fdF_m0E`kW?qlg
%iEE:,\0n0E!L0\Yn21a3N"e5SV_H':]X2<&.1;SoY;2ABQbp*gkc(0Voi.4&YL[jNmF,"HgIKc=09hU/mQo55&H.+PhQFn^*4Z]0
%+$fiL+122MLu0<.Vr!pE,YVUC=!MFT-_V+-(c=4X2:/:;Tmo9hAk&6"?]Ve_R;oj=/%jCAh)OYpPNLpLBs`psL[@3JN=bM,B)gm5
%0];rZgKa@92Ah`%0!<URaL-)_&9Ms"plDNZ).4;[NqX9s<4"&I&`I)re^]KN=4qK6-R8mH'\(&`Lh/]qc,H^.5j#b;C'.O[g5VU$
%rn*M6mFQX>LjY3Ls0NC(BJg358?.C2<#/"d.Z2I6WujhVC9p6-W!b12/>^mEeMd8nOVZPl:7rCeQV_cpqdAS\`4!5\D;M>WC>c+0
%ojZh3P9R]\Y5e%1/g0!)QEAh-b;0<J^^d>QIJD$ENA/=>bt<U=V&Hhi3/dR?CfpnCT#4!alDb[fRJ0HIlrIL?]6UVQZt*+kJi<'t
%F>\#;VqnlIn%%nOn'h,6X;(uR/qua'G3&&tC6nN"K>k)s2:/4IMB[^'Z,3MY5\$X-S*gUT_Y^@MCOn[*W7J4lW`.!QGG3a+<Ln<n
%VSD<4qK`S8Y8I8tSopD1IuGg:.:K:\q+b4)&M=dLUT(L(a#F0n>,\btcO4*^$<lPQAu_nNkssAlIIDhqfWH@j=>g\enM[8f=e.nQ
%]`t#:eEU'nDYnd$pto;Bh+k'3=%\XGUH/]I\PS*ZB"HKqX=1F%7]_J*iF&dj+=GRh!SQlI,W6GYdFUL::h4)EWRWG.`OaFH5cnpH
%j0l]M`Hq"*G%UO4<s)1bLHjQFC1PFSoWGJE8:Bc_9E?JTeQI1_M%ii7[:j&C;Ho^]MLD[+%9tBGkVqXVI[lmR.(2/=RJ.VA2UGF4
%\oH3VPMbW=Fj!O]A"N`+o?X.[@oM$:>(%M?/W!IN.oo(pT6kEt87YoAVL&B,BZ?XJ(5n>#9o-597BB<%3*U%\>(*pFlq*VZ-2$FS
%VLG>J/r>f%;o_N[YnKV@:c.u-Fei.$;V`J<U)%T^"`%le:9h!&RRt4f1L>L69@>"_SO3%`MU(p0D6"=/]fl+TaqsGlltb<RBQ<,O
%kEn.8Kk+p2bBe1U1PkGQ!qT?D]$T#n"s`oUl'jq;'Ud*BffV5R,Yf,=l4gP-<HL)oX':"^l0QNSs(Vu:Y8R.C]]W(!E$#^DOV7d"
%f;-p=A)kS0WIQEW*/ilqUc4W!:kf?:]070UL^UqAVDb4N-p[F,!kiP6jqp_C4?+0knG/q>L$WRi?1$,+<\J?:HZJ1sd?_heArIG6
%J!3\2r%BT.acn^*UK2-;6FM5u-;INJX,A61qcZHq3(nE$ffk[(OL?WmloPqfNE_[M*o(l1UdX*\[o;_^G#"D,p+J</qu^a&dL_oV
%ADTf`.%'dX5Gf<_e"-F46,de<q@%I^l8dihJ:X;m+)"2ckV6VF_mT`@@u+*IBm.gL=F?.I_7=N;18oriMm)3/lT&kq2P7'n"-b+#
%N,R3@M-34!d=[)MVe\(P_cR@7TIZ:8TM[Vc^+scR#BBUX2s3.*\W,ln8JS+D/a653[W6srn`h.\;J:M*=RtKCPi@553T"iC*;AM>
%W`h[7?h,.*k&s.q$ue+^SBQEJ__E;(:rq/@.:a,5''2ZO6#pE<\i%P5q147:1$C!0nBLt2P^_E&b3$mPin(sAgV<T_^]*^%oO!(?
%lX0\WT0E81hu*G&hHuV/'3:j>cJnEIDR,OA8=4:4I.'6/r"sWFMM!C.@AD(+`:5L+`pWU%jfqGmFuhI/"hl"#plSgb"-O@WdIXI^
%YIqT_3V2cG*ue$S5hFDo+st1[Ff=gLX79Ws_)EP0nI?i7q+l%f[=Cmrr[+d.5?`il4HpLrHot<^NfOuqPIeW1"=0!e&Abo<p\NJ(
%bf>WmU'Q^gi]WSp#Ii&PT.Z'Ua>_SXP+au'q'1,h<m.CG6j'R&,Gg06La5P8a<jLhU,:#@kF6rDWD^fg!I;2KI,oQ9An5=9ca9NN
%_*+Xko;(Lgoel;Pn3!g9(8ME&&OL$"`<AZ%b@<Z!/GW3&rtib/O0XOK$eI?q?DsF8"#[=6(24UFNg,0u1!Y1MAVsk(Lb2*s;A^Hi
%E9Wn=Sd&%9RM]^TA$6@(cCX#T9M+&4o[M.^keWUQU'0q)"bMem%1bl``[s%0/g`EX.Q_P1BP^?Hk$(OUmQ&Nop2hktl(TE\6@]7t
%/q+?Q%c)jg<M^h4):[2,*t<l_7H8`aU6/@s6B8%j*.\E6TUd]&JPo<?6:pPL-ua@H!EIq"!HP5W_<7X5""oA./<"*H2f\c@JOW5J
%i#!+-O9@QI":nHsPT2r\6B0j,+6`L"DIs+Y(cVY]7mQA0V+G7&rL6+uX^W,fY&c-p!o\uP&ObF/(A)F`7K%g&L(fu"luo!=V;Y)r
%R1[euY/u=,A&JBlAJNBEeg[S'==0$F98TIsZiTBP@JdhaV;P>U,!ur-Xj*aNEg<?<*-b<DR%`IN3KrQK\9"D"2],e_H,2hZnb-JA
%im5BWIFK+Dl"b<,hV5(-H&I+/e<Q$F9>I3;e.5Z\A\P]ELBAoO(b!A?HKM1?4@KFs&p$NsHDa[gcp>6phUMFt7cE5K%"D&OFlK@Y
%mqEEd;<(?H-Y#C=a$36RKX\Nbhmtk2p"ELXP085:VZkI@pbPf_M@HB%o`]3e&XaIZ/SV2:o,8eVD'+`M8Y2r9OWU9a:jCLM]NVQf
%7&!hG&Y5_kSu6N5*U3ZqU_C=sF`sGaUJL[qT4R\<1iG<$;Hj/@_mST")sHEu+sZFX`[Y8oo/\rVg/I$pRA/'1#I-X*\nj'i*HZ%i
%_Q$Y$2/$GVPc5.,?.sOoH1-DmGdlHjD:eErfni"78-<B!3mIif)slZ1kjoRD<DR,3N8GVZBl"M>p4!e8K(SMN]S%HT#)_K7qSEK&
%$.?CGT$)P:a<MEr_l"I23n%"@6J4Z"Oq_q"R(Aen<c*`X9,3q5)dB$&l+FBL!:*Dm.(VIYU8S[I+SW.7:4'?3Oi=P^3l(fbU=??l
%J])983ns+X294)V<?Hne'UPB.^d)ME(j$6=X_nS4IBOZhg-C&t]h!=rS)2<KfLa(VR>%e88!4b-P!Yu1m%g/Dcn"?#Nam,I9/L]1
%n%l_mgm^78!(0k5W,=Tu-Wl81]6tG4iNf:,6#.XnO+2qG1rP\nfKng<TNT&qi>k(gAYf$r^<c>;-t[DhF'<OaR.]gP:]Y_`>%^8d
%G$O.pS+k]`C?qAW/d8&Y`;F$oauMCEDaBDYL/7$T8fj1rk4*A%5#1<qae>S:2@ju@3<WQU,!$kV-s<flAX-%!p8nD0n-GN.>7YHj
%<d";RT$gf>]8)4V>0D#3?\NJUNl%AmMM%h7346#\-PQ:g)B6U"0q$nu+MH.HRelh`;r;Ogc$qKa.Lq`NVKRh\%R]1<YiHN=qi\%P
%(fJl%KjkOY[$k)g%Ma:\TD'!<3h7plg"<!fb3CsZ;=!kN(&*p(VBj;[(Y`/WC1Z0"'-#@QB8`5Hh3X_Cipc]0k;K-j2l\\oc<$.E
%6D6t7o,-tJ1fmKY,<bDb*qbM`8@CCWp$fEH;dp47hYk0:!s29oY]"f`_p,pWKbJ/`mqZm]ht0G(4k]CQLI_5rNdH;dCO%4mRC[;s
%3:!GuNVBa)LXhu4pg(L]o7lmj.'PdiB?o2BCGuk-]=Mo)nr!7Q8%I>prX,h6WOQehj^\jnpE0Vl,D`[?!c#ZDa<=>/=0.OP?+rR*
%,rO@aOL"ePd2'Bb58$YB!VP6$ZNEW05leVioF04#iptl%CMP>oc1=fM:J0cf(PQE>%%VT00lXAjm3dVPBBf;M:1g9mfpd<6[JVYX
%DVn)j^<c[7L,K:(SQZ_cnn,U8"9Q=%cZDK7ZQDCfMf8upbC1AG/[=YT;.fjBS,"fsc3MmkD"p.<'tg4VdcZXE\\qbI%JP5Nn@V95
%2=CaG"GATPHB:`\dXguuTkd&@3V7U^P1rGc'DKU(Lm\q\V,X^MW+(>kY#l4gII;n+:(5.qgWt52Lh.rd^uj0+W67L&Z;XLh`!_j'
%:5hZ),-Abp"sEp<6(:XCqOW\bQH`]Cmm,WkYr*4VhkHA"AiF<(B=#-O-)f[A,PgbZJ:!.fBiC7;"tO3IKh*+Zmi(UgYa'f%120-^
%Dfe'c\8ROrht13$H2PXB8&p`[cLh(Z^.Ho6?-DV]IJb[X^<c?'I\u6$pJ'!@E,-$$=4SjkqC-QNJ3Z^Loan&G0X;o63MC;'AhN$[
%ROMW`#RA6C6W<rl'dpBsp[g<JPQ(1>"E@,L2hWP,A\6t$@\_5\Rim-Qqr*1:T;.BlDAPmff?H3OQb)5%jhZ]AGZF\4L?EaKn9&\V
%\66?7CiQtT+"bm\a,i(d^O(*IHUPJ+jQU[Pp],GY-osQgSS@nf,t:Wj]9\pRdIEXtkT"nrJ3)0K'1\(n\\'r_ksk=?jEG^945R?9
%C&*VY@;b:I2V,J85Mg9"D5!"$$>3Oki`nXm:nK,[DpDS8En@Y]ZtN]\:Hc+KR`e#WIsl_CFEDWa3Bl#bl1Fr)@P()-P-41.04Q!V
%Fb6uZjX=$*Nn!,KLKHQmmLHmN7Ia=N(qV<*%`[(PIE0&NVcLgmhboY]Dj[$P9h,s.d9^_Z2[Z1lI\Uj4UJG7s\R*!9kOA&(3H0]u
%c;<I+^-As&SQNGKlqYiBV9^+ucKkPgnG%EP(>iW'1]G)^(uZu]B57?RC7%We)6JP(1iOC8;jSH83$qgqODZ4A7t:<b6Hf[H11U6C
%US[.A5d<9QQ&HmB&nQfg+<il9(;*6X_h%G\gRS.'J$CThP_uLgr,_ddfg5VXLl=g4D?D>jbCsYgHr5NeKA;MG%^ZO$9X_('Ggep^
%EjIVR/4)-G%LP+)<Mp_D_'h\R/s?@=GqH;S*Tk%n(AUM<88O#8_.NgRpRAGhS5F/%(3+^2WRu%T1P$kEDL3,N.U%0/5'/Ao"U*]S
%fuaof)TW,+b.<aaA_MTrnT1pS1gc8VPeX&Bh:k57mJqOa9rZ%gPeW#en(KM=H6V[W%s7?o@,]jKY"0RH3"Cu/E=[Gh7KlHJS1o@J
%\'D$Pg(3*Gf'uIK_DP9h5T,%5"XrP?*`-7:JUpZTLOj\?P(9MlG-1peS^oDuf-W9L*Db9JDhQ5;rL#oGfSmVM\DFPW8&Pm9%,USR
%;\/L4#F$F9"F,&4H_UVi%5Cc;E.7&*%$m^)Dl_fp%<(ARF_bO2qFk"p4G"O%7d3:\%3p<$-8pfGE85=tEoC:h+61P,]`U<UeU;h:
%=GV#gZQ&TMj""_K_utnE)PA5H(fA(.KJS/K`A2o`GY?nBr#Zk`J,UHPI3-<*]Tm$=)^#gfabA0@RXph5a-)c)NueeL,AuZ/'TACm
%NudV6C'[%'NJ%pV\eS[Dg`j=Z2R:V<V=Vu]'%h[k*f0C?-raFYqJjO\LX+!6\fEt22C3,9*%]aRFdcA9.?Ue.c1"#ZV+-I+nVOi]
%(l)Q)nHP\,DMlPP5[B##$FNR)bqiii'f3C.E6GC,Ero7h]Mpf<1t,2DR(8_YV;0=Cc]0f$D.irN]Zg]!*\`Rs1pn[Jgj]8F*K/f/
%'^nMl!9mC/7tg`./fRo<$[0JsUn&cS`!HB5C#kBmJYjTbrrnEhK;`QVV*N$-XX%4t,6hd)s-u^C8o.H?%DY"@?F%I=LoiDC!nL!,
%ff6.@3=488,#]V`pUT]!Q8n*No+$G94;hU:g;#D:e)KNC"'cF@G>k^gYIeUkX_$Gui4Q&G!_mJV%EPZ:AX>N4Zqg_foj[e=&\5;c
%`Ih_\-#]T8AXAo.QDCePk#OFu"06>!mjMNP7p!ag;82Da!4Xg#^G_m4\sjN_@d?n5W%g"mI,9CA@jje!aF&b>)rm<?+Ke'MNIb9'
%";D\o/I=tY>iG<?[ZpsQS?3)@*T[lR/3pacHB2>sLM4Z2e"lpB>!UVjW\a[Gi%PH)_',Kkm$S]VdebUI,;KfJM@G7,#7N@GET$PO
%<),aG4.\C`po$_:WjP>\hImQ*prJ@c2UF7&E-<V7#E.hei2EA>14b^)ON`k0I'C`kIu-.he%'o536*l$SYr)qbb\/%#P1Lh-a(/]
%nio/@a#[5V3!juW+M<&hMtH8)-5,$aj36[<3oj?IAWO6_oCDH3%.HVO[p,&i8MNN(:2ir0=4'hQj.t0dXlhe\4n_BG9]]q9NjmE5
%"r!00!(.@0KO1O$/qtS8mkV-STcEJBBkocjA&2dZ"5J8=*(sp;/oja7*sAo9.+BF/n._\Z`6TAVZBE&R+5%CX1dd@cZr<G'(@[a-
%frr5AE'lC/+(Gr7T124W3R"KGTl#?hSImdN-K?Lm^<0R.Ri(7Tcf[;DY5QFO?m;f!_.\)GaLpiMK#eG7Y)VreI@8+l>jm/t.$iqJ
%f#*_NBH5A:a-T,nCVUED`-Hap]Wf6/[Eut?;![U3#'XVu?]`<l(-aQJjT>oO6keeCKS0G$b[TF80R/-O?N#WF*?UHL4f-NTM&[S;
%T-kI:4oe8I^28sOn3lb,;m>hL;GJsB#R!+)(ONei@rQr.Nnub7^b<qT6O%LEeUhh!kqiAB%d>joN+)`]!jOu+0rB,>XCGam@n^`K
%`(qOhjVSYFBVG;08&HT5@0hjj1)u9P@Y@^4Ef;G2nL)D,1^MR,;#<WB8345ti),uaf<\&;Et$`+fF^\J:/7\*361)X9s8MtWH/Km
%cJp$'[pLC)S7>`[7Z9=J`4i%lnRca%M9UJ`,ib\b?gGU,_"1sKYFK-4gQ%q#kN-6ob;a6)3gX!FPZ5(9.+<1hN);UWAG?S:Tkk8X
%mTN@4KcFW:4f6oM8,Z+Af"7>\PYQC^+I\*GaK-EKS?FooOAj5heesc-/XiZ"P73M$,mZID,0m4Z#S&W&".3>73rg=GW4o1#4Q1W`
%^Gn]m$*sI$g!?nA-H<uDD`W=k9n]#D"XN9`+F4pR`[uiZT9,O9'*8&nGq/@%WX@Y&6.rO"\.B3qAG(J)*@C'VR]7&VDd;48fW&[D
%rjImNP]q>hQBAY:kuUu9k"t-&#OMSTjYCCN#"C8gfV0j)qR++0oK38^Wa]g2Ze]'jEqIi@:9_"WA\&_KeP*cmCgjYAX.%T*gYSK#
%JA.k0cM\;C3]4Y1*oKN'p4H-,p-\fRpKTJf*?'\g^ASbT?gC3GWIFU?a>b)%B-tT'HTfFlVHY$rTHed`8"%@+>:h[Eq_H)ZN0m'q
%)^J.5#nnrC14'f]rjsDneToN#@b4>Bd![epYAT@E:SY@K2)WPa*jL'IY32Zn-V^K+Bs24?/9:)pdEu+!+NJ?E#3;rY$KinBPn[DT
%*Z>D@<j!UNb,_9&*6.ImaYlsJ+N-1.Q]n26U1!Ou'We'-cRtNCDeErlG,jliY4lCZCh]A'2@b.kMRm,&-cHqa15-TJl*;J0lY'Oc
%7WKO?:k(O;E^I,X3X^2.NTIqon<"mu4[:&,N>7o>+kC<n$4,+:YTc0a[d95m8%EDR]j<sq8`LLM?#L_IK0Y;V&')(Q#1$RmZ#O^L
%=9B$,/,CS`6^10E4-mFEpgP6UAqC\=2XU"VbWGu]ZS-sdZkX%tNT7J9X(gbnIeR:fB;'TIVMR:D%c=e]gNIc"\rX_Ed`dI6#Dn%J
%OSMM";_*Ib:dCk;lVLBtI=s>tD,/g'3J&4"10u5mBFBp`%Zt?f[$*FC4#c0fHC)LA6Cbt;n4o9ZE2X.II'r3DLMRDFNHNJG[<phk
%<@#HcHmk@9ORM5n:^`dY(7?(S7nk5*O3rW>di@?PUC)ldD+1A@47eb\f<ga6rSD"q?GLW>/[u3+fG4(IFM>gl.?bIX;l#CJHrB[^
%@;lTj!r2'V<Y37t;*;VXbG):sgKchi&1<L\8d^bk`e!6hD:;7/pNn/M"scVl+:b861?a(]><O>!WN0ss/PVaqqu5=4&IGh*!*kmA
%I*+:YguRX1`BY\&f#3X'kjBIJ_<L6N_?(rJc#(qTof_/+o'tg'[W:9A7afb5_at%kP$r6\6pklX`#kX6%+Zb(NjW?!(aef?HsM'(
%O!2gJnj5c.##MG+!BjY>XI=saYR%?I/qblFqW8r<[T%A']9=#spD0q/-?X5Ti*.@PqI9f)ITb6oT>aB^YSfK44qu-*hZD8H5-Q>f
%_>K2"A4kPhn[olkrJ^Zpf)r+/D'#IlD\8"M+GfDEIibj@d]rp,WP6p![`!O9isD$alN=POE;MMl]XF\SA$M^e!+\XI;PDVk@&\6#
%)&/4gBGX7P'[g,76l.\:DhSVbEC2apZ!&/)H?<l3?Fpa_9qFSHGqM1`2:C1mZEIQ4[Vo0D]t!=o\M&@i$'7Lo^'Mb9kRki0:PF7`
%d2C*43#61_&(:7eEELAY:N.PO:O`EIb4U\1qgV7b6Z$E%*)ht(/ZpGb\1l=8s+U,sW!:@m>+t>V?)V[X$E2Lkpjj.FqFr=-_X[$W
%_UUc(e8B9+dCD/h2W&&>g:gRXp>VsY-^VLCli)Ap)K6W>ciJ>E^[D_b%_)UI3>uj,"7opqhAPM1^4U-@`'7mFH8h5kR92h#;i;7>
%]1VdpNblcc,Ho9.LE1%%`VUaHq#[T;g-3onc&rWTT`LMAT#/$_A4is>fmMM1;HP#GChmlAdB+:;;g$k&6D#%J2YN6"cfH?PSm'm#
%[\%`:Z[&T0mDDY*cRJPT]+]'o$Q73#<bd4A.f4il1r(T^#>s$55"hTO8/LP;^U$rGK.Ign]ZmYq6l7=ONo)ae6aGd=Ch4"-#ZO'+
%go=#ZE7<@$!kfOECI^U!eoI'<cp_Iq%KR0@S=2^,)s9QrD8\G3cim^oC2F4W<FPf>\gE5p:EcR@4pU,j`0'@tD%#&)FJ5a`X1Hi<
%I904eo<.]HDLfke2[QjL*Pk&Sr3p`pih"f\7A3H-'Lf5QSAqrtZ9Eqa^$2"/0-&Y(gP:m"4L(bm<i(n+k<cRr>aMo!VOo64H#LHG
%L</h\Part'&P4p$pt"d>>riEEa#]"#]>L-Y5LS26Pg'`F"erM^o-5"?2@i?4lNi1.VF9?2rc4#Xh#ihj`eA$q9c7V<(od]/*%r0f
%3A?h$nP8/!`tmA'D4djK"aSW&aJWWVq[mBigN%/##k`\)h=O1`jKe,&-n>XtkiN=.`L,FI3a<EE*4=3qQT6FrI;``Xi*@:AG%EPA
%p'9<kfHobOl8W'X_!Y%<6TL!X0[-nka:!Iu(:QK:5)Rq"^>=2'a3BAt/Mps(H6Xhlc8OKJ@-m<F'omk3"LKS8gJg*rb3`:nVe<Z3
%%[EB:LjX2;X:T$q2C$r"rW1=\S=Lf7At8etEM:<Zkm2EGU7&G$==Lg`2Nn(OT[:7YM&B)("?;B2m<e964?c3t@OKmP6kd!c8>P5-
%70V\`',%U<`.l>_Cbmk9n,)CNOo6N:[X0mY5-JNG9*LuOQLX".,p4CO=Qn<o_m^GL4)NkqN8A?3q%,gI1i:MM#:Y&jk/7li_t!8)
%&=a\TDjekQgq<_h_Z/3&h&$<ZF?SOSI,:M*f=i_WdRJ-%_'H-EnOb5CRD>JbB0D<?f?i3*=b@*/'FDp-#6oZ4S;Xl?k1Q6<S[tI4
%_uK*fC?TT&YU\H$N@-mEDuT)f'Vj7>W:0cRm=l'W[!M:)NGI/te<+XDZ1U39PPN-R.*UCGb$]T^=6@n^X:##J*Z;P2$_AM:.7'Bu
%i"%GO@gc1EC9eZ$Pid]C&-SYOe^p*]1Te!2aJ%[O?5?P5jN&%oY_&Q.GEr<4Ksm?(K-;T+"s#!%LRN/7J984p"A0SLBhYDeZ<U1_
%0.NXSHCFeQX!i7!Ymb$B%]Hfu+\L=<a]"ApX8&u(9Es@4QHmG3I$>.@iHIR!)oL#=P$AiK$&@U8jLVlKIu/O`3kc^WZI+jIj<Kct
%3H^\]4^LU6Zt9^UBk,>KS*cX2!QB=@X^2V8C-D4#IB7FuDaHifYeFqsIZ6//N^[W<4BC[-aq+ai6-dYPAD&/<o+Yo"M>*aDc_8dl
%ILqaA4FC=N9n>F1J7dKSc:cY1:+m&2:b?OL>pq?($'@#lLVFQG=3-neU"ks$A-7N1($0oH<66Wj:_H<B#(X]P?Cg0s8)Ha^!f6MT
%J.P;>-WQJt`h?m"\b%FIVR4,apFIo<?"D0qV>q>Qj4\stq2nP&*FSH?f@&%/C"DAL2=ra^aMWX-\1I/P9VQeVZCqk7]Y'qX.U\\t
%5"T8*m"a^qj9Y78ZfKKO#cnVh3K+Z+5)ATY*Ci7:L_VJ$G@qkjLsOTUD"',%,R/h`G)P3[pnl0:=<5o$cHZkQAro1Te>XYZ=.?if
%]?>a%Wn%u;E6Rd%P5?8VM*EnkbdGP0"#<[-E>aK7A50#oE5t[B2RkH+TX/V@c-os@IeR5Ec.7W3ZeEftc9#+h\PrV@7BuFb"Nq<Z
%)q`@FSLo,P(#<3cSB?DKRO5-]hcO3IOqa`8B.pobF["DCnhp#k/W,71a#!iq73[bU/B]I8/W/M8JbQZj;F7A3*5@?q5I-S>3)5*@
%VB]EQ-DT@BU+,Cbkh!>C/m>9FOF/ic]1(tR1#iET?1_\WV^b!3Y+ZKGp:Yu)[4su"=OUA\27R.;0e&QDbB#(EIdN6!9V2ef'cN!H
%6AYV:4[%0Y7&]$_T!Wo,V1b.Y&BT/4>psrZ&LSYPLF0G!#oOD`"YK#O9Opcp9.b$ejs.iUkGdGgKE45_bH!$f\/UN/8t-@fS7GOB
%`mNa[$G"CT"seF;Lt1O9Eop@ZY_O#;Uumk0=`0FT@s9RE"Z=AR*qiGf<oe/PE>F'bW7pkR_2R:U:*+ItL?dbc&HQHfF1,@@&LiOU
%[V-Mh%V4JWjB`\KcNu%e=C>[mE,d3]ib`Qd-[K=C(Sq/pA"08i[TWeWXG/8j1qVMr)K_!V^R`QT')M6/]2p9`^Oo8JWU$$nP(1C@
%_VJ=$BBm'P3dpdK+c.,&O5-=$HuLY[^>T`RhP*gW36=r$8*Hr$Yip1VKF)#t1i`Gi=4-Yn4K;9[Vq6;"be1UUardBim-SPU2/%K#
%dFmD5"75G=pmFEf:Wm^SY5>[_%j#+BM]WsF,1\U>,+EN"M1+k<l[KL),u#b-#rMibNdV#SOTUEeFhJWHR1Tds@*3nY->X$",Y=@U
%!aQNu1/Xj?@t2jDT+0nZehJ+i8:*2;h;5$::rH(-HNm9C1B"+<W:OT]V4nTL4qcnT!UB,gY0Nj<^?`"H-=-D5==J+lka,ABn!ZRZ
%o8!?)[X]oHS5X-TM^&h%UgbF9.V8RP]YRP$ipsa)87Dj!C1>KXLAR.XJIZqR+,)jjT[8<0IdFuO3HP[H:u#-^/DfJ:#E99G/[-r[
%Nh^F.IZqun]h9&FgJ;=ca>RXp@<>]6ncl_PO96,(STMi`E6Qh=U0V$d*-?LO5-3[.o#Q#l3i7K!phGd:0TM]9jfH@RY3^2QltJBO
%KU'ur"C0d!*+SUNHU/8Ol.M9afdZ]Ogta:F_X'KFCWO<HVr9QmEhn9JEsP=6qfS+@.=>QU)kfhL\[`omjclF&Y;Ns@fP+^f_O"Q=
%cDVhA'n:A+"\)-u1nlNKNhnfC*1l>EchA=8+@P&uM`I#SeN^A$hKJY6G&,tlUu*d*kVu2,n\X*ml21b/[[9JIJOjl=<P1U0qZscV
%%#nLPKgHe1B"$8!'9UV16>W.S1.S1faqca>8gP:0r.%W?Kd%mN,`:k`5[doZ*ta4^,DV2<9O\ZP*2#jb\)cCo"YHf5+uF<[5!i];
%s1sSIj3AVMl_HQ(]gZmURY%D53q1HHf2eXI+W]EHU4(^Wp-TuR=@F58q:++0f/gKV5GfPV9G'I)*^b<$:+!a@16?d\6"fLaD;'\l
%:J].)%Bj24I_2i$A#+QBhVE*G3$3M-G]mVcjl,b)RF)R42(3`q2(s\i@mAKMb)&$EJ2h@aV!&_ufRh+m]Ed''SitnKR>c)j0N)qS
%IgqP2>iDu;WpIP.80NeY\O;Pk.6mrP$kYYJokkq;`?`[<g'7id3!f[aq,.A.2&kHA?p(b94U36U&u^@4)(:$4@uX.A$PC>D9m$Y>
%o78clP[Pd@O^CFIF_&u;Pm4D1YqM-%KPh]-c0H1g5qUne]]k;6beOsRG9)@X4\OAX,&(oW4"dW*6Q1In6ZA`Q\iFBE;U-dD#77)W
%n9H'c8u<B%AL%g5T%&AMl&tslXeHDc6DSh0QCXNti$8XX-&uZlq5>S-AaM,+f-1tORS88A-/RPs^td`qVJU`QC/iH?"5tY6$G@[o
%+RD`Ni(,"*-&Qi/'_(l7ag&rFP`[%!iE.:5,ENsgIJdZ_7)&-L*<N[lUe8KW$F!8s$59tk,-j$KOf].mG/mcGN4Tc`kdKYY'/[#l
%.%scmK`jgsPl-C?Tkm)Lb1nod_ITrD(uL.q89#YKSuEDm)iq*_43o-[,PGh^GX8T!&If;rUH.)NXe#=2P6W/-'Q8L<>hl1)&QAPk
%=]8+N4EZAg-V$TTgM%kZLS,eVc@&C@%4O.HGLJg>Q"h^^:fp<u(*JB)??m)]'D%&M33T$3S.mulMKa*m8>It$7%RUl6\]9(fb9V3
%+]1EqK.C<1_V,9aC=F"ZaH<NN%0oFa5+Ts*UqqV)KOEMA3sKV#d[F>f;jNeF=6XT:Bp>RU;T5Vj&uO)(RXu6;iMGQh5mQmC.@#L#
%dg+p;O@mkY9Rb.N,i;D$Juo7=(\->DnbpZg828=&`Q[B>4A6]!(kMp$Q0m:IN!#nQ7qqmCTYt@m9>"%E0OcfCQ)!E=Z=>!Y%93K0
%;J&h$UWVi,)hKD*U,"Wc_YD6(ZNgKljO"f0FE.D5"Dg;:"OV1qOJTdMdcgiMMQ!\h1_2q":t'c^N%$NHP9s@;=^;hEaV%7=7MXUG
%F*C9F6c^kA*eYZ9r!:8$hN>H]/>Z$9Ob:T0-c*G"_8i4\9j7;T9TMsrjqLppE32Jqk[i/:&?j#a*i]5i9#3DG14PKfPW$?.Erc*L
%c/'WHWqR._Lh$L+Ci-?3*]N-6"e?cF6<p&PGb,EijB<fl;^cGe7Ln[fG()*4!"]ej<`p#,OfT`q4e<gcGb#aXa@B-M\+3FLR72>e
%KT`AV"jh<ng]DQVGrh;ebc^eA'QS:."XPPUO?-*!7Wm6*L)LgCG`W$dn)+dOh_C=7X?!1GQoqij$?Ne5,tI89[]iY;cR/Bn1k9(B
%/`hUIj@?[=1`Yi*jA%3d0fogCfKLbk)u43%!er$LmaVD5_h@>ZK35]lTO`nr)sA3&@\eA70'V;$SXcBcoQ*nR\p7bXljXY]TdO"2
%`h'$s#8R7gH%QM0r`HO0()dU4s-XZ^RW;M"EgQHZ\g;ujZ?gMV'c\8>"n>>#M4ICoFt!qPN\U<&N6^",LlXgQ[WM#TN>3bkk]<;c
%@H+8QkW<]+E;.CUR!YDd)76pgbJfHXT./AjRrUek8BNKG/7fp-pc09^pP+fn`W>01e$Ihjpp3oER]?NT-JKAsFNY,R_HeK+'0n(r
%B%"El%m!3h#d>fsdb&Nu>tTt0=`M5"<Xr#]P;@a\[*r@.DM_ed![H(_Zt]^-O@bnTF[7kB$_-]8$AP3m**Sn"p:UZ9%:%Gc?JKYr
%e02K]pJIcXL3CiY<XXB=R6_`b7?J"TM[aQn,CVruTc+X&35c>2*EF<rYNakrjD5a?IB5@CUoDR'k,f$Ak"0.<L"j>5'^6Q_q[KR8
%D_le/f&8lk'Ua:6O?>OJW:7u(LOgTI\=1B+Ng'a\pB,,YjR:J(-SEL\NVXMM2R*\-lG4a&E2[eHqiThFKcfb8emleA&PKQT9o@Mg
%IcU)AmqZS5d#tZ,Ym$P="JJatlZ^D'M=5ofZLkP-e=ThJYXTbh>=Hee4TtFMbTPkpl6H%G8AKG+BU`0tgt<i#2G+BLe0U3S(lJ5N
%>LE1ZH1PF5ENrSfptVZp>jqX4T3GP9AfGFq'H&U*0,SB8l[H/XpP)c+2;VP3Xn(q2gHKQ'YsB8>2.#?H9/*e>'VH=j"1E$`(5Rq7
%+i[b5Hk2dP@JgTiB(9kKmjP]:fX338+me%H$U.OlnEH"7UFffI6W79!K4&(#q4k)N;S[SbJ#8b[*>KR]/FRqo2a6C&7mriLGE9oP
%X23udC>dbu$]pnEd'X!>-.Fc#`[N;/pkZm,^RGA/+V"6'0A-u4%_aEQPW*BgL\OH5EGrDV1\]"kN]oO\:#F,4R*5[qRn,oG1B4M[
%d#c-db)2n`3U_3`I)oB89,2mO@MQS2OLQ75a=]rIcfd3T76.7ojWWgB>2o`PIL$/3luFG1j5U\3b0K:n.M\jr9?%%\?6q3U^S#Zn
%g-[[H.C:*g$XF3HeS-s[qg4?Iq\S(E?(8kj,(7@%Z.eZDJRodS;u=UP6m12rPp-N$8SdjAO0[KD7CJ$3<,)`[kbdN[JS5_VVE<L"
%5;=VtaBBQr_O2oQ?=G'mNRTpb$#9?OO0X)[]Ys=]a0ru>+*H=Y5sI(b]=<a!+P'1:7'1_pPiJZ_OU(>0,%'>KV"ACWdTD`u`7,LS
%='#$eTUrF2HpT#YcEXcRO_\d9Di0/O-R:@Md*b/u1p]CAdiKfr)uGfB2qbVs!f:/pb6=.a27pAUX!#td/4?Uc3L&R706MJo$$u-,
%FkZ>&i.sh/5:F2`'MrjG*[L2n$b7"k?I;<37gb7-/P92$I0o9i?o4OY=cb$oBeQIL-WVb'EOZd>NfpT_ek7n4[:UmE3H4Y-q55f*
%]=;0V">O,eTU/#+rn*S6oC'DBF&VL]9;K1+0m1p*9%PCI=;4ST1RALBfL#F3't#-+MmB@(]juO+D2nLm3%C0DoCes-!J7W4R,Z1q
%T@;pK(7H=F;>X3B]"0k.@K\Di@mB70*$=lOj4is'Mu2Kb\'$rDMt'mo!nih17eW#LBe7=rHMe6FBW?n_9-X<>s.GfW:Ym=+1A`Eo
%JWTg:Z"C4^/asWcQ?9oH'QsQFk#kIqoihtd\SuTBTh#t:pD$M$"?;N^dDU6h4#F70h@@M+c+>kV%VWc!rW[2CWn`kp)AQ\D[ig9X
%[=.QfRCkJOB=5baCuPK+"d*NIms9lTRpjpCQC]S-::=Qg4-D1OSc?EjQ(n$ARYcjQESjEB7"km;(5-DW^6`Af'6ii>]XD6MSFUgk
%LK(7C_/4h@p870Z8(%;0]gPKZRr=-CW8@!#B:)?d>q_nr8Gc^k<qa3'(q?tjqf_*Ed4R>MQT47G9ScQXHSAHIb?^$(Ol4utJ@M7I
%AQSd@A/gTS]+6#9C>+(AY/7'f8!ka,1-5WHZqC6%1PPLK*J.Hu^\/8:L!<^["BT:ndZ-"[=NBYLW24X$+(;&9RNb7hQIY5BKP=RF
%3=ir+g.^lYbS4)e3!?Xrd`N/6$7dPGJm)>,m0M1XL(Fm3<SGga&S;A#)'=H6H853rA;]Y%E!U2e>sjW+/SnI\6ZA;Kldl_\$L?u$
%#\n'Z4-)'o=BF?H:eUQ;)/(]UCmY*1FHs?4L-s=Rf8[g*C+@T$b9:QBldk592&5?3kn#]5FmjGYC2pS&3s9D?h>84fVLl4"4Mjd+
%h0C&n\ceTa38\kLrIaq7)]3+4(j@+XflnLo&D<2cKM[`QPD/j*2P<d;8-!3t+9;(_KV2_07-bO""cf$SHq:k7/.&pCf[0b0>@Be<
%b!ZatH9i[k1X\ZfKtKAUP\tC?<D)T8.?E>1&5\FlPbb4=2Z=rq,4P(Oa<m&5Ad<#?0GFX^-Cb39H8InJH0m%SHBYW\E86dsNHLc[
%kWrSQ<`D"54_="Yn)ad8@I/"n!ooDiX4X=tqrfM=Z8Em.gK6sh.YJG$9FqKmmJrKkYTel9QnXd"Z47s;6s?8c&oD[M2P?g.Pu4ij
%,,b]kOM$rD=j5</KJ\R\nYR5H5S.V2j1n52OYi[5_-..A_0mt&%1,3_E^q%lhF8I'"s0la^WDXm>#%.'Jn"B]KnS#b'1DPUJB5=m
%7;=AN"I;Yig!%L&Y]`>r3P=5>aT"-SdlP@[p$e"q7K1XTk1^_3T,FJ9er!r4i#k[C.cUJGU"Eq(/J-;j]P7N_*T&>o0^f#%LIkn/
%QjLn0)D`[X*^m`l\uj7Eo\PYAQ3f$8I,9M(Q1YXSn;UsR%[+;ZiSa1iR(gChq0o!\#LXR.n2OS;M1@cGkXt+Eop"Vtaf-9M7Y.pA
%,m+5Iogs$Tdf%H="RGT'E>ta,"\R`]R)it$Qk3OT0gCe+0LNtHiYe[D8-KB>*?$Dfg,u%PJ#=i?Q0NW5:fJ[r'Z66$?2k3_4Nmk>
%!VR4LC%aEDh%Ii*e_/PT3Meb?G+*^qf2Lc9@74Pc[$Tsd0q7V\W6Z<(ISJU[[i/B/9Tk#J((rN2S2`Y(H,_-A8;V%)81kECLHGr6
%Ne[h:S<@DM9+)1Kj@YRUIR)1d4MsMsVUt>+qRG0XG#dTu4Z@G!D7-Z#N]G6'NNOi5ESMU]$JFQP4SH>KKDPjm).J3@)eea^&;<FS
%<3VSdaG2VCpRi:K2jKe2%R8$HhP]hC(!p!?-\p1*;;`;f5NQj9ffL8sEAZul%1+_pek87NJJXWlrZFHG%gsM-K)u^;aD/-&S#m0=
%O'!6=\=Wn%f'3A;L;e'bPk,UX<Y#GL6p\pkMqAG%?9eQSp5$g=O;^7r\0X!$)K!uS(+4k>ZK@m*`)nD+aU9L^k==fdCc+bQ99969
%],OYo80C4naG=L[acf*WSe]kF+a)N2r%47!;D[h7dkO:)#R9p3&=39JEaX^I]1C//A,th,5aoRtM]1S$oU+dNnm#I[1_)4D7T5SN
%BVq]Q\unV(2%*$j)`1r9==+l\k"/OZ[DP@oXXTX9LhqXn-9JREirs`6C_<)8W4PU*!gVD.Q9i_n11M*%4.[;Elnm3ZJ:)Qh,HVoa
%SfD*UkLrbfr=%Rj]k].dI,(,K(prdebIEc/[32+L"eu)Zf!]Bk5^=M4V%H$[!<J>-iB3.38O*^sdcZpUiYE0c"PL(@$<]d(jQ/?>
%4C*/!0m&VA(K1g%qfmD24=DC"a^[pnLnd74Rf!M*6pA(()?jSTTJ\`$Y%(6klZ'99O:s?FN'8^pBhM$S<XUhj.#$(p3FF?;W5Z--
%eP<%ja6^KZFsa'JkqW($_[FCJ$%%*&8?L'Zd/t\%.7FR&@06f-_sBbRI+Tl[<HjCS1!j$J8%]dJLcnS0N%`WU%Z$EW*ac:E7sH[6
%*F?,3)Bd#G(R88>#U\"W]IF@%'J2V*QX^\'C1<EhA3frOY#Z$'5`"mWQ'+FUH.nrhml3ogP9r/KUbGsU.J2ul:0'HMSfD)2QH9fX
%.t*Dcj6bJ,GuNta"V)_FPT<"$Jlkl8'V^+$6s'PUTP59?Ueku.=mLA-h:[-A7T\q5kn+eSlk+M-ek!h!A4O^PkoG>G5j*TTS:L]A
%3L<XV!'r)9ek;$$ZH-/n,6/3ZfYI4.o:hX7H#aQf=c=4A*i5eCi'NY:1!ZqI<hpnJ-<Z)0$jt1Nf$\c*g55I_i-Ibo%!Pm?EM@K'
%Dre(oG1t-fTWQTbMmsunfo,o#PfD,H:*XueCapFSMfj&2;GN/^.0QYQj<Sn++I#2*Ipu\!Hf+[U'*A[S/=Be*8DJqZc*[)"&kA5\
%Mj\JroJQ63Wm_G2#1hjb@^PnQVha=;Tiq_C'BGp".3pH7f.cY"J[N%/F%(Y[$-da=a"K#Ni:->c*iXSjiE/_HjKn3r7Vqc]'X+'-
%dA$<1pHXR?A;\r5#G_MHBO%?+O]=;KE;SI,N7^mY8c4`=a,dhTr3QReMn[4BIkopADKag=R_rA,G>H&uk(6>?dmVM29(=B.)*W%i
%8dhrZTu]p;AK?q)F)*"%GiWm!TZ0:&?hfSu$.XDjBQO`37OP*%r*Cj!kPN2*TNuT#@7-s85i\aF]!hhU8J,+`R*O:7*BI.t2P^Br
%2.;Kg?]EH0\LX'-I+^I*Z/612.@V`^68;_0i+cA;p5."p=kst"EMh>U\dp.\Bp$dB['(N<No!*rVt^hV33F4B44:]qkX"7p0goI"
%4e2!TLZ(Jm0L%I?rYu5hI8B+?RHPISX7&aZT6:osad;n`(\m+/gRYK^\[U>H"c`Ds>8m?U3N8!j;9[$Hk;1dY2;a?M8+R?=#/E3?
%q^ph'W4K2S<bQ<gi&!I.e#F>k88t)$%@Fp=2/9M5DB9_N3a9i1jBWk,'P"IDcT@(i53lOGgIpJcrSH:C,5kecO)N^^rfh_M36=!S
%B*Ol=Ga-`FZQ9SoJWJkD85]tK1\c'I\tt>MP:g+3O6Sj8hUfA0cngf\ImVg4g_/%nqi4K.V5t!I)mRK;/"U<MbtBJU!/;3()0$Gd
%@9TRIX#qia\$NZFrhmEs.;gVpTL=fka>%n!=N6!@9`rhZ6Q)#qTu1AZ/BDiclA\U![oK#`D1&sbfc!Vlc!/=Kc.0Hm<Q0MX9&pC%
%"B%]gOWtg,--FLe9l]>b"bQ(3hW2,jPJVa[Hcd8@7`/e;#,hB8@08rqGdpfol_0Dj/A6WuP>*kQA0EF=8E#1&RF?lh?lp:+[ko@K
%(NJ5/s.auc6`:q1@rP+,,h^%S?#JA=mXpb5]7m6C1m=F9"ENu'\2JG9Y7H5I;Q%^nZ&<MIdu8!N8gIFF(635k2UjGWW7/bH1/D9[
%+/^8'_I)9>\&_2FdT^hAC*N_YS$me<MJ'BAVhj*!Epa&k=Q"5;;e(o,&0BC,);FsB`iU[Lrf,B/ko12CN_]fafj21*"A3=Y7"h"M
%nm$rA.:t[GP#2@u@7UJTbIq",kmI^GMTm;bD@CO6$Q?=O2/Z\A9:u;H?]o.aZDS"XqZ8";'7-9(+l+5)!<,q"iCgo#%mU(IE.?R<
%G"iK60p6r[c>3LOR@HD[L"45G@8%YC!$:<fAWlH`TkA:m]!hYWIBU/6T^A*L-@I%%*QhNd06ehA*3gk/CSDcGC7;)2#^F(qLFpRY
%Q9cc![2+GL0CR`tr>auuYEe\fdY1%,Vb_V)BCuem6=`k>X?t;c(!2V1E#!aT1=?s]_)j(c@c=OXT*T58LcU`K.0@`qNWZ=e.P"BT
%bpPJ09tt67rpa_!PDk&GOo5eTF4oI.3kaJTD>4TW:9Pb;77u@Iq)5J,gjC"?n2Sp9"&G0rlLs8^(MkF3-1dA.SY-\UA*f[!6)8RH
%>A-<=W;?K.RBg&Hm1dfAWj)V+V^T2'@2PlZA0G`Ub^u>QW,Geq]4<g:h2IOQ7NHfU#i`&)kC8a9CJ3f;TJmtOg_B^M%G_gqd6HbA
%p_)9[n2$F0h9GS[^%3%Q_g/aI1j^'/Ln.d>K_`psju<nL"D1aH"ZaMbA_[K`KUX'_TR_%/@-;s\#'>[+YP#rSQ@%>EM7epkp%Y*o
%7*:3KqrUnD7Hf^QWM"dJD9k;*]<LQZh:tT^Uh98d2!3i^pcoe0T2lDq2W^1G5t5*'6a2@P8C>Tso0j(TkdH-Z*ZT-koHh%<!I%P8
%4*9Yp;iI%7;jrhWcU+$Afib+BMO\Bo8BgIi9M/'96c*[jXomG+6nuE%5-"1LCu8&HHN2"]J[/"3=HFXJ0!L%9Jp0t]DCnBt/[D4c
%iaYV;hTJc>+^5<-%ZkK2Sr`/!WHWg/)nNYjI?,'p<6VI?$gu=6Bpnn[8<+P(MoMgQVfjtCAfW]'U+kOr[\^[>o;$?_cMFa$%6sS`
%iF]NK@sT+BL;gYZoI:$!98`f&o$-^T$,A=`PsDnTomBa%8`@DFG3XW/AW:&EEW*#jDn/II+Im[t87Z.h6SfZ9_0c5ds%b`^QqD%Y
%:7Et577=THd!rl'J`;++Grfo-PE\'th0Qmn@:D?e.OT'4`.<,WCCc=.D!_Ze.Y1a+.@AaSf=kZ5W>fmKiXJWAP[R]<>>TFXXaOE-
%ol@ic/F^@G64dUn*I"=;Mj9HN"nJ%c]2jNi:F@Fj$oCP`L.daj*`SdTG!u@<MBN4NhUZUuF<WZk2kSGl$j5:,H3#OT%TerO)B%R7
%J<;"DAg!L!>o51?aP\I\*:q25&0K7M5ruc*!0*_*N+=;uHh2D:5EJc7s+3d5\]>"'T*-DQb%Y]Y`eXOlr8@QlMWJbXh2n1N(5nf8
%UlmhcVNl0>;W`ftUccpoicRPT[Bet2-q;ASed9H7ko`*Z0(<GGFlVRK?@eN6G`,9$D*#L_,-X.L4[PM>LSQtgN)u[GVBAcca6ahM
%TYNLH\RB4X$bL+.2o&s\PliE9C8dq_T)b&OAQ.m5$H^d^p&Kfm&1'TjcJt^ATQ*jZ:nS)HN!>7`>)mXhZ"`(^B/hhJ^;Q<8%QF;R
%"6'4apu,$,",&UlY[5&r-m$M+I&2eQ-'.F3I\`@B-bW3785k>8>f6pb.NH%Z?5^NhChd[4KUG7oE\,7#d,Yc@mj`j]Z_fS`[M)Om
%6K#Ag$?./aj<7CkF8A)oFG4YNOM-]11XX#a2R6KpUq@?U+B5LSZ:N^[1/8\A"bh<o'1!IC`$?@1:n303eLeiqo&MdQ(!J@%\_HV'
%0=2+dFe4U;@Kp4uiqT02`a'U%9s@0^9>Ca]-GF,Daba4`J)$`+aL;nd$HZ%^M_@r,)J)McqbM3pj7jJDpQ/5fM[-F2:J5'J4*X#Y
%?.Hn44!tLLQ]ZC%Os.;h6D-tB"E-go9(W<+_C-@eU^ZdQiq^"nfOgC6=+3\9!nVcY4gdD#W"K?Tp/kB(HaSf&5eqap8ng+jG7:)\
%[behb#/3nZIi#hD/BD'^@>bbr2J6gS=L`2A4>"_n]k+lT]R4)j'\W28@R/#$aA8%jMXF"21e"L%]`U(DYrG-A=/^qc+5ho1cG@J"
%)Q0D&aWG2dis#^Rg;+N<+2EN9"jirm0H3c@PeS0*ptI%<S=$L:I7JFkJd,Wt*+3DSJ[gVkTF,25N_dMM_7'LDoZ%U&h$>UB2lhLo
%nNCnLn^$Q(dtu7piOjUVZ%8DO-PDPZZ?T:ZC_A_d-%g*>-W4lh7k<$1;C^\f^Glc@,W5#j"8Sp*mSj*p+>c9E=;)Y`KG(F#Jh%!R
%8-r;tH?aPP+J,Yg(PJ7sAQYiLNpbO'o7bGA3lSNmP"nF>Ec<"ShB50DRBKUa5thm:;).8<E1Y%7b0AL9,7)F[R\m?KdPRPd,)Goe
%Zf_JAXaGYUWc-%Bk%^pfdihQD_:LfG,JSSs7TcFA9T.R$\8g`sT"!"4:mc<VTTOO,H%</@k-K,V@W-Q\O,0l8?;P9GjuOIckMS2!
%kEH:cd'R>;hKm7_S2aH.,5a2K2DG@-*s,^_!MQ/MH7YKjhf6_oD*>>]4_rdEmF:L8a)5i\W(b2\3Q5Ts.h!l.<5:i1*jhZbS-WCB
%8i(_3W^dX9SRSqCZQb[VI,.86ZVgRd2LJQ5n(oMPq0U\T#_Yj-_N"0r-G;mg@>YjV"Z,j"]p-$hhS;)PmZJWS3BLH+5u`/f8XELI
%9.]CO<dLfDqNs0g<jhDQ\WuiZc4c<TgJ2u$R^+F`Sk*G5pUM6jNT33Jl`FgZRVB)H7931m2Z#Qd;OM'dN(\2t8c$qOorMiYZZC0!
%G<9(.Qn`En^'&(&kq[j.p810mC/jMBb*I#KbZG+9jH+61gSo*&Q(2<i_m?'`PP$se]%JEY8t.Cih/r(Tm-`,#7'5[KR4tpFCs$XC
%p)K&s&C[%ZJe?kl*0^8M4p:?H@RmUf<bDh!]0%TAYp;+?QgeU^oJ(4XXD6Y+;pr:YP](XFaW'I^9R>N,Y_ONlcM?T]dVEm(YTBgV
%oi_B]?/;WBWtpuBI$YT(C=*)WX/2hc^7AIXm`R6/OQ8lSMG;bMEAF(o)+S&*%n:_af4Zn7-'u_3lVV3c`aH.!ZQbZ-1_XndD`130
%dtZ2Kp>%fSLq%4GN,'aMrF!RAf^(L_]QLPCd+)L\0!tt@=mc!#A\Vap7)`7$lf5!9jjMA3>iM64d`8`RZ`8HJ:5LX]9f9E>fr=TX
%P"q):HkgK1b6;KXGrok_J=nTIlP[J"gT3l,eJ3^.LK?o;.._:VFK8"0e8"ZXB\0SSK"H58ULDo9j:n)3DN\^_M5A@:Yd/nlBK+DK
%,M@@rHic`9G)FNsc\b[Oe]c&[]\+]]9H-0rg3<"MprZm52I*9$SmCGj60U?kmb+gW$4"_`0dX8D/jPci)"l2A=)SJK:0CEiY*CR>
%ktA-$[;k=pmD>l@hpmpr]LRO/Npg2o4'=&CqHl7CWtA6l&7c__k-<`b`BKUM'O4Wi`(2ZJ7$X@iRZ)XV)n1Eh/MdoPqc@q;I\%56
%h$l2rFkl3h/3&"Fa(X\U8dJj/C>LS`'LX5$OUA5\DIL#9&S9k'UKX(CBYAL4bLJTDTQXaD\*rTB=l)#9Kf2&4n3nj#"d^d\JB6RS
%a_."p)d0&C)>;09(>"dUFXa,l1uRZsXNZJKRsD'?S;f<8C)9onqlZNTjh8P<7C:_7E==aP:\en/("(5FYn87u$rq3Lg")BmJlKes
%ZC.[B4eJ"=HrdZ_/'$0soA"*\XDHe;P>]&kdXmMo"_ubK;8FPKgilo7JO^4E[*pX(2@<R[RE+5r<]7;=5Uo;,Y.i6)N.@(ZZms2N
%3:ied@9'f*l8`"E]?<,Q\P)9n=W28Q5<@)o@>*,b=o(mZ%1WScAIA*B.psJEbBgMOY0)]Zk"@Y=>`I2;9c%Da2dJQqbPP%Xhg1EL
%!^_L]oq_&:@uqUnJgs:)jiJ-u)qXcPH`M!q)?]QIf0e*7PYLdPKEp&?']l>',k%P'MAFLdA8=P'*/')(D\Yh2WhaY#3UOYamC'(Y
%NoP$oU84).p2i2f)IIK>!IL7P.3guLlX[0KbkLQ6HtKT]b#u,*p*J]NFq=Es51*eV[:s[!Xu?QC#WI?nl<I_P_4bQ4/LXVL"`N+>
%c2sbhSM+rjjpuq]0i@jJbe1Q.6MsgWGhMo)%[pjWMEiTJQBY!7R:7V`jBsSK@uX#q6T->6&b$?2+WqWKJY>ZWYf/j_GQa*;S:F,7
%Ou$"Y,kf(N/p9.l!&?`[<TJkq?:1[bZ10-?X_@Z-09\^*_;JdYh,JuFDP.JfQQT7D2/,33>J4e*FmUHdgtdUI0IAm*2e$:Ij6%G=
%N+;q.2sDk-b3r5iX=Zh/??g]U1/ZQA*7APgMY(h5)jQjojWM76R`_0ZDlZ@kX&82fea?Gf^3_5%#4?22bR61HAC[7KOL3-K3Q[cb
%!p3H0k_0Ho=o@kgQ05*HhV0RB6I(eP7B#ffRRS@3)!opb+<=h.`1Dl.5[*a!@_=_tcW<NtX03R:ro3&thuE*ts71)Wqsn[_s8ILs
%qQ5#ZnE8^-nD"!Bcenc+hu;_ErmgbXs37J!rp,(4rpt&8Xm3*>s24T'IeT=;-*-V,o3_Ldqqm?^ptL9gQ!Pr_6RZHFr"jkSg[@A_
%'_ricqounSZTRGXH04/%r9Ng$qlbM@rGR/ZL]=L,hJWmjj2M3NjZi[^s77oDEq#)bs75a\rVsY0hnT,ig>/_L`)BIDYA-r4i_nNl
%G->btiaMIZFam[mr$c?^mu.s7q3<.Rp"SC&c[Yr'YO'5U6i?EiJ,T7o]6X1TJ,d-1qq_"=rnfqfs-nN:rqH"1s7ackqt9^`qYfUW
%rQ7@nmbG.=m4CsShCOmfQDG@oPb_lOYQsdLlT<.FV_4RPGj6*b;j9ZhQX5EE$4NV:'kt0I1$'Z4H\=PNVd;N_>s*9"eAYA$0V3#M
%<=PE9_c(*B"RC-H22Wh1C"X`td6.*%`Q6"s(Je=!oaBfZ*[J(Ci@,VN<DrH<f-mMdUh,Uk8+Y62[kAOn>s*9"e1ZcY?tr1l^+E3)
%W;+hBaeY;eOstba5+8KX^"'WklCt;:Wd\Y]jh3Xt)leL0/DD-mfdLH78IHVlO/ApYIIf(k\u=ngWa?ZE"^%Sr[\YI7<8N))CGMRA
%,qXQO5+8QZ2<MNll6<9eXF>/"eN(>@L9(Gcbie?sScLDrXl>,oUWMf,Vn0t7,-,oT<b-d9qNe3l(gEcD<B1rDn<+PO"<U?=YM(^<
%A9F$b797/[Z:\,K]3;L,&qUt/=*Y!,]VNLW_$?0(J(4Q!,--X'0!b>MOVM-afR_/+<JJid?GEY9i?^()#X4]Y/p$]DX=gf)04_K'
%oap&jor[\T@*]T]:Hd43EV)>C[,`H&._*Y+oHL8mUtuJNWNVn%WTE;U=DD8:8QtfnHSeN(4uF-P>s.ddGY3DWPc*$W:UrqLjWlF)
%KKYd%Y!_*c;\r6C(S4N34ln-co2Deh9K>\f*at,lWCrG(n^PNVmtI[h=&4*6rVVmq'N7cTZ:EPWH-5m)4Q5;!Ml5D>:Dlqk,qATZ
%;mK7o8]_Z1"<U?<QeCOj<>SZK)lce34f'Y$o2Dqlbcm6G4p2s%<L5el79(.(]c3tL5<VA6lK2`h8jU?f>5SqZ1g++Eaqn2dAG(Dm
%CAI*3Z;NVG6WOOt?<Y;Y_+0^>'`dA?X,F(9%9][&SfoV,o.spRT]%1KIL&-+XKK?b(Kk$SokqiCrU^M$WLKM'.g6A8C%4R[d:@B&
%WaB:ZOk%&e/+q@IA>O0mL9)(G]VNLW_+0^>AZgKEeO<O-Krh/\??/Rp\T.Q]kh1:][3tEQgpm196<`k%#,(rn<*]oT1":PYW9'sj
%-u/VR)2_U8J'(:Hicfo9R\VP>eO<@P8\Gq'>$cMI;TlmPR7;W(P`XD0mf7\k8R74QMkhtgH7pPO>kF8VQ?SrVNB6td+fTP?!VU2i
%\eJ$Y8R3V7?:\i,k:&tSf03aap%D<N;U<&Zm*R)$"])X!l6<5%6;m*;V_#7RqNPaEeP@()GkE).O63DlGf%Eu(Jh^`Sm$Sgb#?K_
%:T6h^r!XmN9A^?V@%MC?n:Z^t/tRAJ4LJGb$r8I15!r<7jC_"TrV;Jh7l/[145jYKMlGPD;b_a(_c4gKcS1W1pfUKuc?r.?URCBS
%ST$=6`Dl;\WKo?3@B/G3B:)<Iq[=pQ-f5O2BVrB#-<s5e1"EmEWo](MQtlHe)5^<h5!qs-`chPLR].oDoS]\$VKt0p[G:6[;_9@\
%_c5pRB1PUBpl<-[1Y$&uIPKBl<:>O?Q7lQl$J"M`qZM8SR"#IV[>c-_!Mh"`6;lc?;-bGiOjn_$.<WWd/@Bm&$qi0G.7q](@?9QM
%90m^jeAYATKr<EB:O,Rgqikk1;bkcH8(aS^l;CD`4E^2DHf6Dra]"d/%mT.o`KZRnlk/r)T":.b(Je=!oj2l8^%.DceB(Ls7PX!M
%/UN.6R]!<=#o?BC4S<$*b.-O^;5p1[P)WpC8uD)$ph6\=_BrMeF]$]$Tdo`Z;lW_s5:%8f$nH&N6h&K&FTkRNW9U+WG=,BqRV/Qk
%^&8@@.;3rtM][P3-EAYK_F7KA=hPo_>2FOZXOQ4TOHkE`QWEWDnA/YsY:p;"=^>S2DTGEjoF+m%c^u@2"V!,!nO)fnA9C==\B*qZ
%X*6p3lD&"59&9IT=Xe$/8W+[BO!^pN;Z.f?MlbbE=fIm^+Y36`1M!>Ti?^()#X4]Y/p$]DX=gf)04_K'ou^4UA`rq<fX&QF;ei:M
%*;p?i/bos@MO1L2,,pKrh?uoSYF]1%jl^8YC10_+>4r5K1f%ClWf*c-SpE%PV7q8u;sNPD>bd[,P*S8J*mIWML?dctMl5D>:T:Oh
%ns'"H.G#uFS>9_WYXe<7V4>,AlJef;_Gfa#V`^f)I`aO*.48i_,OEf?Fi@7gGj=:fpVKkK;br6BrVVmr'N7mbKb)!i;q2UXiM*?1
%Wnn1bWMc=cQ2:;*fdLH78IHVlO/Ap-U;B?!(KJ-fW_u&E6WNF6B=LQ"_b422&:?<;>qm'HZF\-BrK,S#dkbO2DLR>A'XYN[MB@G2
%-EAYs_F7KA=hPc[;Em<3<pJg[a@\b993V6)Ho+u3;&(^h]#a0mOHo\,)7!.!5=8HY)ICkOLZ!g,.U8;)(Kk$SokqiCrU^M$WLKM'
%.g6A8C%4R[d:@BfX']C[Ok"e%X6$J8T1TH>lh`'^Zc+E<XO>,9mf:e!%j@p"l)HA!\k),"OHfV,)4"HTIYO[7VNdlfO0D.Ge>9%R
%Gj=:fpVKkoX/A(VIX]EsMCBoefd#k"4I%N.e\tH':V@R9;I;TK.J<:2Y#.kQ8]r/`O63E73HalA`Dc5ZVpndDGtS&5P\Ut3:=?F<
%fV<`WMPY:^eAYATKr9m-Se@=bq'juFVPI`0++fQNW[jUV79(.(]c3tL:HbO(p%)+f;9Z8-(-VjC9iY7_Ko;r`Wd6U'V1*`FWmo;>
%E0Z$0QaHN2ph6tE@ObVnFck5O+fj_&B?3^$r!Z^WBR+;,56N'&<``7SMl\P:H8fB2IX6aMeBQ=$Q%FaW[.kg>BX54D.U6M,Ok%&e
%/+q@IA>O0mL9)(G]VNLW_+0^>AZ:-@eO<O-L9/m#c]FF'q&-J9d.!2656N'&<gUAn7914-]bduChKh1E[Eu@rIhR1;R!WSYC`ND6
%+>*C#Ot)g$l6<3cUtuJN/RLZa;U`t<ZIHaUP-jQfp1U&/e5R5[>s.ddG\['>)4k#\IYMVP;bkcH8(aS^lI&L74E^2DHf:scX(QZl
%q=to2;+ruAb8t)Qk,D!6Fn*u#;t#F<QEQn=WTE;U\4/47,V=@r4d`/<'hdNFWJd\2$W!b"Sft,qk@_k*0dS,Ep^hg0<F+Pt/ulL]
%lJ5:eo$fHp[J]q2fdLH78IHVlO/Ap-U;B?!(KJ-fW`jjtQE$7?TB.O+%52Gc6h&K6Fi@=iaQatMpHr!1:X>3SEq?VJV4cqH<W!DU
%1g+*]'eZf'aQhTCeah1qA@:4j/6OE8GY*f8Jr_7Z/#pHT<YnoP)mWXrHBtXuS"CuW"V!,!nO)fnA9D%T?Y";Ae[m!*jelb5C:X.C
%Z;T'=Oqp7b+&,e&\b\`q(KnEfZMMJsQ5ZB9Xmdh^gsX/C\\tCB'm_db+K_4R6$:8c;[+0Kmd'a)Xu\9+I._<RD0@"MotTuCp_ma>
%h<Y=VT]%ak,u65qj'^#7\`mrb@VIo#qJuXVFk`(:m9b4?J$7V1cLmt+-XQsGd.'+amT+`CSG&6!!GY)KW[WZSW'.YAUpb,;$guo!
%Y$\Bhbg(Yp/5'GElrrh`?`>Jbg3WsVVpOQrOFd[Ori&u(m8J!(eoSNNeMKaAoljbJeZ5TuC$GEOci:0Zs6r7u<;F,O`kG4B<-,7g
%IrJ2t(LQ_4]m!rt]+9urLcLJ;,ugh>a3tLELO]*uci-9KK=k/3Fm>/DY2HW<XE`O3q%'++=;YE3"+ZIMLnTJ4+[6Er#QuD;L@`S:
%($3)/E.?KgLG1pO(qKf_@har(/RT"@dTiGC$QG:R]KX,1C5gg6`pE/cJP]hp^j'L+OU?f?3#Xl_o&O#JLJi&YJ/E>/:jkqCN)IA#
%Ya;NN1P79=/cd6@LJIn??Ws0ne5FHphienRNb509i.2<)p`Y*.-DrR:WElmYK7r8`bVbM>7i+N^>6a;s)fcdO$]W2So!*R-_&NgJ
%gJSk-8[PscRTn#.]uC;S=V/r%b^o?7=tfHWHio3+ld:3dhq@fk%Q>L/jiks=mN0c8EAr2*l?,n%N#nkd,J&\[?r6RD`ur3k*!.)F
%mHA==Xu7>cqa'cJQSp8c*W1#:[U.e/:YC6Us7>l4O=3Mg"oX4+a,qT0[:m/Mq+ko]"J;8pEbq)l]d-h>p$:E$UqUTp4dS1_RZ(R3
%XTM%9.P5)uVD)1?]Gk.NZ&Z)[U5p&5S!\g'96g%KQGIn2:F3JBNmE1H($8O1qdct:0_R5LF+-^r8&c^Q1oBg6Ga?+"Hn':G9d+r:
%f_+=q8T.paM?6,X[m#cdBQ21ohj5LZ:=H_^V]MDFnBkKglE6P0!;(n0'(s=rq\i7ZhD^f]#CZHD[D1NFh7";ihN(B6+4GDf;61N%
%=1)D]LF5;9h"AAj2TGGu"7GJ;q>'HL*QG6llo/2(2VR>lf\?,%A0t:AY'jeSbc\Dq\?GL7UL1][^X4Hhf690`mBa2/R,IQ?2!rcO
%LS,E4LdnBC8ZBJFIPd>BIjQWkGH$h`Kh?&q6?@HIO810#;Sn1%e_Y;K%)'SMB?d^M%^`@!%L5fM0iN9uBc7R5eeasuQ7P=m'[kY'
%q&R^7pA>j%C#MEuQ$s.`rCNE'@U%V[\k)65\N_RcN<=b3Kok*gA&.'splDisrh=g[hORQ1Ac.##43dm4>Mf:ca-:q_FN?5f:r`@i
%8]YC9JQQj9+OFEUhFWRSHR]Z?Ya&N/qa=OY.4V42%*MR@Fn9e_Sdr>hV,:`[;UNA0fHt@PC&EUE+8"q%]\$6lL5P7pBFs)O=J&1o
%9kuY:e(\6.OC6MZ:Krd(Z7;GOh95$&cLB_q#6%#)g&C-CT16/9f[k.f%4jI>QS2JCT1\XWmEJs?#QO,)r9NP75<\6,pe9f;HmdqL
%,4968[[+h;?guQkGdd1HlA@eZ10kSmMm!T-m@nj6.mH=]`\Q0K\lGIChS9rJ[g<H>6pVa36IHUtW/X,Qk3kaZ$Sum@0I"bAZ*:7B
%?0PHqWH;CLN4!C-QD[nZ=uG'L-QO_7FDN](6n=S+hT4nHFSlfka1^^3U>q/lIi`]:o/LR9/K;U7UXT_lQhFCR2iOQ;.>>[`hij$7
%;`;'$ETX9GP3RA*ZLM\*P4='C%;&OuqcYWlBN/gJSn+piP-N!Q&Zo/]\sLd=\G2tA=1Pj9io5lSIi_kMdSo?^DofEu^2tuFaLKg!
%<m>+mIo@c>r&qSm1$)l&&S976-`*ti.huh=Q&>lJI;Xp"geYu'.^jh&/lkZVfOF'#<\-DIOjKlEpsN)GA:0O0HR@bo#B`m?FX?'K
%a$bi&6cKS$OKB@[>#@bC`6@,&N>5AM[MY.hWd(i7HFqV1[Sl@7?nHT/V=&snSa)upT9G3MUg.^YoKk'nDViIt;,mJBgmVPKHr9E&
%`BOk_7[2A,CY<ZH02U]+%2TQ!QXDdE"/uWcRD1*c/#HQf0qullnYF\-G3*2^9I41NFZL=t\f"&_Y,oc)^gpsX.OT."oZ,H64hd33
%UNlU4M-YQ"o#8cg0E4^jg&%ZcI+[pDN72S7)dW^a?*9KjB%Ya-AGZ$GB#U"%/]QSVC0pNnhf"lb)etb.lthPVAH5;-G10F&"VrmE
%BUIJ)e01rBG54U2%q=\tdpt\RR/(4RMj]&AbR>;uZFe^UptN&dc!+p(?qNRaSm#!3-^>QWOgBXoSLqnc\nYRl],G,Q=ds4%)'43L
%h`UljS2OJ!\%lHc"V!OtOLd:7Spe>8f;#kOVobTUEV%/o(H;@f\2f.)>24.>8C7(u[`o)*cpP-%[=SHU+u@$oAd&W&>EJ)je\2lD
%28X==2V2nhK_K+9WX^/ZH+co,!/mB_2!f$ElBKj`qgB]q8+H1H'ADa2kDPrcIf?nI1G$n#hstiI:VQV0jl[JPC+Rd'e;Al@WQY@#
%T+s3\CdBDp<Vte.eHj@EX1=Og]>W=LZMgbXA2GYL:ju`Dj_"[9VcN2chg:bSMOuP[jbo`aIX]oHS/T$][iQeY"mCNH/gL_p9O?l(
%;]>L8W6>=$T+s3\CdB7AXaP5k2T"si2V7Hi!:)JYOL"i,Q'P,:#$Cf)T]'MkEi2t*X5A8l4c5jb/*;b^07JB%r1#8LfS6!(+#C$9
%I7aLN@,9U3Y\RZ&$S6U)d*T*&M*JEA8[6tT6dMg@L7JQ=opVV-5J?N_Fos:=<m\(W"h@F0p=8Q$`#_@mQW<WGc5/LUB6$K2N`]TJ
%OM99@:8'ESLD+!=m]!&J1?(%ug8fe"qr[fU3\KqpGcK&/GfbZ9ViYZh!+M`P(Pj7!I/\XI"<HnU'6p2NP\e+C*h'>h<](8HGM+)X
%La8KXqlm*BICu=tIFeTuC,T`g[$j+Xg%XfCjN;hsX@JmdJqDh"9ekmOM;jOZ75>p-0I/A^.o)$rQIr'1q\%WbN7\mmrE[rIM9K$=
%WNG<aB3'Xt/c/kFP$1G\g2g&NeG.NthF^Kskq@XP7rP2(8*a>.>Hr=]oj+;_cDO>1$dcU92EO%%R3Gf&13-S.=q@_^9/S[,3[qOb
%6"O8Jnc9O&7W+)TLE"O?fhBOH(]h06XP@QSqj8\bkpX!Y^B!YZ@^EtYROOEm/gIjUT_6ZHZ;bnoYB+a-GN5;?jqNaTN8,,2%em5r
%[)9$=Vc8*#LojZSPHK\<8&pel!jjJ8c2Q"'Q:0lIN7_`h-DV*:>&JY/;JLE.6TN(tLOGX(RfTA+hDn\5RsE]A;t5,`\R%^UYo]A-
%f1Z)Nd-`;?q`Lo^;OQu/P1(1@d'Qt+]'\9El.q9XO0H@/+JcN4Sq9U]r@(X?h^KD\cE4XtNVL.:El?>F`(X'ERXfQPZ.85EO,@P`
%DBm!NWqDafHrbC=_35ME)l2*[;(q?n2\KBRm'gme5Vg7%H\?hVD(@n?pW]!?eW`Y+>)8<7Jue(@.[A;,UD;d'Qp.qs^T-#^nY?`b
%"q;%O)nt^bc@E7a@8M<3B$_^ZRnG&EKbtGs[bI^Waar$M&0jOGB?+XZ9/c*a<eRMVqUfQZWbLA.F!A7=/349PmX?NM"_Ykc_.B2U
%F["rmMm22eiG6G"Z2aI$GqGsp/]>_,_:eE[eWS4(UD;d'Qp.qs^T-#^nY?`bNl+hg4<fT"KW*hqGoDY!S/HH5,p]VF*\sCCYH8N9
%R+D`j;Un*m&/C]u?WA]BX>a<+Y(l1NX7<6jI325ln_UttdCRAdA@lh>i9^8!osbS#1sL#V0^<fl#\=m/f[n0@L/"^PL_6A5ZfeBh
%-(X]u/&]slI;Cci<OM;U8Klqb5W!eVK&?!j%6/]p9Jj^0DTA(&W<B[nJG@N0=/0&Lco9kLTN8u<EIkIZX/[J:ogUIMeM)Df21AQ5
%n)Ht_hTL+"Ng[VlJp[SZ=5P2N(rhjAH3HNn8HD%2oF$mg@-2>E1fQg'0[HN!&r*:n3H<n.9f=6KZc*-0'usIW[.#6;V&pB6q,R7g
%/E8jRrCV;$[9RiUK#B1do,"E-:F8U@8GVk8#kWKg);Eus5V!f.b$YL,A<gti!>e;ea4MsWLH8LE_2E:/H'%4_#I,c"1lgsFVQ2CE
%p='-iC5QH$#N.t"`<FD36m-plR`DT""!C3/_p:>/`eu0#cJTcL'5*h9-n13!VoHTA"bDup(HT8j60"Ia:`GW0.!J(E#1VFQMJ=+]
%>c&jb<k3/n-D51'#';C5r<#?-ncr-foVAbnRpA;(F&">SENUZC2_J9rm=ld#iWq$doIWUk;T#pR[KOQ+6)F-ffdMLrjHZ1.WVceN
%&@uB!PU^Z;WRKN.R`<')9,i4+D4qO5GAO'\OGaPY:<5eqJ81nS!%O-q%qr+?:hYOg6M<ct=s.K0g;Q<TQMfMsch5rRCX^pd&6,+2
%^ssF'e"qs$&)HQVc9?;m0EN88pCU@.C6eVr84p<MrXJPNN.b,`dG0!BY=R]@Jf+t1V%Y/7#OF_N_&s8s0U`(l<q#579=,9TZqpL]
%DA#bQEAL&a;4bYL(dXHCT?HZ=>l/ojfGG3"]UPZ2O^P#4@ok!d.'ZGF1=@^FVi+'"7"T(`6Oq1D[tBPDX<B1N//s#u$E#U+?65jM
%`IYH5"AKpt(?rZgl&6mI!I6GKW,k-<:<*PqcM:!eP9;1X5S/F/baJp%P2dr%[uU^Mk"B\C:=*hG3&E>@ZoDCMUr+oISg8t%%02*^
%GmB<2(dke7,A9mV:XP30,>EjQ;IZeCQ$J/Amc&U)<8C,BRa1h=O<002`W2Zp]f\`ah$]S2it7uM3^#sEo.lVF1_UR<2NX0*4n[W`
%/PkLJD;t;u<okk-0stWnj<`<j89E0k&1VjCN70qCQOjiY'RJdX0rlNj$iu>JD//;1.IaZ7M?ksMe<c#PBfK_@k/"<["bp]i!!5K4
%iM'f`,XJs`I;o9A0EIFY$m[,t$t]0@lEb0(OV#fp7kG[u^jU!#D5D$hKo3:cNCRR56]/&c)9!e].T\<9i<!:!ORgcfF'd^/U1:.n
%j9ARHOU.X@MdQn_9bPs'Ra;lgOWo:>AfrR]YoUaM5p*-aV*M.Pcn%e75X0;X30scr2'=n%qVfJYX[nd-E?h/Jq%fee\0kTr$A+!d
%Q7.3$6HCbdKMQ$0eB#l=g9\.@[_r^!-@qgr(m:.]+=UO")qmJXlhmW%;[d?BhH1%=D(s="Sil4B8Gql5$gQmjBWP53nS-sZSp4S)
%"EaP_cU4'AS'?+r$irToB4$BC0/J:$/>=$#e+pi>6jg*/aAA?.Rij.!F3(rudi:q3O'tM6XAG[3XjFl'ekI'8cK-T_*ZN%"4JSs$
%""fX9!(+_.$4+^49943Z0golu<\Uj''SB!Bb=F<[Q*'H9R!If2_7'!rWU-m60+#XCa^aOurh9&:8F8*C73cB]fV(d(Chj!&oFOaZ
%b]bb7m=FloKf[d1qC3@[*]f+rc_W2/+Dd"u+7Pun0keC^Pnl@IF-e%;F78"k59*YfKsBId0$j0g8LAif"Z"fIOcXD'S9#GgFqfr@
%EpT=^FGm"NNU_oV5dj\H#QaU\:#9dbq<?D<#d8!oeqsCX^\Z^"qPV+-n,N#eIeE#6s6?4?rnZK0rI;QW>a5,2r;SKt.FkdIgF:Pl
%`Bnj!om`4b(P["6OOQ?Yk'-ecaRP8eH1WCp>4[q[7$AO49Z!PXp@@<PN$pMZ3li.`StX"@Be()@Dk2?=rDoZ;*]1p.NZ:![rqA4S
%If0\#7arlO84c!TW`UVg,iqT@k?Mr9E^CfB+%[ChU''KtFTm'"GqQW)`9^]JmmX;U@+3bBi/XWZ45S)6Z,PcM("8>tN%ht8/9F@s
%9k.QlZ=rC&o(1i+InYK=4%/,B>?MrVa)^<Na"`$&;Cpft`W=Xf*kIVuDYo'rJd+K8\I%:Gcghr\Hd#DlD6Y2A"EP0EUYKE"3*%n1
%2ir+*]Y@+Ps8+&V'\\sQB$h_=PsI^CI`+P:d4[3$ga6u&HI/U?4=@O`)N-9#IZ+U)"dsH3iAZ8[+3I%\o&%0!]H.XJk9I.#$fH2k
%e+Z,eq*'"3fY>l/BNT?;ZqHl'&q-E/l$#Z\8BgRNfRf;Sp>4'IQOCQX5sh]Ulm5:^Ma*7SGa5)>WFu*<*;EIO\s_^_])P&g.$l4F
%$0X+Sa;J`2=/0Ct"!;V3C!n.K82-/X$DRcn?V,F_fY*1],l+^K*]pmH7g$C@G53E\f7PuPRiLDDjD`0[58H+-=fGpMY$l.m,,Ki0
%lWjVkhu4b4/X2g<n<h@l,eaCaka9_lj3ZprR*gKuC!-UT$EW-sKjK#fk/p?HHnZAi!jC;n1>b\M(YIB-_:41D9adH)F@)ci>-66Y
%[:chWgWlD%Q1FJ%p`='b<hO9JWTXs[/Pfn"UdD(Q%STojA"+VH&!_I5gC4$=$aSbKkS/PJ\&>X[CW3hfViPQ4<b44<4XnX&\'7B*
%N?]n^m(mTl7S^W%6R'7p.j\.e,2P.LG^s@`/:TW\N\*<+"k6u+c_GS!#E:E`jBJCsf[rEI"!%#6O\X)o.O,s7)#N/fR[d%QP_]9p
%;%)BPA5?t(kJNYD]*]P4cfi\^"V1C>GMaqkH^#s7RO!Vt<I]%gb1;*m2\6gP%1Ok^@BA"lI=_rt2)pTo:^G#XO487mB7rAhh,SfB
%J\$'!roFO;>m#kWX-'TiB&@3Ur*t`)Yoaq_0>##M:#6t;,i1ChRNq>u@bdf,p8KE_V<QNTM>Mku/Z\\bfU3u037d05Hda]-@LI2r
%)ZTC)\`]56dVZCijEfEA#.)*&)Vo)N&-fW@Y_`T46O2L-hBn9nMN[qHc?"uZDi\p>YL$_=7CQ7C!gHHUE1gcf5#THa:E;&:^_!iI
%HdRH&<-sdFn+H=sW5!P`Y]RMV4*c%OmOgh6YmuMB88B.,ANl(CDP6^]q,B8t!"NH[)seVJ_IL4&=)ZIq;0KD:8Pnd63]1@gK:W!D
%^B90TM1]IHTo_lXCciZ$3Wg?l3SXm;YZ3)a,9i?H!^kEZ^-1Krn._RRJ)NN/KqAaW2@<u]))=Z1Bo&J'Qb:Q!@iC=_gXGrO"]kHP
%A&Ga:d?:clm>bL._:sF0;XK_#j%k*6DWf4d\9i\X*steCrd(Z`+$&`SJNm,F@>)s)`H<.i<8taVC6P@APG]:h-KBi@,NlOsZ+u]d
%1#epK$oU*6p(Vd7Pra*MAS_b^QMrijIZCLuLGpot\4"7h6P[]AN'!do\@piN@aptVX8TaWFZ^/,h`,MnU$Ib"DT59GJ`Fc+e'gI)
%giOoE*T38`>\DZSn3ja0!-(Se4Uti[7W:mKr`_r!g*@JJBT<O;7YTkCcp?.=$#PX%+#qblUGY4ZgH'5EDd.U(oSgN_0h5$S\+4pa
%i+_)g3CBP1Zm+h85T6^YAYD=,"2sl$8Z+H./#g/?r"7TD$=ftK^-s,N()BWGj;KECLo\RM_(:k7?:GdJN;\55Eci94*d=.>0lU%K
%9f.E228rL)LkWT"DKun5?X7;tD?RKe?2>5uZ/J"9c;EtK]T*@8ccsE%S!^6"JsWj$mcU6kn6E%Z\Zpq13-01iNm#B[fqtde^l+]4
%fOP)nW@e@WMQU<[%d>QD?$Xq'!rF%s16O@sUZ-3`@lQL-1dhU%&.%:.oRtWZ1U$r<Cd9^sWN(*ed+D+9;fn^%?8lAbL63$)(*6eq
%Mcg0D)9^ZZUQ_NH[r^\'g^m=1c#;5=;i_AR,X\d.<H#YNWU%cKGJ-*n`?)Ol[r8&)Dk:FjHhZfn4FO5O+rt&6'/tHEO%0eEcI$9H
%SPAZ'7NJb?':ZoV/kB/)>'T'ehkU2;jg"$hc5!6_3r'GP)@]%^6p8lA^p\?(n4g9P^a)CTXR9`_)"lN'^T`nI?*WuT:[Im7T*mcL
%E0uHp-ghN`T@)"-"$VFU.+pW]C8D&fGksj2FN;I!'uM7_,P>N=jN^+?QI6'XZ_`_nmcRo2+M'jb@DBD5EYcB>M[\Ah6f_BP@!*CG
%V`H;k9ll1S>>#d9@"<@A)dB*JH6G2@g^U`"oTZYe^RYl"oki1tba[))hHS5Ak^\#:_Kp;[rE2rP5:&4CjY!4kH_"DJ4$iJu1hJrA
%QfO5:Cb7H1I1YW[1:5F<Lt17989:qm"HY1I`5h;Vds-E1Olt'p@iHD!gB5Vsh!X5Q92UG+':(L,B&)+F5)j=+Qu9Q=<+al12RnDs
%c_a,2a]*nZ>-*.VbadM/\kM41SSMaV-H3X@+r_L/n@HO?\a`'[U7E[)Yt6/m(O;1[1($CZ#$sC+Me&8=)DK_K%NhndFrjGE$dQf4
%MkRIf,Rh61b!_.9W@+I-jYs%h[F#R$+%LJS0Rn\41qk0k#=-A5Z9=nZ.sY=EJL5]Ej7#?-=<$.]+o7#5!IU"p+PE4c9f5m!3Yt\7
%M*2]!Vri-6lgZlnE2g,g@JWuis([F6IKSBZ!X`@&Ne@P3'6M,#@Ao)GDr:p%`?n^#pUQ@#of_/$QgE)d!%EVS*t6l!*RB6s2CHJ[
%a>e--$$OUnb__!m%L.<SP9?Fr(keIuB1&tF-7aH@\ihXZcoJNN-Xaf"!KWB7,*3!2a\>(0Q:!B5g`W(E"G)>9I7=KZ'*lB'FU3O6
%Mh?k*lk&G=%(XAukBI"9(#-5QXE.j%dbd0cCLaX=,@*WViU:dAU<Q^eZP$Uj\3UqSS2cO(*LDBQ0$sna7b;WlUCT?H\4itTitD&L
%?"QWNO^3Q-E<?<r0$kRr@L=Yt;l8q1CdYIT;->9`+t^UHLc[Pkn+n+m:kbB#(3WC<c[ploBVFZk`>"esAS%M#g:D[+m,dk"(>2*a
%q2fR7g<^e_SZ#bPD3N'7R4ITNAAF9J"/Aouahk#"<el('2Km=e;I]f;*or.g&ueK*L.LG=@-T4mk/kgK3DG(o<Z-WEYt$6&LKGa8
%a&?N\N=No^7r:7gbD/:)[3UeJ=@":$au>`K'Pf;N\`^g4jUN%b&(b;n_JHp&&r0Qj(V5m@oPB8q&0'e"+6ul(8F`P?5V?gjON?O<
%gq/VG2h^345#*^]X3Maopkim2%k3S(\6RiMRhSSR;B(UGd!=W2<XqEDY_/jX/XhnMb?[GK;orSgE7g^%%(gRbYe/j\nE'K0(hBBa
%=V'ZUm(>EU$`2//<CS>tQ'=::CR:+le(cQFfk,HT9d'NB[]jPWAuE?)5Vbeb&+#[sJ=Ro;og85b3>)\qK_:>uf`>D/Pm!MZ3Jp.B
%%EF!MUt2;'L5#^PMf(B%pGNBl<=h\>+?Ys8W/lEI6bjJUCh$C_'Vp-gQLEh3>fMjJUqrEEXWCrZ9tXgdSi7(R^*Ip*MJYH@,noUC
%>+&>M&_VlF)XV$o2tr9H'HAl&E?]F^lBkp8(^HE8#,=]6*TH5fpP5@?:OD!MCUnJUpF\`2@D<Wb"<=0)QUb]L!!*l%^^(A7.6&.d
%3!!VB6]MlUhl"5h^(e,f%QA#28$cj9jNBaE+a\>JafhbFlb^u6Z9'1BAWlFl,@(+n1?;$q"e>o"MD8.f?Qb96@Mde4hXY1kBn_5Y
%>X_l2k4#\Jm[\[7UOGWc"N:l)U((W?5kBPeV9=4^1\i0:<eE)>GT=iQ#f\Gh"JR=GRU(u!5NkhNKj"SN[cY/>%1ol\q(Y0n0rU5!
%*Gql;&daSD$=`b'Jl!&BiNaAL'm`Oui%S07-<V4r&"6%J%EqcsMN_]Z_$^k`>uAl_?c0<YKZ\)q&!C-Qi3hUc'6+k(i;2FU/5$b]
%Am<tGb8GcXU.*E6=Lk^UM;WJe.i!8>L23%d0AuDqOrFanA7d>F(e$XcW^XB6Es.@t!%o]#N_`7*2p:7^K1:P`,']&]]9)GRSht+u
%CdZ7?qH:<E@WfQ8-Z@r`9@a"g?-.h1ZdC='69IBf=?)`]>t2[qZ(\6C.iSZ6o]lZ7MB6Jo,41!d_hdF3g<*3M?lg(d"CuK053+Fb
%</B-NU4r%<)\NoV_>Q(*l(eBg/sppHjc`d_/+Rc3QV_4O?p5DoO^9Q53-!9Tk*:Ij#KQNCZIcT[S>AoD7-D<]5:LdfgC+6_+rn35
%6e,j;r-<8SCS_`,O&Q1BXcPjhPQTnsnddL>3+YRRGcLG%oLOKSWSAO`A^K`YnJ*4\%o+-3aAsh[ZDA;i_"JLm"-gjI+S[3^rOcH;
%=:-.2c2GXc":UoiDE#H%UX,%Y8KcBAn[4+5g,8dd5_j<e?3Y7u:)nN'859Ir`$qppBNC`!G;Qtn]c3ou<6$F6<KF"RiX+QHeJ&,6
%b!tLlFaD4$6teJ!@kpCE+$;oI<?TUu;=10R[b"_4^'nWhfiP^6UHBQPE/Znr6_P8%nnbJYD;2DNU>'9QT,CYragPsJKe@DP3cu^Y
%6'[3-S\,W\LdP,]Gq`KOlhV(n`c01d9ds=d&!P;Wc@TlBXq%?Vfp3*>OXp!)ep?:tpB_YIR^iWH?+h%bAufF%P'WV0cBrpX8+?R=
%qU*ts[j2-("6+hS\gg]Y`l@^9BZ2,QJ1Q1JnEV5LLp#1'\a.tuTkDT`C!-i7ec'"R7"$QG\'d#Eklge<lN]fA%+-o8&@;]KVL&$\
%(LQX]]ZZM/ak'ZYo/c.4fZ7SGd4:Y."o<I]$l)ID%k*">>$oh=!i$.'$>IBMKC7l'U$Kq78"gaTMKe0jjb%2SR,IqeT(e;?dca6j
%EEQr1_a8bh+^1f0rY4V8604QN71`Uj.Wsi%Z;ppeMlq'J1SHM$n0OqsM^;QH.A:e,)JY`jh$`,*CAU-M$Nqhi;XiEfJ$06M4&-&g
%0m<IC6L$.?d5U+hW3TFP_6-NS3t+XZj[eoa,6F^4b]/4eq57U@U->I?hSBOGdi9WXrF(g7aV9sWqiT$%)VmYg=@]CV0)X[9Bk00o
%RtO_<bc40,2+3m'9.rilB"%ltOZ:::[XCSD(4c?HfX?a<pD*QYU'bVB"mD0[9"q=%%-W=54s)lEl,De1JPcJH"`9`1+dn\4h["9*
%gam$2+gNl@-Z@?P6>.;oP58RpL/=Y4JPa3*IaC%0>usB$RkRhX@)^!Xk&#810T_dOOrG>TiqA3>[td"r(lZfghHY6\F*o<1*_[$n
%J2^_XNDLDCgZE&tHq5$o#HC3tp;hOi5pAXo7U;ZSW?_j/<4UM@9SEoqr8>:<Hml:>,=`e&r"=fkauRoLRpHB@>"o*3Q-4o*>\dS-
%qP!80U6t1k2Hscaq5h-kGhAYYU0"bOW2aBkg&f43WoGDP1iB,3TnKAs<'cdT"j,Nfi.N>_!_A`<;p@Y+ZSR'lSSlHM#5R:C;_nD-
%G<.U5[TK_a%ujA*MUGRK.;bLB*UFTVb]8sYP%hN2MT#h+IMHeh"EJ5_Sl*OI^5'aBl_E!AQb^Kc'7pbDYW:\pJW:]8BcT?"%gO8M
%(`IQn!F[nhDD_%ZZM`*()!G64R?-VBmuM_NqWV:c;'3M.4AB-d3qoY[JN^#)@Fb<t$LJNkH=&lX3mE<+c#s6E&:H]9:LS)`e/(te
%j;/d$QcZ+,&1?_>QrJ07B_EMXFJ,b%cX(lshtR>X76i:*=2PNBWulVg'eo[m-o;+tcILN0(3LHb@.b%$A1(_-*t!DV<TC+iRB)i3
%*C9X^Lt?MQii<\nk`4F/"Hoqh,rh'f`Ye5;,YP['@bmruYPfrn$BJ%$E>ngCjChT4F'qBn!?+EO73N$(C.*V+?N:ft[T0->Z;I&i
%Xe\8+.Inun"Vh"[+;U4QH]7+)(sT<R+)**;b#i8a8GrN-O[eh5p?Xus(_H3.JYJE7V,dq"]2<QUj)*Ti./,sd8Bt1k;Qt+X'm'3Z
%nr_'9\)V&GRpSHjChq%6PmqdI"8J.BjIoCm.k61f\cPdEH-[!7LhB`mH/!M7FqpccMJTmZNVEkXJrj./(Z=g,:@BE-riHYlSbVgr
%5&Hc=U@;tS?7VT$NVrM/e69,p<EFqYeH:j!?kHa**Gt[YJ!6tYH>Kd-4%U^kVNZBcd7LFeOO<3#lB*L^?IQA/c]:Zl.M&o$ia>=O
%8e&ED[jbNFLZ]0a.C+KH$eYSmOSf<]0s>56;)JeM%<i+`-\O%e8sl.,9L`C>;inoDlI-Y8<iFRM=bj0G(T;Na6Of>ZB\T+N^'31l
%5$"J(,O-^!CAJ#ufOUt97Vo_(B6*\%C)bVcWY$8&O#bd!,tG]g3<YQ!a*SSd*oFA84e2'SG\>L5GS#SY<B[RR7(M+]k=2OKK72gb
%.TGFtYN\0*Eh)EA::;:5/uH1MnO]rfMC;E\N(-N:a@a[hhjASKMR9rkpC:q>5iI;7=/\uQaOQKFW-s;7B_U'[ieDnk[)IYsPROPf
%Wms'b3^2Pu6(3cZh3<s()ObFN&>7RR_6^0I]/DQZ-O0j73hP[q9J8uF#<=Ad$>j1["iRtIJ4L>#o<Ps\$u^fd9/5pVNHS6:?JX8>
%D<eH:1'M3QC)8A4+-mQN.+"e3&s7lSkH)Ka*%,5VO;u9HY)oWFH(#s;5B(UJMBLqN.o+q%C8rUInT%a$O/hX;FLY#HNU(hL:!MtE
%W%,?Qcqp`Q>[7l#P9oHRZKDQUCZ7ZioZZ!d$Zu]GNZ7jpCf^3dVlbY[8m=[3kocJPhWjV=Hn%sPB;_1V5q2juLA')f"UN1m.&;"h
%K9-G<gE)1n&YCC0$kEX$DeQt4\qL]W;W$9,\JF<[S5Nq;h[q:s/`I@7lNd,HA_l]&LN`l3'l's[jB?`FC<8@a$JmH\6u[gZh@5VP
%37@\9SWG9dr)s2!4?F6@1a:L&U+l1]c)D?0BVqcaOF,KJs1-biOX\9"TYu3eb)G\*a1c&1A-tKT\n+ap.Rn^P5ie!02IkPU<%Vk(
%<Feei-]W%FoPh:6Aq'\R1P`0#%CUsP-4V!RNB*t;AO6eX[eN0%Y_R9OV+4,r3:$_r&1qf%53nr*AmLspGVChE:eRg''T&B?XMhJY
%O@UV-O[HK:>fdW1F;@kDN4QEGB@NRFOnc+^gd%E*YWq(l3>t!:3CbLT-KF=3(^6t('%#!@!XaEQbCs`Ml#%PX2EF$c6!Kn^%J5n5
%h"4rafaPeInfW=QZQ/B-^kK%_`+TB/N8YtY7ZrHsJS&C)%=sY"$q_m5*:m07\.1BX0aTo@[<=EaJ[Oasd,M@s$L\.<0"OE`_O#rj
%1)0J8RooRe>S%64[65OF+TKT*\XW6:]!eYp6sMgo'b]aJ//.A@85&!1%rC:qU5:m0j<L5_1khZ0(>7Ib6OcGr)r(,K-F#K-q`!uG
%cUAq0FcIQZT`gUjcP0GYhpDXcG<8&'bqF9Zqr'$0=2PP3<f,06`9iLT1utEVg^Oo-[uRim\@3R!D2$NnO3al/n6QYR-%-KcoOYZ<
%FVW3<cZB:n?dT(8=5.^olJ9X48-rRf>B0*qPl#*;s*XRNna;mVXfsk`nTD5Sh@&?(;`Wj65BDN!js/=C-u[7jSqWqLEg`1W..b"3
%e8$PtY[o<1g;.EB1tG3p#!,aGBp$[G2/.c+]CuE`=@&IC;sN]VU@ZG\3cmF%NmkFh<.qrNeHmNSbM(.%"Q2:(THS/M[l)0(mj%Sg
%h+?Ri2W>2s+M;#h-k(Ko2W>2cHK8j>5C@?W/kF^gXUcR&.3Z-mOtD[saBWd?aGYVW66(lKY3r><*]Pl4oa$R?N&LfrTpHUl!bK2e
%O\u0B&[Y$2,cZRnJIb'3OX-[?EI-VKBK`LJs6?49Z6uYaJ6L5'cbneE31rFPF:<JT['Pm@,F!Al2EQKNp_J\Eo."`)r8:i%'g?!u
%aZ@BUST!R-Y1Wh8*^Cb/&DO/nh#(!^rkQQBM-PcF;&>?7_:?bO[Rr)/_'5u;ZDeBL]>`O2]Q'E.IS0,#,6Bg>2&-;!I04rc"8ab4
%=,SN!0:*9fdH>T1nFT@O'&+5_b$IER[Zn&uh!BpW8;[)>!D\bgIHU5nA];D&-0b+eR+Plg*#C9Ad@7IfSNb<Ml)VNn?a!^+\h^\^
%BU\bpR/';If\\2Yn:=na'V.2X"L:qp;pbn97nedY';fFeVNsr72)Pk<G=[:?elZ7%%NfNFm1G^@8$/u1XD/Q(#$R6%V.5-cgL4lG
%gOU2*_CV/nRTF*='-=^.:!rZLfa.'!YlTM.)]'d8_[M4*_?PDGU1&G6e\E,VFD05k'2jhM_sf'R"G@t2J`Q05F+qQKl^0<8R;Z=M
%O_\`cgA)_TEG>6WEphI#jnjUe]IE[`+glafmdZgIJJ+"#Ig!._,!nrub;CapW0g,VX`:hO\5JbLFVi$jcA%t1RYe+B8_3CIZ\;a+
%s/Zn6@pr._oj9Glp[EN.!/51b*!Jt@l3hi_Lo=.eH7KgeeoKa=ru,R;/(!fH!=#>:nHtHZ)onWdCJ(]:$mXge#K!0&%JdfQ!4ZQf
%"7[e&Y*fq47'V0C/V#Y06L$4G%>DY8KMltWE1q^*rt=ol!BV?>$dpaB^kC8PFIB-7]Z5C/GWF-MKPTBg3"Q>p<pS,E8)S?TC?5We
%*F[pt#?%uP=--6/$oR*5X^2:Q@'J3+.Nhe4C`jl8ECNJEJ3FDH36KLURLT91@WE%1CE38kYk931SETgrO^psZq#P(k(V+BJP,WFQ
%Qoe6/c128S?jg[-J4u1O!]o%M+PA/3>K-&T&-t9rJ/F@KOFAF.[:(nMU&imsUEYcrNNoPs<"KU'@ZWU,n6Yrjk_/7#j#L]>fY^#e
%[3cc_@j77je!.t6.c-V.hf4cEeU*,"G><Y7f$O9NYZTV+rjaqZTM@ETqukC<$;k]Y)D2)\\:ePYX&"'eI_)DEQotk=.o27f1$.CC
%&/*s6bYF;_%#^Og:U-"e?nQ9"!k1O'[CTEB(?,d:Ns-FP@SBg`:Mbd)l:'=X%>[2n'ZihRf)g&`&Pqd[p/n.E$pjEt:sZ,[!tI;R
%TmVnF.ZZMF[G!F^X3C7A,,tsu.iW=gguYogaKAn-cJ()feVujIG"\Y?*.1leW"Va&AS<3Dca#&f0#AZ;=2>hWl/e[.p]tpk<Xk<%
%'&3_?O+K`%oL+OSe79qLO95u:5t&2L<"#KFPFC4:8._4*Hp=%i=_qkY_Bj;)@%_6alanYoIX>I43?8dM5h5YR;%%0D*opB682X7@
%K`^!A=?fj6i\^`5a2jf>n3e_Lj2N4^\@KEF@R("'g%r-T.G$tCOVK"H&uW>I=/ZtLqaG!>FeN7E31Z2KmI4T?]i=1m;m.es\LD-*
%i6n:f[)tk1q#PO6@`<6?YU*/F)=anem@=NjRHqXH"9.$;qZ_Li7h.Q/Piehq1_Hj8C![bl(uVMsT?_mqCEQKlD/G9E0s=d:@BmkC
%3<ZS8l">Gd*,?r_<`)MZ]Qt_e-'\$YYko#.&[+:O$rs<QiaTop#l>ZD1X6sZ/8%YA>a/Nt@QWS[)'<!3Pc;i#lc"gBih0[>@FLsS
%`8m"L8UXeGFuS?Y$2^J<fci:,jc."5&DcElb.Orbf+rc)m7*FLMOn,linH36c1u$7[V-URp#P5)]c5,mQufG+>B5$UF/n5G+kn`t
%c2"SqhOCoZB^>/SrKND,RsEDY<=ip'D$@e7`u:,NI2<m4?boJ9U&Xe4m%K?1=79`+h:Y*gRs*/4:Z."ATF47R#D,UKZCuT9,ZP:M
%YgU%0(VH-8*id2CW[:_?WqsQ1Wb@Akh/#M[W(Wp`f0E6a!!Om4gNUJlWTp0?4/lsmeYK2eMlIa3#/Rj=UoN4]#r_8dK64-G0FMeI
%MA?7j#n:t]K#Cl2]fRpc'ad.,5g9V,@s#t`3arR6q7)l1"[<$hD/hTBK\Be@d0F'*&W;51>X(fY/k?CV(O[s??]24;$Oo<_pUZTD
%s7)FOAQjT:NcN4YkjrEZCNp[+mRJAF"#BlQ5Q9p=c^uiLi\Q4fo8Bj9Dc'js[Ecm,TAV.r5!/NU/Oc9J=aTF)4LVGgk-I_V.r[;@
%pYicAJq5bf;0&eu9`o=hd`G?G3&90P9.pLp?7N#r*U4PSl9pA/-;S9_Nl)bHVdL+Z'5N?S+7QTr9M#>um7l[lmIN"j!&Xp(oj\=i
%-TVnM;/n;$.K>?aHB.REOa)rei*YEhZlV%m?%\i@6AmbZRWWZeC'/AePd+3dp0CMMIYi:j*c?@dauN)=P[3qY:sRTjcC[Ha7m1d_
%IgkuiWD9n1-)/\MRUSXk;K3];TN+jk(Q)+N+kFrSXl?'BBj>.Pg\XTB'n!r+icYXZ>/3@r>th?_[<Fk-CZK\8Bs232I(k.ZqERQ+
%N.2Q97-2)-/'r9P%,sad?8$=_OQqdl"%P6H)hN#me6/Jc>Q(j\<]J`(qbRC"]h5g8FmZb%L8o8/^K?VZ*7.S2eh??QDaW?_nRO!3
%.us>6N6t7P*UGP__&#IlZ)4Wr&a#P\/hZb'Gg.)),=7%cm-F(,FkQCoPTjr8l<!YXpQ;m74=.gk*;Y5,C5C"H&en_Z\"s]g#R+tK
%iOB.AAjV.VLZ3=[j"eM@7E&(D)(Q>-?+:`O$:k$R&>>In^T:5F&%,^'.2clCGVG2i+;@I$KfHlVEns?/G3MhK%f'^G8Xd4m#SH2f
%TandJ@7R+!44r-?#&9;=^Es(C-Ijd8'CQ$?f69i;iUAouUe!3MdTV/'liPD=#h9Joid.;6!J['%1G8:,*mY\',=7%clmqNlFm8O*
%PX=^MCR:%&\"W6@GZ'?QD^!!dWOTo>L`L:^8%9ZV)!]O8><]1\>)9'KJJslC>*!e7eI`tC!VVfQTt5@B0+&k_M=o'gjSMd.24bNA
%;7m5NIeRh6_iD-IUUi#,U$f4kUslFlBGH<j$OPBFKL182OV7"g>P8o6M5L<G&E&pV^T,Pk&%#Kr8b!h_'3^W%e/P5RJ8Nt7eTtmr
%J>di.bsm;IbCb_r67m=@Sjc/&":*QqhM:C%l+\W73%!3/)j>2-h6$4C&<?lhOjIZl[2U94YR<2:50R:n#`+IdXVk<,0W/[Oj"ee(
%"N=1X&OIIF?[3`n9;hfa'Om\:^T:5F&%,^'8Kf-$>p)J;YkM<Y'OY.UG?"RAbJr;jgdd7KUNg[@YH)RVZ,T$L&L&3&>PAu7a_(IF
%&7M&/^Sjr@&%#X"8HBlIL<'q(isdHQ!Od+U?->5<fjnuEZkaf'ONED)2n]n,m"c?`#Q)*u5[?/Df7`q=UtTBiibb@#oplfTEK(N)
%qba5lcVdVjKGG,FSc">'3GS2eKl*2lks'i9``-Hm;_*;<cmoE"p8OAMl^9q%\79kQ51GR7)u"&C,ts3s<b)JU>L[+K)jp*$fqJ`u
%jgZIpo>@=K^YNus<4eh"-,FZ:Ig*BV!br+Y-jH4\ao^c_.1#TVQ`6CV:OV%nc(s\gSmb7l78#_BH]%JW'4:0+ruNKnhE@K0%Y\kh
%:&JQDKtBb'cY'ObGHX-8W399VbT.Q04kogKjjr\ML^<1IM&Y"ObY_7IQ$T2rE-/630D;Ud.e&SF^-l8JqF.8^hsSC(J:FV'@26[g
%6$^CYS;?`[;49$FTc;aV`asSPIAkEM:7Ar<5(llCJ@'!_cR[@^&RLj`SA^fs2=MIfI0HVqJEd?"Mc@sV*oh@<rZ'bG6$`dgcbLbo
%GZbAHNo+Wn8+q)pXN"h"k'a2q!`)ClfKY.?XAF7B,S\<qTdAVrY\]HcB5(2R!_%kf*92DX%^q+>jJ4&^:2o7!P\M;\51Dj_032Ff
%"]6JpZfdC)MM^qka"K?(I^)U`>h1:[LYAp$S.H4;B$M)N4JJiu+[W&nOJB:l@i#T/X-a`6,8GEq@lA=qB,aW.OA,':N$D%Hb\p=(
%hIXueN35'+17GX@9*oLc)hB,HrWS)c@fd"a-a4tQ>cU_3`7CL#,-`$QqZr275l4-?')cqJ.[20r6ti-G8gGA,'N"h%g4:2KgB5kV
%Mhhubq-"kT#]oAS[h!4q^W\PS`O]6^HQP,B[PhLmed?8nNp&4R;M8_SNn.>9L3b?bV7)_DEoV_$nn(]d$rq=;lqThG-l+NE?UV&3
%!5VSt1tGV_!RjpZW=0Q9`U]s!M5FT\F?2lL&,2ST)30cCPLWq8+o!$?^Kh?"/PqeM7X@!&MWYg;BVkiikiRW77QN04m#BDNk"7\U
%>2mbF6VS4'kD(NkHW8F7J3XE09*M/;!9t_6:lUhgl=]\o/L*68#F/ui;menI=70Fj[P\5d``2SPD/4]\c;[ajhOm5C/Pr,SRS7-e
%kkBbu*]F:=Z7d+5iS>sTNj`A^+f_CA-sQNR)ME;Z[m&7]7FV@Ne5UY#s#<j?9`WAIan`@mr);mG22=cc7;8W&cgW_?m.5I(3DeBH
%?/CA'8">,iRM2MYs(X3CiO\;>WGO9C15)CA4,n#jgL5`gJNedRE(;4FegS7AC/0Hp]T'>gS`S]ON'bk(kXcLaH=]Bu!;hD;.$gKa
%FA-EtnK11#Eos9pMn5?XV,^#33PhE=0dC`$/h14,U0gE/.o\:i4q$8/HVq;/I=+BS4iWC*'H8Pr2?QE\^rWtm(np)T5>8_G0/fjS
%V8X1OLUO8I&p_Q_nX6CgH:3[)NhBnY6VhQihSOSPTRmXT)h-O3Y@YDASkmq,X>a;Nf2rQsEm5,X_u``)WKi\TaTWN"5&8YL7,]Dn
%8.@slJT3c$Y]gmRD($o5$t*uQ8)\L!RGeUgX\d,n@t]80N,XcZpT@tX2/H#F1\W6^I7r/7MaN]p$X$8T93j2@6S9mm;;.<m],944
%V5PRu=6&KDjXQ%sp>e+=r<X2$PiUCi[\L;H.L8b-Y`FYR/h'>fhj$cK:kA4"+h=T+4U9*&=bsIMMJD<sE3.,`mE!E's%q+T[6_G'
%ishNVd.ar>HAE1,d>L$2^+4hZEo,liDf<ojB@DpYH(jG%Ob;@!Gsh*[M5+fP#c-D3`cTs"M"26@b48+Yg73nd]&ROuL!F?u@l0IW
%7\*LnmAmc4,_?=@$f\gTlH;h07(XJWA^5Kk'ZhYe)DnWpl8+AR6^b"6HIF:?5i'C5;*#^%`'$<b;&RHGjd\C2FnTr(UoFA>V7YrM
%Np?:j%XKa[YZ]?R9N.\je.Bnue<+f3P_GO_TpdgT-"t>QWqA@!fq>9b>X><*bK]5sRLfX83AH3pBU1ZQ`KmBs'5k\pL]S]=ROV/(
%!-\+;JbCtYFsZZoHeV:5i1j8%5Dt0*2`kphbsX_KFA`AhA=%Ee0+u\G4*Zrs9M:KoKB)rZ<"*`brb`cI]7,h<4#[QH??Z,.\p9;V
%hJfsj+(C!i&PRE$QLq>Fe*hT^SUUB_n!3NgP)X,qTJCl"!ucts%lm^m#O9L"llf/9VolC:"jX>hBMo<4Xh9(^mFm-fXD//d$QR^\
%18@1kTP3+\K3A[uOp$YmgIEL:'Y'7Hg)odKBcmYle'ati?'EFL-or#F&B4Rtku,./%=0Cl;u<CON`jE/`;7$<KgoF;?G%Q5+Sqgj
%'tMB3A/-;/&?pT%=@7Lo<&fpR!CEId)smd!YErk]43EF(3r\@B>W+At\^7,0:d`W[M<9fQSQJZsd!URLit3ISgD$Vc,H]b3g9Tpk
%KMus!LFL>Y^gJb[ba(%N54`T"Ai5UCV/Mk35VLWso!WoF3VCN9WE8`(MB435MXc+EB$!m$!9g1L[?!39)`o[cm1+)UMMGWn&\[!4
%e-R9XFE79&BV:s,V"aS,dFI;m#e/u"g^S4CMFX@NbY?Zn&BY,LP@BFIIc^.4eTFj0kWKeC.J@XP4!U8cj&%9I4];^"`,&DorHf\4
%Me8_gUD(!I6$gNT]c5qk*05+W0H6d'AU`pl?KK8MAb]"@/?1a$qHhm@\)$pWcLA&t"nbL2L*^?gENEMh0u0idkB(n7dkI"tLhCI-
%ngt)]1W%6o*c1pkj2ZEFoY.rek@i4KSNi*1gS>r=h1]H)]"09EO)T-"a6\em<peSaf0pD@UFs\nFXW=];!1BW`7F/N#U`?m_n%2Y
%Ru"86pP8H>QVB=+#,A_C6R->\Fi<$0#]15\%rcQD8,LKu:,Hrka-"P`c)mXVF5GJQJFYu[`=*H\PiJq`Xm.<DHOjn9YJEQmR_)l5
%:kVZT>]V)2U$GQ71HkDE[!G.WFAr<<83Ru1S^6*b_SH73d+\mZY>X%(\519b@364/SC"CTf?4cUl8Sfg@s:m>j6c"e(6(:pgk]%,
%@k][D+gPWYDi.],f*?!I(>e-$.PD_5XaGXC6SgJp_Oj=^[n#Xs"Pj@Y!@h\^7^25mP1.shJCa#1)3275FERMq)d=aHK2upOSTmrE
%AOj@\oBVYlQ05NB*6=%D^3)P)jP!'Kf(tq%=u3BWkeT:u9+lf3d6^pkRQr#Ye%=h_0rW(RHrhp``VS,,ktRN$[r^f-d"6`]q#&EB
%HE-Wq/66hte61KK"Y<K:6^_=='#JgTlTWq]3\kK5>o->)nPd]81Hi>[8a2IF#HLp<f7cXR,ERuLP3[:gFAd[9D84r#%-\(?E`nY+
%>lWm)gIl:\Q;M0p>$(SG;LVkA<Uo@bZ44LL;:M<$P/VHpI<:Ee9p"eT3pA@f0@AZMN:%,9G`H(G'G^"*M:%U4K!t.INj1(F@4]/q
%_nLCV_EL"M\;%70)O6Mk-=]ci!hZ.5p8**%2p<b]lca2tlCaQTe[dlpFk^S87:T?as-*9olD?"OO)Ds#k=.W,I%jF`+*MO7cAg6'
%1CpErFf-ks*09"%r,1;R1I#m[s7r]`!?,#Y`tq*R$+dQ%2E81*!k\i$@bb@Uh;nP3W#X_.+,YMS5*X#/aPcsJHDV)38[b4L8io7.
%i%t<)g/GPT'k)Bj<3p#7L9AXtNNeIM:Kd-Y>Fq':.;Mi4gC/J"F6U32XL.b=d[%0W\g"%9_EN9'AQec1HBV.IRZoZYlYVktMZHDW
%"XR__]gP:I\tlEfY0!Z&Y`E*c=nuM$l_LUR=d-.?1s.ik\+\P(dpJeHSh]?L**VUXRKTiE"PVl6pT*J:qtJJm^bo]ohGkj:[:Jm5
%@+f)<aeICO;UMFnr'QPo%MV7fd+kQ>`IV58;:ck_\KOi&[nVPj.;Cf/kWH9".?nK1;:$^aD\qM?D4WU7fN7_=ATdD%rRXm&];gu0
%;#UB?;&nb-p2a%O:)EMuHK2IcOn\"4r?=q`KV_pF>+S,l;;DTE:dgr*^;M=lS:^-u"S*-`U@;o&?)G,F^DpuRof)3="'*qAKlo4/
%=tj+YBLV.12RS"!>Z;a/DOorOaMajhc``I`:5Ku*nS0%&B7n?dJl?5GJ_jEUg6u^C[N\2n8&Yb#Pk%`@b&u[c%Q&=r\H.-%%HuF#
%\Taok)s`@^5mP^d^.M%mk+ZY*lDS6j0u?,#0jfY/Q,b`WC@]p9X"WWdFGj-bDtj[uS'#[%7\Gp4`X)J*eU7&(NeSlf9tm'Do`i-&
%S>3UV.q`T]91`2*>k(_,Iil@oXWA6LRVXk7C9lBN`E(hK2Y"nl?n5UZ,D?T]#ZNS.(h"N"S?LdLXPi0?a]F\0^7;A.HC'Dkjf>oT
%(uppc3\$P3N3J@Lc;tMe,pltn^7'HBKCMr2L@"VU0Y#)T\31iPk_bf)#lEiII.aX/ng7^<^7'HBja;c&Oe,0k8\U'#0e1r,_1>3j
%)C+UDQh/b>.VCX7C@]p9X"WY:A=)MgcM!XP`l`,^WhY`Eq>e.c`FK]*f8H&-29BTreW3."=Y7au:'&13aY/+D=uB!:d^XWG]pu.[
%<QE_5<KjI1=1s0cd'?km%gKB!lHa7S)X*'Hq?Zu^ja8r'XsRLM^3U:'6AoGecq&K-=*]WlD\!$W.[WedY`E,9=#9>\o$ug%-fHRm
%(9R6V%0mp)P;XAg&ZB6;0u?,#3FC%HX3"G,YF^HO$HFR$8]*j_\?*o/D$7FZVEVj\H8T'CY<'1WY9mUN^A;la11;n_X'Q[OjQnd8
%,>^s*I=PVmC9fVd?uV:Z,cg)NX4Psd%#=eGHSro0pBH`CF'ad[`,%;Rh=ere:W(%E*]53A7X%5"HD<51PuK.t`$O!I?^.Fn2%cD+
%.[bTg/jcU\1nTgmU_i@@ii"e!om/Po^S&o(bLG2l`5Qd(*uLt`"WSA4:i7jL>\:<QLK='RD(WMm?N,HdI_>l"E?Y1J_Zmhp,#SoR
%U(2Yr5>l'MooEP/<ooZtidC54ko_jn7AC/#DRX44.'kbW:Q-bn#H9sU;+Zbt9.Dng*i0nY[;!2uC+a+O>k7*W,nG<7)t'8VcBc:F
%?f[T?TWKfTUY$4pe4?V+,dAoUj<\hHon657Q6_.+)r)#C-j^\IOKp*V6WQ0661H3B8[uko0&",8\g;;7,TJ%qX).TUr!S'J(DWl2
%7oPN]_TN/u"EeC9NTm>2j-eLq<;C&+J[mmh'4(Z!C3!(_R`jGAOK>r4g]tR"K3me#>/g-.P1D9K5'7)^&65I&H*iL(X7FW)3P@/X
%4?ZF0:usuAMA]SG(\Rc]l74;u[9fL]CmCi&,!E5j:=l1E=2lYl.?,+cK2qmSIbkJ6(<Dgi;hXe*XV2F#9u`kLTm;1ri%]?q0),L5
%f1]bUE0\f$eFUAVFn(3JF\M>EqRfq5\JcJljB9.V(3qD%0VU/V=UHfD+5C3u203e.rNK-^2T;2cY\Yqa(lFC=Le;#H[Vgu*(il8S
%@KicUFoP%a#Z4)l^Z:/ns%VB1F?S8]L#B9"=(Ctts#&>!(W+Vs]P?Q`&VVF'U-((Cq?fE=5L;+@ASQ-`SiU0kC/3%0?k$1L6]nt:
%()H@S@91FPIpq`gKm6Ie,1WlrE,k<^*o>Fc4X1=@Woj8l6J$rY\urbH2X:-Eh>Q'2$#`<Z&!%d_*HLTeZ/K9a(&d=qjG0eLE]e,A
%?<tj#nE'&3FViR%\%i.kiUXWs9k(b(2HFFu2R7_QB7Ws+p!Qf'Utb;j?)3ApmQ>f(cq_-p^q.AjM=r-(Bn/%=@S(iV'fg:(PhTu7
%qKfdf,3I5VDPcTs5!,>k@]Wddc22LA4qXW]%q"ma4ETua:S`AeOYm@_%+ib1XBVXogoMH3P%?"#f6P<#:#(r4csD%hJ!X4W'aP1N
%"QMj$6WH#nj-Xgl0`4rcH<$AHUenBmfs@`lm'J*OhC"hn/HZtr:_R$.SEgIT1Up,K%n"c6DnWc$bP8A%#$&EQX$Wp6;03`ABMc--
%%Ai%t$\NU>6H]Vm?;OlN>#dLhb1d,"PD73imtt/^b)9\&K[b^M9m@_aCcn"#]r2^Xm*+Sbo)A/c?&61-*Ve0$WJY0d]]2-gdoM@[
%Ff2g%@m"+i/=-Sl-uGVg5;/M,o6!0+4om-/47KH-Qrq$O..%]?<iEr0p0G9[M^dprdB5UC[o7*7=gA7Dm)\\J8k=O[aucHuQTX?D
%:1!*Jrpm&4lS%!i%ScZ6+@VoJL!BUqM<G&2rU9d]Vp@SW]#\DH1UoJ'Is^Hqod(::#5d(Deh)%l]N:KfB7JluetZ#tX?C?+'Z':;
%JFqQ55J)ekDn$V?rgg:"hd/tljDKBWBGHMDPTO;j&H>V8>_='!>B"+n!")20L<:#S1;eY-Aqg#Y=cH\BDGefNIbHJTZrEOm$ib+G
%&2EZESrIA]]5VkJ`CRseAQGBGKl,SS@anMDg6To?&^5@AOb*nXlj[+c+nN]Mb^lMD&encOddO3A@F\SG;AJgB]*3)[j9J4PJ5c+C
%=Om*)@`<iTH^3]`.r^^C)l"RSML&HFd4*a*JQ+GmEB'S"X#Lmj>+SBiDW()M]FI%=cT>n[U)9%=J=oG_:Uo+Y:BBh,:bQnt5(Op(
%UhQSVUQI:Do,:l@C\_%FrkE)C'j\GcJQ+u91SaTX#h;@&V,_02UJN5'P0*oqT^'-)I<g1oHPo2!Fub]'b-O[M.XuC<!-*5s$-C.!
%D_cEc?]QrCEeG,TX'Cp@jPd'e5O5k)FFgC$EdIhnD((i'e(Qp\?)PUOC1k)Dao=o\-E3(;.`(nbM'W[0WN*;$@\](ld$)#O)rMQa
%#b5W_\?SIQ,g"*$ZVr;-Ho8m_V"JKCRTTCH'+L;$mfnLTU?/EM<0`a/[hcm#d(Xp`B11XkZh5eo<:/3Hr9?BC#`(E;o3YMCfe3"S
%aWD6&s4p&Ols%t-s"Gq5r@De6pujh4V"5tnfH9aRdADU6ZolkT5XXB8H8s\/eb,**Sb.IRV^^1E5gBNU[P>G2Wt3"Fp)8L0l]!e*
%e'R$A+1A^%$Xrjukk:NGI?Vf(ASEXEHr&:?s4A)gJ!^)+78qh->js6Q*WT.[[3-.0G-rtS4BD)o-;4*%Z8]-d30O)9IPohY3BAHl
%D%kHI:ZUOmL'TurarH/G,aW?keh&/@HX*CpcZSV04\p!7Aqo>_8nZJuZW&-,hL(UCY=@s?Sp4kTbX:%c6c)XYBiY#8Mmku2&_0^\
%Jl6)e5\4!-6CsP3Zu1[-m!QKrFcMt:?i1c^fs\K*b<G"`ckJS`oj)`c#Y\'G,\[#Y?K@(%0T]&3,t=>[%S`nH6XF'-oQ1h_hds;g
%!e]e"W`%>/h#Ok5D+EU+`kF>nEdG7*L.fY:ra]=3dBPDO"7Gf`hZ5V[m53'H,[WM&U3<@+1s8,LqP#:KH3FXNf*sCE$>njG)?2kd
%4*)_Jq*Wd+lOUmj:4;>n;_S1K0>IH[BSU%E#!\>J5!N^XZqh\!25fd/nULN=#)3GXB\2<mc8ac[LePUU$9r>XlE9kCJ&&@Gd!P!G
%a;<h<9pG+m6h@+KQ3Q1k(nbkaEnZT/G<p6G,p$1gY%g!7"6JlHMlt_YBuWMF&J%a'&at42k*gp**6u:,Ct6<9>BrVIl*qn64]'p_
%$!W+-'tZ?VC9lB#X1,=`=)e)o1Y1^ogpX8im:p+B/9m/#p9%S$:;WKRpX][PFk6L6D0r$mO_qNJiNLn6J[YkFgUMYJ'XqGe<pqLK
%83;&lojk,F<o9"@&n5i&*ULNs[X*kd/AU4<SmmBA+UVu/F;;GOTKdGn/i[a`-?/K\AS>lO5Ltm3K#r+ul)nDT6tEnO,`g$e`E9G@
%FBkR7H-KA!]KN!n]NE'$QiQTpr&(pokFcp=N"R\!>J*dnmspY*1?Y<s'Ic#SJN!mml1M[_0QH\1r0lK/-<[dJmj:\Kdd(u$.oJ=]
%lbYg"H[:D*L-WbNOAV<,KeNc@O]+<R+B>Xhk(np^W.$EnEYPe-OH7=lR\M_ZkY[V(Jg&iE!oY7!80m"F;jc7L(GV*4a=d"8'u:E@
%H*ti8gtPZ[(&hD+_*&n&LBeq"4MD$Bk3+7Nb.E2n8VO*DMc:9/.=DM22#%U\8.PM-;R!GU6@i=C&]T[kdFE6FVL/K'NbPGhHq[^@
%&X0K>(!%uK:`r51Y4<n`-:CAQ;JsDZ2`ffpR+@q:W#d=9qh?)UZ8jAI!F;`c*[1gpX[&]Z"b\?p6ohtXROEm-N$Qk_MF93g9\Ju7
%A5f7_N6V(8'q(<L>[p3C$82lt\lf$?ZIH0k)g[.<b"LYPnuJLrr)bX1il*$H8L#T3l5JCnnV1F:"FF8]OK-dIJ2t$A.:d/CA3ZXV
%@M5N<i;JSb]E"Z?S,uiRY;3*p>neG#OLA:E6BmK[3f6O</^g1;InCdhqC(8:Z!'.cemhNfl>Z(dnmgb<\'Z-h#%UGl/g@Nk?ISJk
%MOjRSBNLGm11^:XYPoM@9<=!CV8k7T`6h)40Dl2iM6,DH&P*e-43RH;)3K8i9FGBnHTEi0X,D_]:id-Aq@nPYOGo3Ib^O)CpTB!-
%);fq9[kIbF:[kDLMOf'XVV*h9_3RHZ(*?Fn/R/cu7OBkBj0Bu@*V/9(GSC@?!WkE"!gZ*HC4#_EacLd(kD59*gF;"hH#h2#_-<GL
%#MLS1'l@\(_:"Ph8gt,X>Fa`$@6>?:##G<!&*48^G;p?gbYt*H")eed)c=@s%hgm/@f,51<=L"ic!_[h:#"i8g-3)a'2Wb"#ik+8
%);dkEk8g>E<@]8G.O_kCN$7[;5p&+Gr?gsh_o0f$OI_F#Wb3ghWS%->OPMJ.od"'L^4)=Ap`[]gq)jdF"G3[h'$crH3[f9QhnBJ)
%c;sB`>(3d-A?3gQDdoccm[H(<L"aC?P#]CF/bPTW_2GkHKW/*KY*rVg1gK_M>Y,rs]U_2eP00,g9SZ$<XJ&-Y9fTg,S=G;,[,sSh
%F"630a`G#,S6I9hiJ?60V<thK`m)-R`JuqTfTZ.p1?`hu9a7/K\@4.?%N1S6[8V0tDN&e4[:$>86VA5Zb2eh'LLqahW;5GY?FW+N
%ckoV,0Y36*D1Fr9m!%o,(Met1^T6_DWA./^Ri:<kpb&<s'GWQi>_Pf,GsaLmPe>LahZ^2q/+q1S6ml25[[M%*#.?kHFl&X/jr0#h
%AucD6@d:GkJsWgo]1V.UCc0m\ZIQGS`gLdFk>-?_Jhese:*M$ZY7UX=4-ZI"CZgX9)J4*3RWD`uE>8f3^tXM2\6jC/M46.A:&h@)
%dcl:OUcBH7Dg&obmnq`$g.\0`X")hlG*K5*Pk>WnDjh1Ra>[bAm2DT[XJ4\#ncF5#<mbjq]L`Zgf28pR-LTa.`6FV[hW"f4h]q)S
%/TDE[e.UY*GTrYPE7G5A'3s'Ra\2U+?1;U;dPJaNZINKdk@(D'cmIDF8%o;8C7(fnIe,1:3ENntJj#<u-<EpEqBl2#H^M8prGOSB
%FRhj*c"K5i=ibE:>%K^V]bNW`rilrg'Ag5^J(gLOD)_%QI`0FBEUQNUS)1YHU!jtTAoHIolYhi?[\5L7d'o_B%8\I/rU)i8C7WaJ
%ST3qRPOP/5B+tA`Ju_B)S)C:V8m^elmt-n4eO)3;ZINKda]:VG>E+.k_,_fQ9s@V&,r,)IGJVJUl<WLP9t$L,2;.76q;Vs3Nt-Zp
%WKM4(V'VnVj=1u=^o8Xn:W<;0kgfL-n#Q?AFMLVrS.<%f45et!)c!H.]GN#S.l$@$bB8A)hF%T;MM/Kh+2'^VighrlR[W5H]r<Hp
%Jb?Bj9?_1_d`N?C1i00p$?S^2p&7,@EjD-J?B_H;=Zm@"V+#YO[r`@H[#hb=e^5*hob$oFb:.5X[%*@<.I1[rl\m4Z7%H;KNE1jY
%e&eNKiIsXk&VQ2fLF^r7XfWsGKYd%FZL,6dp3gg?UL*)>S"XfM'/qrC\NFlSLKnmpakrsE,?6hr_.@ID*nY$LiK#1&)]tS4Wu^Ud
%EE:g[E@`X.haak6XUR'!DX*%An"*!=*'U_q=45h]kXM3qC9%$s@@*2.%"t*\29G-?aD,tH,[CjtS#!*FY,J=\Y`E*c=Ygt6;V%YF
%VkL1*5.L+YBXf@u=AuPrbo503YotI"7^_go@3i"@M"<3#,T,iAAj]Rr-$$2,&L)G_DNj$u@t]:&l6*VsKB/nFDGo_?\`T(*0feN.
%Sti3$2:c>5/K1pSQEjI/nJMfC<f7te13J_9:$O@t,VLl@]fjF'W'%=*,OD1,TAtYD-T?1h8UO=/6Yc"G_AE-)ZEu2QX4[W9#]rL1
%I>!%@ElsiuEg*dUAN^W:`?f;p\!.UC>Q/&(=WLe1;]fEi]puB?[+qIY8QehV=_Bj>-_f^m:+AZ3,8X4/]_mo!VJ>9T>&C4aC9&H>
%H@o43Y]c(r#bfu`JU?=ig\&\UN-gtjmTi]So[HSbSY!DOHg7-+;8WbXFA<\Y&g=8K/j!#2fi";>kIH[$re#]O5WZUOe#goALIY+2
%ola<+lAcJMdAtT>+#i*V*bfP-OH]C8#5OP^FHWq_7nun35Zd$r8(^<bVlUd84"4rCee:p3n?PX.)BLn1=WLe1;]fEi]puB?7,=Z?
%8QehV=XX,hnO,e$WN9-aQ=*oURiX\9jCXTaEascNo]kAFoWD;;]&Y2R:7'b*?#jl)CGi\:ERA[MF)s'0:"Z'#G#Y'gNY2!4X3Yk9
%_p.+dAA"lh:<&cLigWVGiteiBL9Z\?Z:\`H=9DiK;]B*\]UZ1^<I2RDX3"G,YMR9#EJYin/R\h$M52_3F`bSsI>!%@C<DDi0k!u2
%Uo^JfX>@#hLC!tTY.0]pb*:VV;p5pu(GnJBN,]gYVg=k<%`Lu85KH'un]o7,\_V56#<ob*5MXPoQg&rT?uC;R-BUKYG:m[u'RAl#
%nIFn$CfZG!r*rVb%%#bL!Gh0(+?XK2/9c@!jB6@jjf.Va@3<2Z/2th0\Z%hhhKp.E;Rk?^@gR(D@'"p^\>]qA$XV+[n#AG<jK$C(
%PHV]`O)@Bg_]'s0X.q1_l6GYjQW)Ion=>e$.I1[rl\(<O4Y3N.`ceFA/M8u9XG=t>3S@qNg_aHA]f99Bl$!k)1*(D!25`h0bmq9C
%2e9=B;0d;-9>$T-^HKkR8=nOqHhYpGcZ5SJi?qQ"S;d2!HD7icYs**;7r)lIa8'S*mm't8e48.]YGNj._bVUj:!.c+b)/hGgTm2)
%'_P.<)b:K]`D(3"?1;mKRRJqY?VS7\)SUO2/'b,L!FS"&+I$m0"[Q1fM+HHs57o%?j0_lSO.rN,n=7T3\_R7p#Ca6ihqQGdQ]^IC
%$5JsM\OiCA,PPf2>kHkjGiWtoeu4>#$eeJB32N^;E5:_,WK67';mTaY89j0X>92X&s-l-aAOmljNdLNJMiVbHRaEH\?_!AT2#<qg
%W!TaBc8WR@"'q$f+(68)S?cb6aeZ"0=\hFgh4l;7CH12s@s)n49l5Ddn8c73*Mk,j9tkol^,coJp[E9Ea!GANEn#Ec#;3%;?"U.e
%.dOV,H0tF3rI`<nQOl\#2\C+$4uX>u2b)FiYE#!n1PKuJk9cBVQ[]KU8*h!j+W(]We$W&\f?/bhk3DdR-9ehJQa]taCb>pmhaYj"
%<$'qW&baVQ:Nc9@3gc9aj<VI=6GCS&F`&p&Z.`$?1W<nTgP4,Y?'/&-@3<1QZKB!?Uo[-j:IJ?>As1k;c8iY8'XeII#J)+W5/KL0
%3G$HfKh5F2ZCZfV:;kH>f;Gm&;=**-Tukrth8m&1*kP]2gs3ErOlpQ[0R\#+4J0eUp\*6"iE;A"]>G"(%sL)bcZ-u2qrlSN]6YC,
%;eqoApG?'KoW/AA&mdO`=T_rl;]fEi]puC*TfX]=;UuLYf'ob4ar4SG8Qd'>O]*?1+2+2MAe<doX@ZPj6WkdaF8DTnBu`0q@LX>t
%2JY_%)&m%Zc@goI&o:_&*-ApF?OFf!PM'@:Bedcq9bcEGpJ&ZNN=km3MkfM6j#l8gO\2OLDGo`ke@jO6Q`Q2RJT8Nhkc#/SF]hYt
%LMW`^.(VlqL?iZU`JPlIO/%W;D'e=b0j8_VT'pi%T&bnDp<efEGQ%D2n"2Z%,eg6F^<,a7DGeet)bbUb\/;]+^B7c(;]fEi]puCj
%iPMCl8QehW=`L])j=Os=,s&[*0Kmbt3V=!XdE<tS*\L./R[!J%PkB>uSU[.9J+'@X\laZKdTqd4@&Njs28tsHBXONLXt@oKp"lh!
%@-o!m),n!`&bj(j\*K74)>>m9SM>99;`C]J\NG#[fVmb_$Tb2E",RRh-C:8Ps(nZWX7MkMO8n-FTS'<%qWV$n]u)'Bc[%Z&:Na\`
%qrl"3]jACQ`]-nLS?t44aKO[&PE[@UEe:S$\g"%9_EN9+A^/LYPHlNH4V;670:Sc=iK9=ge^5*lob$oFX!?p#lteI,CJra4:tD%N
%f8!(2^.u+P85&dQ@1u"PjDC+.EascNo]d8S4_*]QB5WmqF*Zp)T'[F'*fSsImcHrljL1tu*L5ft@t]:&lI0$%A*Bf@3/R*<Zpl)&
%P"glSapP#5WE[C-i/4!"rVPg?KJb"<-=KWcH6U4`71$<TT$tNB0.Usf:(MG8:47eDoQ&*C&Tj5B-=o=LAY"XMH^k:in!R*D78E"q
%`[\(?Pai*IWlm+VZ<&99P!^.h[aB!KF#%]P2sfp_dr*bL[kmG`$p"LRVL*29k]=;tP_tl\J:l#o"<orIWBUN!`.IDtV7RL/="#ga
%]62E$Nc^$q:*/YC<$'nV&baVQUJURkS=>DrUqN['*2R^N:tG-R$-)8gMOOD?qrm-p28eQ'@84Ub,/P8$2+^of%4<$oUFUBM,OD1l
%8,CN8\OfqfZCZfVcD7q`5&BZKDuZBOdH.*:OZdGZVNe5s/.>LCU9`;'[0;f)f%SJd3:GL3NCNR3U,]["V]NhDr$Gt"fd.P,<bPZo
%I;J@<a.P.[q=-%M(Tk7/M->#,U#)r2fjK([fi+Sq]]?$O)N86F[]G]ZCXWc\8G=[.f$7=CX6o:`mJEhar55)`rZR`*C4_nGSPHmi
%0gd'\0.CR-4./>W)spu4.@1Z7)0&#4<(k@`#j<N$2+t;U9QaU=Q^IG\[#WXCV)pb@^:\LBM\rKWKo!N;nY6Qia:k__)]+Mlo\o3R
%qsfnIp!K,r(#"&$QSg*W[S0eTXe.rU;gTb)gBnoMKXcFH*4K:K<nR.HS'3EPj)S)#QtjUL<%H+?OF@arFXXkd@ScM:X+5&'93)*6
%]HhCP"g94&Dr-c6As1[iX%??1+Y/U#-=K8B[ch:?__qQ1]JON`"g98RGBG;la_I!h,c`kcPq^mKrU2ak8Q^?T>ap;L=Ng'o&@_+[
%j7[90lCjn6a_I!h,c`#GXG"\Ra@]Q^K5C`NGY-])$XQP.mj\WiP1:hY8QK3=$l!50/3Z@#!u/C)DVkW$-EHB=T4Bh$l<22CQu$(^
%$E'XL1U)FG1GCIBD!\i^8DJLt;;(3;RRB#il</pXQtq;PL:&D]7[S^cQ%Z8`%p_q0o+Z-VeKh/m+f]F[8YYL9Sg:=ErcM6[G2>B(
%2,Tcc's]uZC(f&BWioq/=fP')1&WT31B"lM-!eIV]AU3t)Qi:1'n;W^29BTre^lPU#$D9(Dm53$#;:qgGJU?%l<u]A8QM%V-<^:\
%A2R%=5utl+'P''d_+Wh^?1;U7H<3P/-<X'KRUl(,ZHA)GgC0RUV!']klQ$Ydl2BI%m-9,oWDlT`RQU6o4;H-#JoYY$MJ=m!qDI"5
%E6scXI2BPbXJWUEP1:hYV]dS*Ui]+-G)=r6%9X-:nC"gp(VH3<hGl4b8QM%V-<\%D+>>Ib;8WUO\EKn(`5'T+:]hQ"Hk$*s$G$(U
%>)_Xe3>M?lmYZoq>$_q?ZTH?M##]s<,98Hr&>aJf=W[r-T(M=B.e8^6WJnKgcajRl?/!DH4:`Y\Rdk3\XF+3p:4RK7"YiS=+dhj#
%$a6&-prXH$RFPm@SjbZh5fSri=;NTEWj35O3!:WVeh.o*DaW?_nXL0X_i00o_up;=)^,]qXZS5m=o$'kYXET]>RN9ZbFA]f?S$,c
%IAh]&+V(`YHjnQ$1O`1,ED3H>2C@=9\m+2d+[4*n'BYG!Ah?COes3!_Q1FLZ.u:JpXG$on.]gF901cBt`.81;%^<*@$rs,KIW5Wj
%9WVMX-JsQh>N89u*gP?77Bt!M6\PSX67hRo#kA]\\s^ZKo-Qr9GS@3l%%i]jEi=PJ,mgfXHjnQ$1O`1,ED3H>2C@=9\m+2d+WbW4
%+elsIB+o>`=ZmdTQn1PqLFh/[<K$RXd%hF!$G@6$>#L,SiA?hTb?rD'HEl1K"p90:'I5bd'2h^-@ZE*ki$*$cP*?l2gRZW$-RTGt
%k#T3UlF&".WE^AL(5<XuU.;K*Jti4Imo9a\X4?:$eatc2]P-=.Fq[uY9m;d[mt0Qe917aq<H^jb(RM50T16aU,/1#g;98S=0d=>$
%A]d@)H<'D)o*TSEX0WoQI7joF1cFe06N!ednrZHtEn/Wr%Ha_o%:E-OQ'fkN]o6BWresl)il<P>O_3;/e1QrCTonc0GA?0gO*dib
%3t<RMKAFUeJ5(KA$!a45bKo^=]TQV&<S:+.ATi&G7lf'a`fa@FYC$c/UbdHs#]WP>>p`Xk6f"m7S.HcD\SB+i'G9`a653g3H![eA
%&hAJBa_t^W(7VjVDn@P9"2`6j:`r)Z''+b-Tpfr?0+&TjGu\[g*ZF9lKr7?&r53oZ-Go=m;`#F*%^7Ru+==0r0LWfh\+u&BVAtSZ
%T6il2dTR,<OKkSra=A?"2<g',*&83ACR<-XnPFFF4JtW[U[lMqCGY;nQ9lR!>BsD"b"bPV/kP6Na':l0P[Jc>-jjWYEi=Np+\Iht
%5)*h#)8@SQ3%!3/P:PXdmacV\Le"=5)7CB1RiOqJFla4hTDWd=TUjtfbXH*O;8.f6qs7BGMEo15<ZnMkN)W4jIW%brbc4qp=2P-r
%Xm_b[%mT/X*c5kc/Ob2,h6C(g8q+q%b&gLMN<G/fVY'./?Zq/L5@oBO&PA-d5)*h#)8@S13%!3/P:PXdmacV\LdtYVN7!kKT<\I_
%b):-&6]dp\0o@41pd0cC*@mo_P`&]1Pa.lH5_K[p81PKD<U#<H*'t>QCR<-XnPFFF4=S2n5"qZK?%2Ao$a9rb0.C]4Pnmo4m9iAc
%r+Y9eSP\90aW4\1@mqo0(I!Rg_Wa956o_'oY*/,0OmZ7p;M9fg:K:9'FBXT!J9BfS0fmAb,aC=/V9R&N;UP9'r0S/oQ9(ue$:Ms3
%K"UY/<0PW&`?@W(YmRX76poe6nY?^<`b@7QH8oq(1@/*VTn>j;LaH@$NSRci"g%.RI[P`p>*=J&`d1Z.07+,X6o09h8?gF@>pWOh
%")XBK;LCtUYZr5c2B1IKJ8Ntr*Mu.[jfRJo7oFqYYu[tZ$Y<ZNE^LFpOIu`%iFAf5S+2D'Jn&9W1:\SMl>DS/Km7]IU6R;K=)r(*
%9!k`AONsmcYo)IhUN7CQYUIZ\=Hs]>9s<r!\,hG@*%R7!+G[",P.s)s.4<b$P`)T[h6$FI7#t#SX]!Q^SDQq\TNq]*Y]TRh6'[eY
%DrlgN+DQ<BreTm\1E\,BM,jY9iOYE1Y=`Mhan<j<_WkNQCHX,kULP"?&Qb;W4,lXt!44A#mH#Yr8B%gdCp[6$<@au.<d>!bVBb1_
%+=U*CZ3\Bf9i0hnKg`l_qh9'1Fh#'VSs8HtR>NUm41i.jkWlaJ_kNpO.uF+spha"RXkaWVb39"!WQbM`OHAZ5XWeV"F[;#EPnG)N
%lkdg`e`#rIHVU<oaKj2_(H$'k1\eUPRg=s&FM@;uC7U8$Gk]JKZt-oeBWB<FLHIXB`@8U6r'")HdJ-9V9JO#"iG)X\gAOoF$M2?U
%dAB$@[rji+ZjY>7afO>f5g#S+&Z.j)Ji0S:bn>U`X5O7.jLIUX#f^gh:ucbr7)oH-KlV0U\@_F*PiuQM/5r-ah"i0?g-q)2RjYZX
%<-b*Fb$0_BV$s]E0Q;q+3S].\6mZ#*0S\nF)S[dK3[WK4P`)T[h6$FI7$"DkD9MOrEML*<[#)S%oU/qN2:h9Uq-'LPKsiKjOf"mg
%[<b(>&e\KD/-7P2'9r8t+]0u1I\C"O*U[gY-RF(L$>Gue8nYWf]Kj(7@U\l8U;d6`X1"L\%>tNC8!:<pCb0#nJ-I8F.a]_t0jGOE
%pg#>r0u8=4>[/<;DS7DDH=S%1=.]0B/jI,uJ:_`&7$j&eYERji/@AE7:O],K=O\'h\WA*_`@4Yj^DO+F8c5_&kEoVk:+WIV[U&/i
%=WSJQXutt4bZ:)5mEuD&TNl=kY.RD!LTNPlP-nG,!X1>njhR+B&EaD&&fAN/0ob(UiZ&Wu(Ws_IiU59D;PJq9P1N-r;d6S,TM5Pq
%'f'.,1'&g=[Upm*?J:Z#ZYU@LcuufE#tRZfU/_>+\0`Wo]0`6$K)J$H3$.L:]dG+PBIJ.5[(6gW&fkYPW5i>tC/=E'BT64XakO+k
%2)TVW[["MZOp!$5\jEG#`c,3YrF_rha7T4NEbT[']@EL;kFn;sYW&bo4-Dk@"EL4,\CtVDH(Y#cbGfnp;G-6_@uG"?_[T-D<2*@q
%A%4.in[h\n@tO*be`(h`qt6PEBKS,86@%@19%*d0!.nLN?hlI".'HQi)kSM)er@+FM!j$`a!2]McP9Ue0S\n&)S[f`.43\#'MGL%
%D&7OsRYQ&a84B/W>GG,i>l]^srCJ`_`N$$F</7^Q("!6#e<>VN<_&r:"]uSu7dBO^5:?[qB%AW"X/^g./bGhe%h5=j<ki?aEXK0*
%+&Tpjm/r?ZW/>d_d&<6Er(7Jbn?Q8DVBmM+\O'F%@^ma5n[h,^@Y4PF\[X]Uh0MjhoZ0:DI0X\=fVc6'nGY6BO'6A*jaDA>!3D&M
%UPCc0`0.GF;..L71p0m@S[?d`po@DG6HNP_ZIm*8!_ICM7Aiq#H$&\e7Ush/NTT`i0u?+87^sWL2X5LOoo%2+ndrNr(g&Y*@%SVI
%2K42dNtDKk_Z/0Y?Z6iQc;sS0rtF0d\DDSS;oEBqM$YPCCS!#f"fS&=.QI]kM@pJF[K>nerA@'Vh]("+l1b%f_5AM(^$cC9U^`=d
%KZc8M/._9+MV^eEN$u;,f_^<_X/0pGX0+nsn"eRJA#-JVCd%s7X\`:;+.W8a<[6t+@Y?7TN:OX=duFH!]6P++5-lTuNcE$u;7JAO
%qh+5PKh[HDBu+P'5XP]-(-kRG2aRcgs2HtVg\sKBZM$p8/$1TCEF)b)V/4^F-;fHW8)@ms#lEg&i=[_F]ruGi*mp),Mjcb"ml<oL
%DD(l95OmQlSr2GaBR/H]@R&sQZC.3a=_4DfhuCMfJO3#$NVABZ.\]!Q^kkCT3XVE="kKY7'WO[#6Q_tK]B[!\7(hU=;n5^Xf&E@G
%Q<TS&JsYb3,tY[,ehbm;@Y0/_/I!Jbb&OW8j[TqM<VqhZKd.%)mb:]af)+EbC*2!R3SElZT6^7eJ,enSoZQ^fiV6[LpgQ^ME7pA$
%1'q]AiHL?b.@'(IVcBgYnn@Om<D:]d'/J8$c6<qfi).^T9q6bY[jg&J$0=V?@Kd+[_kGYQcp010iGNG<86+ES7K$\QkjD</E^:Xd
%Qq\3q&gn>CQ7ie([uX@"\.*QXg)=faPNZ,&7)t02>,?:q2KtHPd4mI>]NkUhO20thK'K]=^u(M7n-*$o(RO_$hK-u)(s(N354r7Y
%Ht4QR]T(@C=2jd!/RqLT-ItL&W-n5IKRIs$nG;ASIIp\0GU,LlB/<j'3V,C5^7K\Cc4`!`gc2(SI)g#+APVF]>8K^3jh/Y4qrjBk
%q^?\urO_]t5B!DY^:FfspLi9rO,a7dbkpTuOhX^Wp@Z'E",p;J1?!I(p<g\ljD(DFfT'.R?jET2OE?UD*o<=K.8`KUjC\8ElhsN9
%EKRgnfUoFD@:-p\C(Vk%@jkPE2e9q:Dc$pRTU#G=6P,C!EEL;j]`T]-;Ib](LV<$kiUGCLMGNh[2G9(-<a7p^*<\?FPZDI5G,n>\
%ERr_X.lS!57.5lDCkYAtL=MU`SY'/TBsK1oQ&>cCCdK/='ri0?j-8i*nuXg.ZM5Ejk]YV%<d8^sG/D4eNt+[6MtP=p)2'6M((m;+
%h:f]ld'\Kl3(h-qqkt@jP%$9:bc*WD%+E&^boI5$./;Bk+:\V0p*md"8*b,a<,?AhF=Xe"-o%n9P'1u$8,GJZ?4m#4!#=e73?@'b
%aZ6`bGBa#k]D7iQ4t8JdF$'EI]YA,EJ$;H;)*UC-epVF#hjO5d0)`CH=$Ofel2UQL0`;)'M8BAV*'41/*lMRp10dB\Z?OSu!I`lR
%;UO#7GH;/d:I-!!(E"2'/Yi%"qrjCBE_]^qk3/@;r8)g^eo`f>0E1][?,t"1e^'_LnSnZl0@8+-hM/2.hu7Blrq=,(s7LU9p+NnI
%s7;RArUa"hroS_.r3*m5cThC+Iu9QfgY_qpJ,K52?XA3\[ss%1qoca@J+`B9J,87krpLs/oZPF-r9llL59RJ8hs`RSo6:6(hgYHl
%rsoW,RZd~>
%AI9_PrivateDataEnd
